let grid = GridStack.init({
  cellHeight: 10,
});

let a11_x = 0,
  a11_y = 0,
  a11_w = 4,
  a11_h = 16;
let a12_x = 4,
  a12_y = 0,
  a12_w = 4,
  a12_h = 16;
let a13_x = 8,
  a13_y = 0,
  a13_w = 4,
  a13_h = 16;
let a14_x = 0,
  a14_y = 16,
  a14_w = 4,
  a14_h = 16;
let a15_x = 4,
  a15_y = 16,
  a15_w = 4,
  a15_h = 16;
let a70_x = 8,
  a70_y = 16,
  a70_w = 4,
  a70_h = 16;
let a71_x = 0,
  a71_y = 607,
  a71_w = 4,
  a71_h = 16;
let a72_x = 4,
  a72_y = 607,
  a72_w = 4,
  a72_h = 16;
let a73_x = 8,
  a73_y = 607,
  a73_w = 4,
  a73_h = 16;
let a74_x = 0,
  a74_y = 547,
  a74_w = 12,
  a74_h = 60;
let a75_x = 0,
  a75_y = 437,
  a75_w = 12,
  a75_h = 50;
let a114_x = 0,
  a114_y = 2651,
  a114_w = 6,
  a114_h = 50;
let a115_x = 6,
  a115_y = 2651,
  a115_w = 6,
  a115_h = 50;
let a116_x = 0,
  a116_y = 1668,
  a116_w = 12,
  a116_h = 47;
let a117_x = 0,
  a117_y = 1715,
  a117_w = 12,
  a117_h = 57;
let a118_x = 0,
  a118_y = 1772,
  a118_w = 12,
  a118_h = 77;
let a119_x = 0,
  a119_y = 1849,
  a119_w = 12,
  a119_h = 76;
let a120_x = 0,
  a120_y = 2690,
  a120_w = 12,
  a120_h = 50;



let a76_x = 0,
  a76_y = 1344,
  a76_w = 6,
  a76_h = 20;
let a77_x = 6,
  a77_y = 1344,
  a77_w = 6,
  a77_h = 20;
let a78_x = 0,
  a78_y = 387,
  a78_w = 12,
  a78_h = 50;
let a79_x = 0,
  a79_y = 92,
  a79_w = 12,
  a79_h = 50;
let a16_x = 0,
  a16_y = 32,
  a16_w = 6,
  a16_h = 60;
let a69_x = 6,
  a69_y = 32,
  a69_w = 6,
  a69_h = 60;
let a18_x = 0,
  a18_y = 142,
  a18_w = 12,
  a18_h = 50;
let a19_x = 0,
  a19_y = 192,
  a19_w = 12,
  a19_h = 50;
let a39_x = 0,
  a39_y = 242,
  a39_w = 12,
  a39_h = 50;
let a40_x = 0,
  a40_y = 292,
  a40_w = 12,
  a40_h = 50;
let a20_x = 0,
  a20_y = 342,
  a20_w = 6,
  a20_h = 45;
let a21_x = 6,
  a21_y = 342,
  a21_w = 3,
  a21_h = 45;
let a22_x = 9,
  a22_y = 342,
  a22_w = 3,
  a22_h = 45;
let a50_x = 4,
  a50_y = 362,
  a50_w = 4,
  a50_h = 15;
let a51_x = 8,
  a51_y = 362,
  a51_w = 4,
  a51_h = 15;
let a55_x = 8,
  a55_y = 452,
  a55_w = 4,
  a55_h = 15;
let a56_x = 0,
  a56_y = 437,
  a56_w = 4,
  a56_h = 15;
let a57_x = 8,
  a57_y = 437,
  a57_w = 4,
  a57_h = 15;
let a58_x = 4,
  a58_y = 437,
  a58_w = 4,
  a58_h = 15;
let a59_x = 0,
  a59_y = 2250,
  a59_w = 4,
  a59_h = 15;
let a60_x = 4,
  a60_y = 2250,
  a60_w = 4,
  a60_h = 15;
let a47_x = 0,
  a47_y = 317,
  a47_w = 12,
  a47_h = 45;
let a48_x = 0,
  a48_y = 2265,
  a48_w = 6,
  a48_h = 45;
let a49_x = 6,
  a49_y = 2265,
  a49_w = 6,
  a49_h = 45;
let a25_x = 0,
  a25_y = 1066,
  a25_w = 12,
  a25_h = 130;
let a26_x = 0,
  a26_y = 1148,
  a26_w = 12,
  a26_h = 133;
let a27_x = 0,
  a27_y = 1361,
  a27_w = 6,
  a27_h = 20;
let a63_x = 0,
  a63_y = 1341,
  a63_w = 6,
  a63_h = 20;
let a29_x = 6,
  a29_y = 1361,
  a29_w = 6,
  a29_h = 20;
let a28_x = 6,
  a28_y = 1341,
  a28_w = 6,
  a28_h = 20;
let a30_x = 0,
  a30_y = 623,
  a30_w = 6,
  a30_h = 45;
let a31_x = 6,
  a31_y = 623,
  a31_w = 6,
  a31_h = 45;
let a33_x = 0,
  a33_y = 1281,
  a33_w = 12,
  a33_h = 60;
let a34_x = 0,
  a34_y = 668,
  a34_w = 4,
  a34_h = 20;
let a35_x = 4,
  a35_y = 668,
  a35_w = 4,
  a35_h = 20;
let a41_x = 8,
  a41_y = 668,
  a41_w = 4,
  a41_h = 20;
let a36_x = 6,
  a36_y = 688,
  a36_w = 6,
  a36_h = 20;
let a37_x = 0,
  a37_y = 688,
  a37_w = 6,
  a37_h = 20;
let a38_x = 0,
  a38_y = 708,
  a38_w = 12,
  a38_h = 60;
let a42_x = 0,
  a42_y = 1381,
  a42_w = 12,
  a42_h = 60;
let a68_x = 0,
  a68_y = 487,
  a68_w = 12,
  a68_h = 60;

let a44_x = 0,
  a44_y = 768,
  a44_w = 6,
  a44_h = 45;
let a46_x = 6,
  a46_y = 768,
  a46_w = 6,
  a46_h = 45;
let a64_x = 0,
  a64_y = 813,
  a64_w = 12,
  a64_h = 68;
let a23_x = 0,
  a23_y = 1021,
  a23_w = 6,
  a23_h = 45;
let a32_x = 6,
  a32_y = 1021,
  a32_w = 6,
  a32_h = 45;
let a67_x = 0,
  a67_y = 951,
  a67_w = 12,
  a67_h = 70;
let a61_x = 0,
  a61_y = 881,
  a61_w = 12,
  a61_h = 70;
let a80_x = 0,
  a80_y = 1441,
  a80_w = 6,
  a80_h = 16;
let a81_x = 6,
  a81_y = 1441,
  a81_w = 6,
  a81_h = 16;
let a82_x = 0,
  a82_y = 1457,
  a82_w = 6,
  a82_h = 45;
let a83_x = 6,
  a83_y = 1457,
  a83_w = 6,
  a83_h = 45;
let a84_x = 0,
  a84_y = 1502,
  a84_w = 12,
  a84_h = 53;
let a85_x = 0,
  a85_y = 1555,
  a85_w = 12,
  a85_h = 53;
let a100_x = 6,
  a100_y = 1945,
  a100_w = 6,
  a100_h = 45;
let a101_x = 0,
  a101_y = 1990,
  a101_w = 12,
  a101_h = 45;
let a102_x = 0,
  a102_y = 1945,
  a102_w = 6,
  a102_h = 45;
let a103_x = 0,
  a103_y = 1608,
  a103_w = 12,
  a103_h = 60;
let a104_x = 0,
  a104_y = 2089,
  a104_w = 12,
  a104_h = 60;
let a105_x = 0,
  a105_y = 2228,
  a105_w = 4,
  a105_h = 22;
let a106_x = 4,
  a106_y = 2228,
  a106_w = 4,
  a106_h = 22;
let a107_x = 8,
  a107_y = 2228,
  a107_w = 4,
  a107_h = 22;
let a108_x = 0,
  a108_y = 2210,
  a108_w = 4,
  a108_h = 18;
let a109_x = 4,
  a109_y = 2210,
  a109_w = 4,
  a109_h = 18;
let a110_x = 8,
  a110_y = 2210,
  a110_w = 4,
  a110_h = 18;
let a111_x = 0,
  a111_y = 2310,
  a111_w = 4,
  a111_h = 18;
let a112_x = 4,
  a112_y = 2310,
  a112_w = 4,
  a112_h = 18;
let a113_x = 8,
  a113_y = 2310,
  a113_w = 4,
  a113_h = 18;
let b70_x = 0,
  b70_y = 2328,
  b70_w = 4,
  b70_h = 20;
let b71_x = 4,
  b71_y = 2328,
  b71_w = 4,
  b71_h = 20;
let b72_x = 8,
  b72_y = 2328,
  b72_w = 4,
  b72_h = 20;
let b73_x = 0,
  b73_y = 2348,
  b73_w = 6,
  b73_h = 20;
let b74_x = 6,
  b74_y = 2348,
  b74_w = 6,
  b74_h = 20;
let b76_x = 0,
  b76_y = 2551,
  b76_w = 12,
  b76_h = 60;
let b77_x = 0,
  b77_y = 2420,
  b77_w = 12,
  b77_h = 40;
let b78_x = 0,
  b78_y = 2491,
  b78_w = 12,
  b78_h = 60;
let b61_x = 0,
  b61_y = 2611,
  b61_w = 12,
  b61_h = 40;
let b34_x = 0,
  b34_y = 2470,
  b34_w = 4,
  b34_h = 21;
let b35_x = 4,
  b35_y = 2470,
  b35_w = 4,
  b35_h = 21;
let b36_x = 8,
  b36_y = 2470,
  b36_w = 4,
  b36_h = 21;
let c21_x = 6,
  c21_y = 2090,
  c21_w = 6,
  c21_h = 60;
let c19_x = 0,
  c19_y = 2090,
  c19_w = 6,
  c19_h = 60;
let c14_x = 0,
  c14_y = 2035,
  c14_w = 6,
  c14_h = 55;
let c15_x = 6,
  c15_y = 2035,
  c15_w = 6,
  c15_h = 55;
let c11_x = 0,
  c11_y = 1925,
  c11_w = 12,
  c11_h = 20;

let d11_x = 0,
  d11_y = 3000,
  d11_w = 12,
  d11_h = 50;

let d12_x = 0,
  d12_y = 3050,
  d12_w = 12,
  d12_h = 50;
let d13_x = 0,
  d13_y = 4000,
  d13_w = 12,
  d13_h = 50;
let d14_x = 0,
  d14_y = 4050,
  d14_w = 12,
  d14_h = 50;
let d15_x = 0,
  d15_y = 5000,
  d15_w = 12,
  d15_h = 50;
let d16_x = 0,
  d16_y = 5050,
  d16_w = 12,
  d16_h = 50;



let a121_x = 0,
  a121_y = 6000,
  a121_w = 6,
  a121_h = 20;


let a122_x = 6,
  a122_y = 6000,
  a122_w = 6,
  a122_h = 20;


let a123_x = 0,
  a123_y = 6050,
  a123_w = 6,
  a123_h = 20;


let a124_x = 6,
  a124_y = 6050,
  a124_w = 6,
  a124_h = 20;



let a125_x = 0,
  a125_y = 7000,
  a125_w = 6,
  a125_h = 40;



let a126_x = 6,
  a126_y = 7000,
  a126_w = 6,
  a126_h = 40;


let a127_x = 0,
  a127_y = 7050,
  a127_w = 12,
  a127_h = 60;


let a128_x = 0,
  a128_y = 7120,
  a128_w = 12,
  a128_h = 60;

let a129_x = 0,
  a129_y = 3100,
  a129_w = 12,
  a129_h = 60;


// Global Variable Declare for refreshWidgets and LoadData
let globalType, globalDateFirst, globalDateSecond;

let globalSiteName, globalSiteId, globalSocietyId;

let downloadTrendsMonthsLink = "";
let downloadTrendsSitesLink = "";


let downloadTotalVisitorIILink = '';
let downloadGoodInLink = '';
let downloadGoodOutLink = '';

// Links Declare Sidebar
let checkTotalAssetsAvailable = document.getElementById(
  "checkTotalAssetsAvailable"
);
let checkAssetsInUse = document.getElementById("checkAssetsInUse");
let checkAssetInBreakdown = document.getElementById("checkAssetInBreakdown");
let checkLTIR = document.getElementById("checkLTIR");
let checkZeroIncidentDays = document.getElementById("checkZeroIncidentDays");
let checkIncidentPerSqFt = document.getElementById("checkIncidentPerSqFt");
let checkIncidentNearMissGoodCatch = document.getElementById(
  "checkIncidentNearMissGoodCatch"
);


let checkLTIRTop = document.getElementById("checkLTIRTop");
let checkZeroIncidentDaysTop = document.getElementById("checkZeroIncidentDaysTop");
let checkIncidentPerSqFtTop = document.getElementById("checkIncidentPerSqFtTop");
let checkIncidentNearMissGoodCatchTop = document.getElementById(
  "checkIncidentNearMissGoodCatchTop"
);

let checkCriticalAssetsInBreakdown = document.getElementById(
  "checkCriticalAssetsInBreakdown"
);
let checkPPMConductedAssets = document.getElementById(
  "checkPPMConductedAssets"
);
let checkTickets = document.getElementById("checkTickets");
let checkActivityFeed = document.getElementById("checkActivityFeed");
let checkCategoryWiseTickets = document.getElementById(
  "checkCategoryWiseTickets"
);
let checkCustomerSentiments = document.getElementById(
  "checkCustomerSentiments"
);
let checkExecutiveEscalation = document.getElementById(
  "checkExecutiveEscalation"
);
let checkCategoryWiseProactiveTickets = document.getElementById(
  "checkCategoryWiseProactiveTickets"
);
let checkCACategoryWiseTickets = document.getElementById(
  "checkCACategoryWiseTickets"
);


let checkCACategoryWiseProactiveTickets = document.getElementById(
  "checkCACategoryWiseProactiveTickets"
);
let checkTicketsAgeingMatrix = document.getElementById(
  "checkTicketsAgeingMatrix"
);
let checkResolutionTAT = document.getElementById("checkResolutionTAT");
let checkResponseTAT = document.getElementById("checkResponseTAT");
let checkVisitors = document.getElementById("checkVisitors");
let checkPermits = document.getElementById("checkPermits");
let checkPermitSite = document.getElementById("checkPermitSite");
let checkPowerConsumption = document.getElementById("checkPowerConsumption");
let checkPowerConsumptionTop = document.getElementById("checkPowerConsumptionTop");
let checkWaterConsumption = document.getElementById("checkWaterConsumption");
let checkWaterConsumptionTop = document.getElementById("checkWaterConsumptionTop");
let checkTopChecklist = document.getElementById("checkTopChecklist");
let checkInventoryConsumption = document.getElementById(
  "checkInventoryConsumption"
);
let checkInventoryReport = document.getElementById("checkInventoryReport");
let checkCurrentStock = document.getElementById("checkCurrentStock");
let checkInventoryConsumptionGreen = document.getElementById("checkInventoryConsumptionGreen");
let checkInventoryConsumptionReportGreen = document.getElementById("checkInventoryConsumptionReportGreen");
let checkCurrentStockGreen = document.getElementById("checkCurrentStockGreen");
let checkCarbonEmission = document.getElementById("checkCarbonEmission");
let checkFuelConsumption = document.getElementById("checkFuelConsumption");
let checkFitoutRequest = document.getElementById("checkFitoutRequest");
let checkIncidents = document.getElementById("checkIncidents");
let checkIncidentsTop = document.getElementById("checkIncidentsTop");
let checkOpenEscalation = document.getElementById("checkOpenEscalation");
let checkCloseEscalation = document.getElementById("checkCloseEscalation");
let checkAvgEscalation = document.getElementById("checkAvgEscalation");
let checkCategoryWiseIncidents = document.getElementById(
  "checkCategoryWiseIncidents"
);

let checkCategoryWiseIncidentsTop = document.getElementById(
  "checkCategoryWiseIncidentsTop"
);

let checkManPowerAttendance = document.getElementById(
  "checkManPowerAttendance"
);
let checkEventsFootfallAnalysis = document.getElementById(
  "checkEventsFootfallAnalysis"
);
let checkRAC = document.getElementById("checkRAC");
let checkRACTop = document.getElementById("checkRACTop");
let checkFitout = document.getElementById("checkFitout");
let checkSafeManHours = document.getElementById("checkSafeManHours");
let checkAssetsBreakdown = document.getElementById("checkAssetsBreakdown");
let checkAssetsBreakdownGraph = document.getElementById("checkAssetsBreakdownGraph");
let checkWaste = document.getElementById("checkWaste");
let checkPyramid = document.getElementById("checkPyramid");
let checkPyramidTop = document.getElementById("checkPyramidTop");
let checkIncidentII = document.getElementById("checkIncidentII");
let checkRootCause = document.getElementById("checkRootCause");
let checkBodyInjuryChart = document.getElementById("checkBodyInjuryChart");
let checkReactiveProactiveTickets = document.getElementById("checkReactiveProactiveTickets");
let checkOccupancy = document.getElementById("checkOccupancy");

let checkTechnicalChecklist = document.getElementById("checkTechnicalChecklist");
let checkNonTechnicalChecklist = document.getElementById("checkNonTechnicalChecklist");

let checkTotalVisitors = document.getElementById("checkTotalVisitors");
let checkTotalVisitorsII = document.getElementById("checkTotalVisitorsII");
let checkExpectedVisitors = document.getElementById("checkExpectedVisitors");
let checkUnExpectedVisitors = document.getElementById("checkUnExpectedVisitors");
let checkGoodsIn = document.getElementById("checkGoodsIn");
let checkGoodsOut = document.getElementById("checkGoodsOut");
let checkGoodsInwards = document.getElementById("checkGoodsInwards");
let checkGoodsOutwards = document.getElementById("checkGoodsOutwards");
let checkCustomAvg = document.getElementById("checkCustomAvg");
let checkRegisterdUser = document.getElementById("checkRegisterdUser");
let checkOpenAndCloseEscalation = document.getElementById("checkOpenAndCloseEscalation");
let checkZoneWiseEscalation = document.getElementById("checkZoneWiseEscalation");
let checkTotalStaff = document.getElementById("checkTotalStaff");
let checkStaffIn = document.getElementById("checkStaffIn");
let checkStaffOut = document.getElementById("checkStaffOut");
let checkTotalGatePass = document.getElementById("checkTotalGatePass");
let checkReturnablePass = document.getElementById("checkReturnablePass");
let checkNonReturnablePass = document.getElementById("checkNonReturnablePass");
let checkTotalAmount = document.getElementById("checkTotalAmount");
let checkTotalReceived = document.getElementById("checkTotalReceived");
let checkTotalOutstanding = document.getElementById("checkTotalOutstanding");
let checkTotalOutstandingAmount = document.getElementById("checkTotalOutstandingAmount");
let checkCategoryWiseEscalation = document.getElementById("checkCategoryWiseEscalation");
let checkOpenCloseEscalation = document.getElementById("checkOpenCloseEscalation");

let checkServicePartnerEvaluation = document.getElementById("checkServicePartnerEvaluation");

let checkTotalDownloads = document.getElementById("checkTotalDownloads");
let checkFunctionWise = document.getElementById("checkFunctionWise");
let checkClusterStats = document.getElementById("checkClusterStats");
let checkGenderParticipation = document.getElementById("checkGenderParticipation");

let checkTrendsOverMonthSites = document.getElementById("checkTrendsOverMonthSites");

let checkTotalParking = document.getElementById("checkTotalParking");
let checkFreeParking = document.getElementById("checkFreeParking");
let checkPaidParking = document.getElementById("checkPaidParking");
let checkOccupiedParking = document.getElementById("checkOccupiedParking");
let checkVacantParking = document.getElementById("checkVacantParking");
let checkIncident = document.getElementById("checkIncident");
let checkInventory = document.getElementById("checkInventory");

let checkEmpParticipationStats = document.getElementById("checkEmpParticipationStats");
let checkDeliveryVisitors = document.getElementById("checkDeliveryVisitors");
let checkCheckList = document.getElementById("checkCheckList");
let checkFacilityInfo = document.getElementById("checkFacilityInfo");
let checkDailyStepStats = document.getElementById("checkDailyStepStats");
let checkCommLeaderboard = document.getElementById("checkCommLeaderboard");
let checkDailyStepCount = document.getElementById("checkDailyStepCount");
let checkDepartmentStats = document.getElementById("checkDepartmentStats");
let checkCommLeaderboardFemale = document.getElementById("checkCommLeaderboardFemale");

let toggleDaily = document.getElementById("toggleDaily");
let toggleCustom = document.getElementById("toggleCustom");
let toggleInventory = document.getElementById("toggleInventory");

let ZoneWiseEscalationdrillDownLevel = 1;
let CategoryWiseExecutiveEscalationdrillDownLevel = 1;



let showDaily = document.getElementById("showDaily");
let showCustom = document.getElementById("showCustom");
let showInventory = document.getElementById("showInventory");

let inventDate = document.getElementById("inventDate");
let currentDate = document.getElementById("currentDate");
let startDate = document.getElementById("startDate");
let endDate = document.getElementById("endDate");

let showSites = document.getElementById("showSites");
let firstSite = document.getElementById("firstSite");
let multiTowerSelection = document.getElementById("multiTowerSelection");
let selectedCompanyLogo = document.getElementById("selectedCompanyLogo");

let resfunInventDate;
let resfunCardTotalAsset;
let resfunCardTotalAssetInUseAndBreakDown;
let resfunPpmConducted;
let resfunCardOpenCloseEscalation;
let resfunCardAvgEscalation;
let resfunCardDieselNot;
let resfunCardWaterNot;
let resfunCardTotalCriticalAssetInBreakdown;
let resfunCardCustomerAverage;
let resfunChartTicket;
let resfunReactiveTicket;
let resfunChecklist;
let resfunChecklistTop;
let resfunInventoryReport;
let resfunCategoryTicket;
let resfunCategoryProactiveTicket;
let resfunChartCustomerSentiments;
let resfunCACategoryTicket;
let resfunCACategoryProactiveTicket;
let resfunAgeingMatrix;
let resfunTATResolution;
let resfunTATResponse;
let resfunVisitors;
let resfunVisitorsCards;
let resfunStaff;
let resfunStaffIn;
let resfunStaffOut;
let resfunGoodsInwards;
let resfunOutwards;
let resfunPowerConsumptionObject1;
let resfunPowerConsumptionObject2;
let resfunPowerConsumptionObject3;
let resfunPowerConsumptionObject4;
let resfunPowerConsumptionObject5;
let resfunPowerConsumptionObjectMonth;
let resfunPowerConsumptionObject6;
let resfunPowerConsumptionObject7;
let resfunPowerConsumptionObject8;
let resfunWaterConsumptionObject1;
let resfunWaterConsumptionObject2;
let resfunWaterConsumptionObject5;
let resfunWaterConsumptionObject6;
let resfunMonthWiseSTP;

let resFunoccupency1;
let resfunFtFitout2;

let resfunWaterConsumptionObjectLPCD;


let resfunFootfall;
let resfunCarbonEmissionScope1;
let resfunFuelConsumption;
let resfunFitOutRequest;
let resgetEnergyIntensity;
let resfunIncidents;
let resfunIncidentsTop;
let resfunIncidentsCategory;
let resfunIncidentsCategoryTop;
let resfunPowerConsumptionObject9;
let resEVPowerDrill;
let resfunGetLTIR;
let resfunGetLTIRTop;
let resfunGetZeroIncidentDaysTop;
let resfunGetZeroIncidentDays;
let resfunGetIncidentPerSqFt;
let resfunGetIncidentPerSqFtTop;
let resfunpurchaseOrder;
let resfuntotalValue;
let resfunEmpParticipationStats;
let resfunGetIncidentNearMissGoodCatch;
let resfunGetIncidentNearMissGoodCatchTop;
let resfunRCA;
let resfunManPower;
let restotalDownloads;
let resfunAssetsBreakdown;
let resfunExecutiveEscalation;
let resfunFacilityInfo;
let resfunGetSafeManHours;
let resfunPyramid;
let resfunPyramidTop;
let resfunRootCause;
let resBodyInjuryChart;
let resfunTotalVisitors;
let resfunTotalVisitorsII;
let resfunTotalVisitorsIIDrill;
let resfunTotalVisitorsIIDrillSecond;
let resfunTotalVisitorsDropdown;
let resfunGoodsIn;
let resfunGoodsInDrill;
let resfunGoodVisitorsDropdown;
let resfunGoodsOut;
let resfunGoodsOutDrill;
let resfunOutVisitorsDropdown;
let resfunOccupancy;
let resfunDeliveryVisitor;
let resfunFitout;
let resTowerDrill;
let resTicketDrill;
let resTicketDrillSec;
let resResponseTATDrill;
let resPowerDrill;
let resWaterDrill;
let resResolutionTATDrill;
let resIncidentDrill;
let resIncidentDrillIncident;
let resIncidentCategoryDrill;
let resIncidentLevelDrill;
let resTicketCategoryDrill;
let resTicketCategoryProactiveDrill;
let resTicketCategoryCommonDrill;
let resTicketCategoryCommonProactiveDrill;
let resTicketReactiveDrill;
let resFootFallDrill;
let resVisitorsDrill;
let resfunSiteWiseEscalation;
let resfunOpenCloseEscalation;
let resfunOpenCloseDrill;
let resfunCategoryWiseEscalation;
let resfunAuditScore;
let resfungenderParticipation;
let resfunDailyStepStats;
let resfunClusterStats;
let resfuntrendsOverSites;
let resTrendsOverSitesDrill;
let resfuntrendsOverMonths;
let resTrendsOverMonthsDrill;

let resfunCardParking;
let resfunCardParkingPaidFree;
let resfunCardParkingOccpied;
let resfunCardParkingVacant;
let resfunIncidentSummary;
let resfunIncidentSummaryTop;
let resfungetTotalAmount;
let resfuntotalInventory;
let resfunOverUnderStock;
let resfunPermitStatus;
let resfunOutstanding;
let resfunSitePermit;

let resfunCommLeaderboard;
let resfunCommLeaderboardFemale;
let resfunClusterEmployeeParticiption;
let resfunDailyStepCount;
let resfunFunctionEmployeeParticiption;

let resfunTechnicalChecklist;
let resfunNonTechnicalChecklist;
let resfunAssetBreakDown;
let resfunDryWasteSegregation;
let resfunInventoryConsumption;

let resfunCurrentStock;
let resfunInventoryConsumptionGreen;
let resfunInventoryReportGreen;
let resfunCurrentStockGreen;
let resfunWaterConsumptionObject3;
let resfunWaterConsumptionObject;

let resfunCustomerWiseWater;

let
  activeTotalAssetsAvailable = 1,
  activeAssetsInUse = 1,
  activeAssetInBreakdown = 1,
  activeCriticalAssetsInBreakdown = 1,
  activePPMConductedAssets = 1,
  activeTickets = 1,
  activeExecutiveEscalation = 1,

  activeOccupancy = 1,
  activeTotalStaff = 1,
  activeStaffIn = 1,
  activeStaffOut = 1,

  activeActivityFeed = 1,
  activeCategoryWiseTickets = 1,
  activeCustomerSentiments = 1,
  activeFootfall = 1,
  activeCategoryWiseProactiveTickets = 1,
  activeCACategoryWiseTickets = 1,
  activeCACategoryWiseProactiveTickets = 1,
  activeTicketsAgeingMatrix = 1,
  activeResolutionTAT = 1,
  activeResponseTAT = 1,
  activeVisitors = 1,
  activePermits = 1,
  activePermitSite = 1,
  activePowerConsumption = 1,
  activePowerConsumptionTop = 1,
  activeWaterConsumption = 1,
  activeWaterConsumptionTop = 1,
  activeTopChecklist = 1,
  activeInventoryConsumption = 1,
  activeInventoryReport = 1,
  activeCurrentStock = 1,
  activeInventoryConsumptionGreen = 1,
  activeInventoryConsumptionReportGreen = 1,
  activeCurrentStockGreen = 1;
activeCarbonEmission = 1,
  activeFuelConsumption = 1,
  activeFitoutRequest = 1,
  activeEnergyIntensity = 1,
  activeConductedAssets = 1,
  activeCustomerAverage = 1,
  activeOpenEscalation = 1,
  activeCloseEscalation = 1,
  activeAvgEscalation = 1,
  activeIncidents = 1,
  activeIncidentsTop = 1,
  activeCategoryWiseIncidents = 1,
  activeCategoryWiseIncidentsTop = 1,
  activeManPowerAttendance = 1,
  activeEventsFootfallAnalysis = 1,
  activeLTIR = 1,
  activeLTIRTop = 1,
  activeZeroIncidentDays = 1,
  activeZeroIncidentDaysTop = 1,
  activeIncidentPerSqFt = 1,
  activeIncidentPerSqFtTop = 1,
  activeIncidentNearMissGoodCatch = 1,
  activeIncidentNearMissGoodCatchTop = 1,
  activeRAC = 1,
  activeRACTop = 1,
  activeFitout = 1,
  activeFitoutOccupancy = 1,

  activeSafeManHours = 1,
  activeAssetsBreakdown = 1,
  activeAssetsBreakdownGraph = 1,
  activeWaste = 1,
  activePyramid = 1,
  activePyramidTop = 1,
  activeIncidentII = 1,
  activeRootCause = 1,
  activeBodyInjuryChart = 1,
  activeTotalVisitors = 1,
  activeTotalVisitorsII = 1,
  activeExpectedVisitors = 1,
  activeUnExpectedVisitors = 1,
  activeGoodsIn = 1,
  activeGoodsOut = 1,
  activeGoodsInwards = 1,
  activeGoodsOutwards = 1,
  activeSiteWiseEscalation = 1,
  activeOpenCloseEscalation = 1,
  activeCategoryWiseEscalation = 1,

  activeCustomAvg = 1,
  activeReactiveProactiveTickets = 1,
  activeTotalDownloads = 1,
  activeRegisterdUser = 1,
  activeOpenAndCloseEscalation = 1,
  activeZoneWiseEscalation = 1,
  activeServicePartnerEvaluation = 1,

  activeFunctionWise = 1,
  activeClusterStats = 1,
  activeGenderParticipation = 1,
  activeTrendsOverMonthSites = 1,
  activeTotalParking = 1,
  activeFreeParking = 1,
  activePaidParking = 1,
  activeOccupiedParking = 1,
  activeVacantParking = 1,
  activeTotalGatePass = 1,
  activeReturnablePass = 1,
  activeNonReturnablePass = 1,
  activeTotalAmount = 1,
  activeTotalReceived = 1,
  activeTotalOutStanding = 1,
  activeTotalOutStandingAmount = 1,
  activeIncident = 1,
  activeInventory = 1,


  activeDailyStepStats = 1,
  activeDailyStepCount = 1,
  activeDepartmentStats = 1,
  activeEmpParticipationStats = 1,
  activeDeliveryVisitors = 1,
  activeCheckList = 1,
  activeFacilityInfo = 1,
  activeCommLeaderboard = 1,
  activeCommLeaderboardFemale = 1,
  activeTechnicalChecklist = 1,
  activeNonTechnicalChecklist = 1;

toggleDaily.className = "l px-4 ";
toggleCustom.className = "l px-4 l-active";

showDaily.style.display = "none";
showCustom.style.display = "block";

// Describe Link for Daily or Custom Date
function callLinks(type) {
  if (type == "daily") {
    getConducted = ip + "charts-monthly/get-ppm-conducted-monthly/";
    getTotalAssetCard = ip + "charts-daily/get-total-asset-card-daily/";
    getTotalAssetInUseAndBreakDownCard =
      ip + "charts-daily/get-total-asset-in-use-and-breakdown-card-daily/";
    getTotalCriticalAssetInBreakdownCard =
      ip + "charts-daily/get-total-critical-asset-in-breakdown-card-daily/";

    getLTIR = ip + "charts-daily/get-LTIR/";
    getLTIRTop = ip + "supervisor-monthly/get-ltir-top-management/";
    getZeroIncidentDaysTop = ip + "supervisor-monthly/get-card-zeroincident-days-top-management/";
    getCustomerAverage = ip + "charts-daily/get-average-sentiment-daily/";
    getOpenCloseEscalation = ip + "charts-daily/get-executive-escalation-pie-chart-daily/";
    getOpenCloseDrill = ip + "ceo-drill-down/get-drill-down-open-closed-escalation-ceo/";
    getAvgEscalation = ip + "charts-daily/get-executive-escalation-average-ageing-daily/";
    getcardDieselNot = ip + "charts-daily/get-card-total-diesel-non-consumed-daily/";
    getcardWaterNot = ip + "charts-daily/get-card-total-water-non-consumed-daily/";
    getZeroIncidentDays = ip + "charts-daily/get-zero-incident-days/";
    getIncidentPerSqFt = ip + "charts-daily/get-incident-per-million-sqft/";
    getIncidentPerSqFtTop = ip + "supervisor-monthly/get-incident-per-million-sq-feet-per-annum-top-management/";
    getIncidentNearMissGoodCatch = ip + "charts-daily/get-incident-near-miss-good-catch/";
    getIncidentNearMissGoodCatchTop =
      ip + "supervisor-monthly/get-incident-near-miss-good-catch-top-management/";
    getTicketsChart = ip + "charts-daily/get-ticktes-chart-daily/";
    getReactiveTicket = ip + "charts-daily/get-proactive-reactive-incident/";
    getChecklist = ip + "charts-daily/get-card-checklist-daily/";
    getChecklistTop = ip + "charts-monthly/get-top-ten-checklist/";
    getInventoryConsumption = ip + "inventory/get_inventory_consumption_non_green/";
    getInventoryReport =
      ip + "inventory/get_inventory_consumption_report_non_green/";
    getCurrentStock =
      ip + "inventory/get_inventory_current_and_minimum_stock_non_green/";

    getInventoryConsumptionGreen =
      ip + "inventory/get_inventory_consumption_green/";
    getInventoryReportGreen =
      ip + "inventory/get_inventory_consumption_report_green/";
    getCurrentStockGreen =
      ip + "inventory/get_inventory_current_and_minimum_stock_green/";
    getOccupancyChart = ip + "charts-monthly/get-tower-occupancy-summary/";
    getTowerDrill = ip + "charts-monthly/get-tower-no/";
    getTowerDrillSec = ip + "get-drill-down-for-occupancy-summary/";
    getTicketDrill = ip + "charts-monthly/get-tickets-drill-down/";
    getSecondLevelDrillDownTickets = ip + "fm-drill-down/get-tickets-drill-down-second-level/";
    getSecondLevelDrillDownIncident = ip + "fm-drill-down/get-drill-down-for-incident/";
    getResponseTATDrill = ip + "fm-drill-down/get-drill-down-response-tat/";
    getResolutionTATDrill = ip + "fm-drill-down/get-drill-down-resolution-tat/";
    getPowerDrill = ip + "charts-monthly/get-drill-down-for-power-consumptiont/";
    getWaterDrill = ip + "charts-monthly/get-drill-down-for-water-consumptiont/";
    getIncidentDrill = ip + "charts-monthly/get-drill-down-for-incidents/";
    getIncidentCategoryDrill = ip + "charts-monthly/get-drill-down-for-incident-category/";
    getIncidentLevelDrill = ip + "charts-monthly/get-drill-down-for-level-wise-incident/";
    getIncidentLevelDrillSecond = ip + "fm-drill-down/get-drill-down-for-level-wise-incident/";
    getTicketCategoryDrill = ip + "charts-monthly/get-drill-down-for-unit-category-wise-tickets/";
    getTicketCategoryDrillSecond = ip + "fm-drill-down/get-drill-down-for-unit-category-wise-tickets/";
    getTicketCategoryProactiveDrill = ip + "charts-monthly/get-drill-down-for-unit-category-proactive-tickets/";
    getTicketCategoryProactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-unit-category-proactive-tickets/";
    getTicketCategoryCommonDrill = ip + "charts-monthly/get-drill-down-for-common-area-category-wise-tickets/";
    getTicketCategoryCommonDrillSecond = ip + "fm-drill-down/get-drill-down-for-common-area-category-wise-tickets/";
    getTicketCategoryCommonProactiveDrill = ip + "charts-monthly/get-drill-down-for-common-area-category-proactive-tickets/";
    getTicketCategoryCommonProactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-common-area-category-proactive-tickets/";
    getTicketReactiveDrill = ip + "charts-monthly/get-drill-down-for-proactive-reactive-tickets/";
    getTicketReactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-reactive-proactive-tickets/";
    getFootFallDrill = ip + "charts-monthly/get-drill-down-for-footfall-analysis/";
    getFootFallDrillSecond = ip + "fm-drill-down/get-drill-down-for-footfall-analysis/";
    getVisitorsDrill = ip + "charts-monthly/get-drill-down-for-visitors/";
    getVisitorsDrillSecond = ip + "fm-drill-down/get-drill-down-for-visitors/";
    getDeliveryVisitor = ip + "charts-daily/get-delivery-visitor-daily/";
    getUnitCategoryWiseTicketsChart =
      ip + "charts-daily/get-unit-category-wise-ticktes-chart-daily/";
    getUnitCategoryWiseProactiveTicketsChart =
      ip + "charts-daily/get-unit-category-wise-proactive-ticktes-chart-daily/";
    getCommonAreaCategoryWiseTicketsChart =
      ip + "charts-daily/get-commonArea-category-wise-ticktes-chart-daily/";
    getCommonAreaCategoryWiseProactiveTicketsChart =
      ip +
      "charts-daily/get-commonArea-category-wise-proactive-ticktes-chart-daily/";
    getAgeingMatrixChart = ip + "charts-daily/get-ageing-matrix-chart-daily/";
    getTATResolutionResponseChart =
      ip + "charts-daily/get-response-tat-chart-daily/";
    getVisitors = ip + "charts-daily/get-visitor-card-daily/";

    getVisitorsCards = ip2 + "quick-gate-monthly/get-visitor-card/";

    getStaff = ip2 + "quick-gate-daily/get-total-staff/";
    getStaffIn = ip2 + "quick-gate-daily/get-staff-in/";
    getStaffOut = ip2 + "quick-gate-daily/get-staff-out/";
    getGoodsInwards = ip2 + "charts-daily/get-goods-inward/";
    getOutwards = ip2 + "charts-daily/get-goods-outward/";
    getCustomerSentimentsChart = ip + "charts-daily/get-sentiment-daily/";

    getTotalVisitorsDorpdown = ip + "charts-daily/get-building/";
    getTotalVisitors = ip + "charts-daily/get-building-wise-visitors/";

    getGoodVisitorsDorpdown = ip + "charts-daily/get-building/";

    getOutVisitorsDorpdown = ip + "charts-daily/get-building/";

    getGoodsIn = ip2 + "quick-gate-monthly/get-site-wise-goods-inward/";
    getGoodsOut = ip2 + "quick-gate-monthly/get-site-wise-goods-outward/";

    getTotalVisitorsIIDrillDown = ip + "fm-drill-down/get-site-Wise-Visitors-drill-down/";

    getMainMeterTotalConsumption = ip + "charts-daily/get-main-meter-total-consumption/";
    getMainMeterTotalConsumptionTop = ip + "supervisor-monthly/get-total-consumption/";
    getTransformerTotalTop = ip + "charts-monthly/get-transformer-total-monthly/";
    getDGTotalTop = ip + "supervisor-monthly/get-dg-total/";

    getFitoutOccupiedUnoccupied = ip + "charts-daily/get-flat-occupancy/";
    getFtFitoutFlat = ip + "charts-daily/get-fitout-flat/";
    getFitout = ip + "charts-daily/get-active-fitout-requests/";

    getTransformerTotal = ip + "charts-daily/get-transformer-total/";
    getDGTotal = ip + "charts-daily/get-dg-total/";
    getDieselConsumption = ip + "charts-daily/get-diesel-consumption/";
    getDieselConsumptionPieChart =
      ip + "charts-daily/get-diesel-consumption-pie-chart/";
    getPowerConsumptionBarChart =
      ip + "charts-daily/get-power-consumption-bar-chart/";

    getTotalWaterConsumption = ip + "charts-daily/get-total-water-consumption/";
    // getMonthWiseSTP = ip + "charts-daily/get-stp-water-efficiency-chart-daily/";
    getWaterDomesticMonth = ip + "charts-daily/get-site-wise-domestic-water-consumption-daily/";
    getTotalSTP = ip + "charts-daily/get-total-stp-water-consumption/";
    getWaterConsumption = ip + "charts-monthly/get-water-consumption-cards-monthly/";
    getIrrigation = ip + "charts-monthly/get-site-wise-water-irrigation/";
    getFlushing = ip + "charts-monthly/get-site-wise-water-flushing/";
    getWaterSourcePieChart = ip + "charts-daily/get-water-source-pie-chart/";
    getWaterConsumptionStackedBarChart = ip + "charts-daily/get-water-consumption-stacked-bar-chart/";
    // getMonthWiseSTP = ip + "charts-daily/get-stp-water-efficiency-chart-daily/";
    getSiteWiseWater = ip + "charts-daily/get-site-wise-water-consumption-daily/";
    getCustomerWiseWater = ip + "charts-monthly/get-sector-wise-domestic-water-consumption/";


    getMonthWiseSTP = ip + "customer/get-site-wise-stp-efficiency/";
    getWaterSourceLPCDChart = ip + "charts-daily/get-chart-lpcd/"

    getCarbonEmissionScope1 = ip + "charts-daily/get-carbon-emission-scope1/";

    getCarbonEmissionScope2 = ip + "charts-daily/get-carbon-emission-scope2/";

    getEnergyIntensity = ip + "charts-daily/get-energy-intensity/";



    getIncidents = ip + "charts-daily/get-incidents/";
    getIncidentsTop = ip + "supervisor-monthly/get-open-closed-incident-top-management/";
    getIncidentsCategory = ip + "charts-daily/get-incidents-category/";
    getIncidentsCategoryTop = ip + "supervisor-monthly/get-top-five-category-wise-incident-top-management/";
    getEVConsumptionTop = ip + "supervisor-monthly/get-site-wise-ev-consumptions/";
    getEVPowerDrill = ip + "supervisor-monthly/get-site-wise-ev-consumption-drill-down/";
    getIncidentsRCATable = ip + "charts-daily/get-incidents-rca-table/";

    getIncidentManPower = ip + "charts-daily/get-pms-attendance/";


    getAssetsBreakdown = ip + "charts-daily/get-asset-breakdown/";
    getExecutiveEscalation = ip + "charts-daily/get-executive-escalation-table-daily/"
    getSafeManHours = ip + "charts-daily/get-safe-man-hours/";
    getFacilityInfo = ip + "charts-daily/get-club-facilities-daily/";

    getIncidentPerMillionSqFt =
      ip + "charts-daily/get-incident-per-million-sqft/";

    getPyramid = ip + "charts-daily/get-level-wise-incidents/";
    getPyramidTop = ip + "supervisor-monthly/get-level-wise-incident-top-management/";




    getIncidents = ip + "charts-daily/get-incidents/";
    getIncidentsTop = ip + "supervisor-monthly/get-open-closed-incident-top-management/";
    getIncidentsCategory = ip + "charts-daily/get-incidents-category/";
    getIncidentsCategoryTop = ip + "supervisor-monthly/get-top-five-category-wise-incident-top-management/";
    getEVConsumptionTop = ip + "supervisor-monthly/get-site-wise-ev-consumptions/";
    getIncidentsRCATable = ip + "charts-daily/get-incidents-rca-table/";
    getEVPowerDrill = ip + "supervisor-monthly/get-site-wise-ev-consumption-drill-down/";

    getCumulativeConsumptionPieChart =
      ip + "charts-daily/get-card-total-consumption-with-cumulative/";

    getCumulativeConsumptionPieChartTop = ip + "customer/get-renewable-energy-sources/";
    getFitoutCount = ip + "charts-daily/get-fitout-count/";

    getAssetsBreakdown = ip + "charts-daily/get-asset-breakdown/";
    getExecutiveEscalation = ip + "charts-daily/get-executive-escalation-table-daily/"
    getSafeManHours = ip + "charts-daily/get-safe-man-hours/";


    getBodyInjuryChart =
      ip + "charts-daily/get-injuries/";

    getIncidentPerMillionSqFt =
      ip + "charts-daily/get-incident-per-million-sqft/";

    getPyramid = ip + "charts-daily/get-level-wise-incidents/";
    getPyramidTop = ip + "supervisor-monthly/get-level-wise-incident-top-management/";
    getRootCause = ip + "charts-daily/get-cause-wise-incidents/";

    getTotalusers = ip + "charts-daily/get-total-registered-users/";
    getTotalDownloads =
      ip + "charts-daily/get-total-downloads/";

    getGender = ip + "stepathon/get-gender-participation/";
    getDailyStepStats = ip + "stepathon/get-function-wise-step-count/";
    getClusterStats = ip + "stepathon/get-cluster-wise-total-steps_taken/";


    getGenderParticipationDrill = ip + "stepathon/get-gender-participation-drill-down/";
    getCusterStatsDrill = ip + "stepathon/get-cluster-wise-total-steps-taken-drill-down/";
    getDailyStepStatsDrill = ip + "stepathon/get-function-wise-step-count-drill-down/";

    gettrendsOverMonths = ip + "supervisor-monthly/get-card-inventory-cost-over-month/";
    gettrendsOverSites = ip + "charts-monthly/get-inventory-consumption-over-site/";
    getInventoryOverMonthDrill = ip + "supervisor-monthly/get-inventory-cost-over-month-drill-down/";
    getInventoryOverMonthDrillSecond = ip + "supervisor-monthly/get-inventory-cost-over-month-drill-down/";
    getTrendsOverSitesDrill = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down/";
    getTrendsOverSitesDrillSecond = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down/";

    getPowerConsumptionBarChartMonthWise = ip + "supervisor-monthly/get-power-consumption-bar-chart-monthly/";
    getPowerMonthDrill = ip + "charts-monthly/get-month-wise-power-consumption-drill-down/";

    getSitePowerConsumption = ip + "charts-monthly/get-card-site-wise-power-consumption/";
    getEvConsumption = ip + "supervisor-monthly/get-ev-consumption/";
    getPowerDrillTop = ip + "charts-monthly/get-card-site-wise-power-consumption-drill-down/";

    getSitePermit = ip + "supervisor-monthly/get-site-wise-permits-data/";
    getPermitStatus = ip + "supervisor-monthly/get-permits-status-data/";
    getOutstandingTable = ip + "charts-daily/get-total-outstanding-amount-client-wise-daily/";
    gettotalInventory = ip + "supervisor-monthly/get-card-total-value-of-inventory-and-capital-block/";
    getOverUnderStock = ip + "supervisor-monthly/get-card-over-stock-and-under-stock-items/";
    getPurchaseOrder = ip + "supervisor-monthly/get-card-po-and-wo/";
    getTotalValues = ip + "supervisor-monthly/get-card-total-value-of-consumable-and-spares/";
    getTotalAmount = ip + "supervisor-monthly/get-top-management-total-amount/";
    getIncidentsSummary = ip + "charts-daily/get-incidents-rca-table/";
    getIncidentsSummaryTop = ip + "supervisor-monthly/get-incident-summary-chart-top-management/";
    getParking = ip + "supervisor-monthly/get-total-parking/";
    getVacantParking = ip + "supervisor-monthly/get-vacant-parking-data/";
    getOccupiedParking = ip + "supervisor-monthly/get-two-four-wheeler-parking-data/";
    getPaidFreeParking = ip + "supervisor-monthly/get-free-and-paid-parking/";

    getCommLeaderboard = ip + "stepathon/get-cumulative-leaderboard-male/";
    getCommLeaderboardFemale = ip + "stepathon/get-cumulative-leaderboard-female/";
    getFunctionEmployeeParticipation = ip + "stepathon/get-function-employee-participation/";
    getDailyStepCount = ip + "stepathon/get-organisation-daily-step-count/";
    getClusterEmployeeParticipation = ip + "stepathon/get-cluster-employee-participation/";

    getTechnicalChecklist = ip + "charts-monthly/get-chart-technical-checklist-monthly/";
    getNonTechnicalChecklist = ip + "charts-monthly/get-chart-non-technical-checklist-monthly/";
    getDryWasteSegregation = ip + "supervisor-monthly/get-site-wise-dry-waste-segregation/";
    getAssetBreakDown = ip + "supervisor-monthly/get-breakdown-history-chart-monthly/";


  } else {

    getTechnicalChecklist = ip + "charts-monthly/get-chart-technical-checklist-monthly/";
    getNonTechnicalChecklist = ip + "charts-monthly/get-chart-non-technical-checklist-monthly/";
    getDryWasteSegregation = ip + "supervisor-monthly/get-site-wise-dry-waste-segregation/";
    getAssetBreakDown = ip + "supervisor-monthly/get-breakdown-history-chart-monthly/";

    getCommLeaderboard = ip + "stepathon/get-cumulative-leaderboard-male/";
    getCommLeaderboardFemale = ip + "stepathon/get-cumulative-leaderboard-female/";
    getFunctionEmployeeParticipation = ip + "stepathon/get-function-employee-participation/";
    getDailyStepCount = ip + "stepathon/get-organisation-daily-step-count/";
    getClusterEmployeeParticipation = ip + "stepathon/get-cluster-employee-participation/";



    getSitePermit = ip + "supervisor-monthly/get-site-wise-permits-data/";
    getPermitStatus = ip + "supervisor-monthly/get-permits-status-data/";
    getOutstandingTable = ip + "charts-monthly/get-total-outstanding-amount-client-wise/";
    gettotalInventory = ip + "supervisor-monthly/get-card-total-value-of-inventory-and-capital-block/";
    getOverUnderStock = ip + "supervisor-monthly/get-card-over-stock-and-under-stock-items/";
    getPurchaseOrder = ip + "supervisor-monthly/get-card-po-and-wo/";
    getTotalValues = ip + "supervisor-monthly/get-card-total-value-of-consumable-and-spares/";
    getTotalAmount = ip + "supervisor-monthly/get-top-management-total-amount/";
    getIncidentsSummary = ip + "charts-monthly/get-rca-table-monthly/";
    getIncidentsSummaryTop = ip + "supervisor-monthly/get-incident-summary-chart-top-management/";
    getParking = ip + "supervisor-monthly/get-total-parking/";
    getVacantParking = ip + "supervisor-monthly/get-vacant-parking-data/";
    getOccupiedParking = ip + "supervisor-monthly/get-two-four-wheeler-parking-data/";
    getPaidFreeParking = ip + "supervisor-monthly/get-free-and-paid-parking/";




    getInventoryOverMonthDrill = ip + "supervisor-monthly/get-inventory-cost-over-month-drill-down/";
    getInventoryOverMonthDrillSecond = ip + "supervisor-monthly/get-inventory-cost-over-month-drill-down/";

    getTrendsOverSitesDrill = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down/";
    getTrendsOverSitesDrillSecond = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down/";

    gettrendsOverMonths = ip + "supervisor-monthly/get-card-inventory-cost-over-month/";
    gettrendsOverSites = ip + "charts-monthly/get-inventory-consumption-over-site/";

    getPowerConsumptionBarChartMonthWise = ip + "supervisor-monthly/get-power-consumption-bar-chart-monthly/";
    getPowerMonthDrill = ip + "charts-monthly/get-month-wise-power-consumption-drill-down/";

    getSitePowerConsumption = ip + "charts-monthly/get-card-site-wise-power-consumption/";
    getEvConsumption = ip + "supervisor-monthly/get-ev-consumption/";
    getPowerDrillTop = ip + "charts-monthly/get-card-site-wise-power-consumption-drill-down/";

    getTotalVisitorsII = ip + "quick-gate-monthly/get-site-wise-visitors/";

    getAuditScore = ip + "charts-monthly/get-auditscore-tablee-monthly/";

    getCategoryEscalation = ip + "charts-monthly/get-category-wise-executive-escalation-monthly/";
    getOpenCloseEscalation = ip + "charts-monthly/get-executive-escalation-pie-chart-monthly/";
    getOpenCloseDrill = ip + "ceo-drill-down/get-drill-down-open-closed-escalation-ceo/";

    getSiteWiseEscalation = ip + "charts-monthly/get-executive-escalation-zone-wise-chart-monthly/";

    getTotalusers = ip + "charts-daily/get-total-registered-users/";
    getTotalDownloads =
      ip + "charts-daily/get-total-downloads/";

    getInventDate = ip + "charts-daily/get-project-start-date/";
    getTotalAssetCard = ip + "charts-monthly/get-total-asset-card-monthly/";
    getTotalAssetInUseAndBreakDownCard =
      ip + "charts-monthly/get-total-asset-in-use-and-breakdown-card-monthly/";
    getTotalCriticalAssetInBreakdownCard =
      ip + "charts-monthly/get-total-critical-asset-in-breakdown-card-monthly/";
    getConducted = ip + "charts-monthly/get-ppm-conducted-monthly/";
    getFootfall = ip + "charts-monthly/get-footfall-monthly/";
    getOpenCloseEscalation = ip + "charts-monthly/get-executive-escalation-pie-chart-monthly/";
    getAvgEscalation = ip + "charts-monthly/get-executive-escalation-average-ageing-monthly/";
    getcardDieselNot = ip + "charts-monthly/get-card-total-diesel-non-consumed/";
    getcardWaterNot = ip + "charts-monthly/get-card-total-water-non-consumed/";

    getLTIR = ip + "charts-monthly/get-LTIR/";
    getLTIRTop = ip + "supervisor-monthly/get-ltir-top-management/";
    getZeroIncidentDaysTop = ip + "supervisor-monthly/get-card-zeroincident-days-top-management/";
    getCustomerAverage = ip + "charts-monthly/get-average-sentiment-monthly/";
    getZeroIncidentDays = ip + "charts-monthly/get-zero-incident-days/";
    getIncidentPerSqFt = ip + "charts-monthly/get-incident-per-sqft/";
    getIncidentPerSqFtTop = ip + "supervisor-monthly/get-incident-per-million-sq-feet-per-annum-top-management/";


    getCarbonEmissionScope1 = ip + "charts-monthly/get-carbon-emission-scope1-monthly/";

    getCarbonEmissionScope2 = ip + "charts-monthly/get-carbon-emission-scope2-monthly/";

    getEnergyIntensity = ip + "charts-monthly/get-energy-intensity/";


    getIncidentNearMissGoodCatch =
      ip + "charts-monthly/get-incident-near-miss-good-catch/";
    getIncidentNearMissGoodCatchTop =
      ip + "supervisor-monthly/get-incident-near-miss-good-catch-top-management/";

    getTicketsChart = ip + "charts-monthly/get-ticktes-chart-monthly/";
    getReactiveTicket = ip + "charts-monthly/get-chart-ReactiveProactiveTicket-monthly/";

    getChecklist = ip + "charts-monthly/get-chart-checklist-monthly/";
    getChecklistTop = ip + "charts-monthly/get-top-ten-checklist/";
    getInventoryConsumption = ip + "inventory/get_inventory_consumption_non_green/";
    getInventoryReport =
      ip + "inventory/get_inventory_consumption_report_non_green/";
    getCurrentStock =
      ip + "inventory/get_inventory_current_and_minimum_stock_non_green/";

    getInventoryConsumptionGreen =
      ip + "inventory/get_inventory_consumption_green/";
    getInventoryReportGreen =
      ip + "inventory/get_inventory_consumption_report_green/";
    getCurrentStockGreen =
      ip + "inventory/get_inventory_current_and_minimum_stock_green/";
    getOccupancyChart = ip + "charts-monthly/get-tower-occupancy-summary/";
    getTowerDrill = ip + "charts-monthly/get-tower-no/";
    getTowerDrillSec = ip + "fm-drill-down/get-drill-down-for-occupancy-summary/";
    getTicketDrill = ip + "charts-monthly/get-tickets-drill-down/";
    getSecondLevelDrillDownTickets = ip + "fm-drill-down/get-tickets-drill-down-second-level/";
    getSecondLevelDrillDownIncident = ip + "fm-drill-down/get-drill-down-for-incident/";
    getResponseTATDrill = ip + "fm-drill-down/get-drill-down-response-tat/";
    getPowerDrill = ip + "charts-monthly/get-drill-down-for-power-consumptiont/";
    getWaterDrill = ip + "charts-monthly/get-drill-down-for-water-consumptiont/";
    getResolutionTATDrill = ip + "fm-drill-down/get-drill-down-resolution-tat/";
    getIncidentDrill = ip + "charts-monthly/get-drill-down-for-incidents/";
    getIncidentCategoryDrill = ip + "charts-monthly/get-drill-down-for-incident-category/";
    getIncidentLevelDrill = ip + "charts-monthly/get-drill-down-for-level-wise-incident/";
    getIncidentLevelDrillSecond = ip + "fm-drill-down/get-drill-down-for-level-wise-incident/";
    getTicketCategoryDrill = ip + "charts-monthly/get-drill-down-for-unit-category-wise-tickets/";
    getTicketCategoryDrillSecond = ip + "fm-drill-down/get-drill-down-for-unit-category-wise-tickets/";
    getTicketCategoryProactiveDrill = ip + "charts-monthly/get-drill-down-for-unit-category-proactive-tickets/";
    getTicketCategoryProactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-unit-category-proactive-tickets/";
    getTicketCategoryCommonDrill = ip + "charts-monthly/get-drill-down-for-common-area-category-wise-tickets/";
    getTicketCategoryCommonDrillSecond = ip + "fm-drill-down/get-drill-down-for-common-area-category-wise-tickets/";
    getTicketCategoryCommonProactiveDrill = ip + "charts-monthly/get-drill-down-for-common-area-category-proactive-tickets/";
    getTicketCategoryCommonProactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-common-area-category-proactive-tickets/";
    getTicketReactiveDrill = ip + "charts-monthly/get-drill-down-for-proactive-reactive-tickets/";
    getTicketReactiveDrillSecond = ip + "fm-drill-down/get-drill-down-for-reactive-proactive-tickets/";
    getFootFallDrill = ip + "charts-monthly/get-drill-down-for-footfall-analysis/";
    getFootFallDrillSecond = ip + "fm-drill-down/get-drill-down-for-footfall-analysis/";
    getVisitorsDrill = ip + "charts-monthly/get-drill-down-for-visitors/";
    getVisitorsDrillSecond = ip + "fm-drill-down/get-drill-down-for-visitors/";
    getDeliveryVisitor = ip + "charts-monthly/get-delivery-visitor-data/";
    getUnitCategoryWiseTicketsChart =
      ip + "charts-monthly/get-unit-category-wise-ticktes-chart-monthly/";
    getUnitCategoryWiseProactiveTicketsChart =
      ip +
      "charts-monthly/get-unit-category-wise-proactive-ticktes-chart-monthly/";
    getCommonAreaCategoryWiseTicketsChart =
      ip +
      "charts-monthly/get-common-area-category-wise-ticktes-chart-monthly/";
    getCommonAreaCategoryWiseProactiveTicketsChart =
      ip +
      "charts-monthly/get-common-area-category-wise-proactive-ticktes-chart-monthly/";
    getAgeingMatrixChart =
      ip + "charts-monthly/get-ageing-matrix-chart-monthly/";
    getTATResolutionResponseChart =
      ip + "charts-monthly/get-response-tat-chart-monthly/";
    getVisitors = ip + "charts-monthly/get-visitor-card-monthly/";
    getVisitorsCards = ip2 + "quick-gate-monthly/get-visitor-card/";

    getStaff = ip2 + "quick-gate-monthly/get-total-staff/";
    getStaffIn = ip2 + "quick-gate-monthly/get-staff-in/";
    getStaffOut = ip2 + "quick-gate-monthly/get-staff-out/";

    getTotalVisitorsII = ip + "quick-gate-monthly/get-site-wise-visitors/";
    getTotalVisitorsIIDrillDown = ip + "fm-drill-down/get-site-Wise-Visitors-drill-down/";

    getGoodsIn = ip2 + "quick-gate-monthly/get-site-wise-goods-inward/";
    getGoodsInDrill = ip + "fm-drill-down/get-goods-inward-drill-down/";
    getGoodsOut = ip2 + "quick-gate-monthly/get-site-wise-goods-outward/";
    getGoodsOutDrill = ip + "fm-drill-down/get-goods-outward-drill-down/";


    getMainMeterTotalConsumption = ip + "charts-monthly/get-main-meter-total-consumption-monthly/";
    getMainMeterTotalConsumptionTop = ip + "supervisor-monthly/get-total-consumption/";
    getTransformerTotalTop = ip + "charts-monthly/get-transformer-total-monthly/";
    getDGTotalTop = ip + "supervisor-monthly/get-dg-total/";
    getFitoutOccupiedUnoccupied = ip + "charts-monthly/get-flat-occupancy/";
    getFtFitoutFlat = ip + "charts-monthly/get-fitout-flat/";

    getTransformerTotal = ip + "charts-monthly/get-transformer-total-monthly/";
    getDGTotal = ip + "charts-monthly/get-dg-total-monthly/";
    getDieselConsumption =
      ip + "charts-monthly/get-diesel-consumption-monthly/";
    getDieselConsumptionPieChart =
      ip + "charts-monthly/get-diesel-consumption-pie-chart-monthly/";
    getPowerConsumptionBarChart =
      ip + "charts-monthly/get-power-consumption-bar-chart-monthly/";

    getTotalWaterConsumption =
      ip + "charts-monthly/get-total-water-consumption-monthly/";
    getWaterDomesticMonth = ip + "charts-monthly/get-site-wise-domestic-water-consumption/";

    getMonthWiseSTP = ip + "customer/get-site-wise-stp-efficiency/";
    getWaterConsumption = ip + "charts-monthly/get-water-consumption-cards-monthly/";
    getTotalSTP = ip + "charts-monthly/get-total-stp-water-consumption-monthly/";
    getWaterSourcePieChart =
      ip + "charts-monthly/get-water-source-pie-chart-monthly/";
    getWaterConsumptionStackedBarChart =
      ip + "charts-monthly/get-water-consumption-stacked-bar-chart-monthly/";
    getTotalSTP = ip + "charts-monthly/get-total-stp-water-consumption-monthly/";
    getIrrigation = ip + "charts-monthly/get-site-wise-water-irrigation/";
    getFlushing = ip + "charts-monthly/get-site-wise-water-flushing/";
    getSiteWiseWater = ip + "charts-monthly/get-site-wise-water-consumption/";
    getCustomerWiseWater = ip + "charts-monthly/get-sector-wise-domestic-water-consumption/";


    getWaterSourceLPCDChart = ip + "charts-monthly/get-chart-lpcdt-monthly/";
    getCumulativeConsumptionPieChart =
      ip + "charts-monthly/get-card-total-consumption-with-cumulative-monthly/";
    getCumulativeConsumptionPieChartTop = ip + "customer/get-renewable-energy-sources/";
    getCarbonEmissionScope1 =
      ip + "charts-monthly/get-carbon-emission-scope1-monthly/";
    getFuelConsumption = ip + "charts-monthly/get-fuel-consumption-monthly/";

    getIncidents = ip + "charts-monthly/get-incidents-monthly/";
    getIncidentsTop = ip + "supervisor-monthly/get-open-closed-incident-top-management/";
    getIncidentsCategory =
      ip + "charts-monthly/get-incidents-category-monthly/";
    getIncidentsCategoryTop = ip + "supervisor-monthly/get-top-five-category-wise-incident-top-management/";

    getEVConsumptionTop = ip + "supervisor-monthly/get-site-wise-ev-consumptions/";
    getBodyInjuryChart =
      ip + "charts-monthly/get-injuries/";
    getEVPowerDrill = ip + "supervisor-monthly/get-site-wise-ev-consumption-drill-down/";
    getIncidentsRCATable = ip + "charts-monthly/get-rca-table-monthly/";

    getIncidentManPower = ip + "charts-monthly/get-pms-attendance/";
    getFitout = ip + "charts-monthly/get-active-fitout-requests/";

    getFitoutCount = ip + "charts-monthly/get-fitout-count-monthly/";

    getAssetsBreakdown = ip + "charts-monthly/get-asset-breakdown-monthly/";
    getExecutiveEscalation = ip + "charts-monthly/get-executive-escalation-table-monthly/"
    getSafeManHours = ip + "charts-monthly/get-safe-man-hours/";
    getFacilityInfo = ip + "charts-monthly/get-club-facilities-monthly/";

    getIncidentPerMillionSqFt =
      ip + "charts-monthly/get-incident-per-million-sqft/";

    getPyramid = ip + "charts-monthly/get-level-wise-incidents-monthly/";
    getPyramidTop = ip + "supervisor-monthly/get-level-wise-incident-top-management/";
    getRootCause = ip + "charts-monthly/get-cause-wise-incidents-monthly/";
    getCustomerSentimentsChart = ip + "charts-monthly/get-sentiment-daily/";

    getTotalVisitors = ip + "charts-monthly/get-buinding-wise-visitors/";
    getTotalVisitorsDorpdown = ip + "charts-daily/get-building/";
    getGoodVisitorsDorpdown = ip + "charts-daily/get-building/";

    getGoodsIn = ip2 + "quick-gate-monthly/get-site-wise-goods-inward/";
    getGoodsInwards = ip2 + "quick-gate-monthly/get-goods-inward/";
    getOutwards = ip2 + "quick-gate-monthly/get-goods-outward/";
    getGoodsOut = ip2 + "quick-gate-monthly/get-site-wise-goods-outward/";

    getOutVisitorsDorpdown = ip + "charts-daily/get-building/";

    getGender = ip + "stepathon/get-gender-participation/";
    getDailyStepStats = ip + "stepathon/get-function-wise-step-count/";
    getClusterStats = ip + "stepathon/get-cluster-wise-total-steps_taken/";


    getGenderParticipationDrill = ip + "stepathon/get-gender-participation-drill-down/";
    getCusterStatsDrill = ip + "stepathon/get-cluster-wise-total-steps-taken-drill-down/";
    getDailyStepStatsDrill = ip + "stepathon/get-function-wise-step-count-drill-down/";
  }
}

// changes
let a11 = {
  id: "a11",
  x: a11_x,
  y: a11_y,
  w: a11_w,
  h: a11_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                  <div class="orange-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                      <span style="text-align:left"><span id="cardTotalAsset" class="count">0</span><br/>
                      <span class="text">Total Assets Available</span></span>
                      <div id="loader_a11" class="mt-4 spinner-icon" role="status" style="display: none;">
                          <span>
                              <img height="65" width="65" src="assets/img/spinner.svg"/>
                          </span>
                      </div>
                      <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                       <a style="cursor: pointer;margin-right: 6px;" id="infoTotalAssetsAvailableIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                      <a1 style="cursor: pointer;" onclick="downloadAsset()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                        <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a11()" title="Refresh Content" >
                   <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                  </div>
                                 <div id="TotalAssetsAvailableDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalAssetsAvailable" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalAssetsAvailableInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalAssetsAvailableInfo2"></p>
                    <p style="margin-bottom:0px;" id="TotalAssetsAvailableInfo3"></p>
                    </div>
              </div>`,
};

// infoTotalAssetsAvailableIcon,closeTotalAssetsAvailable,TotalAssetsAvailableInfo
function Refresh_a11() {
  let cardTotalAsset = document.getElementById("cardTotalAsset");
  let loader = document.getElementById("loader_a11");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardTotalAsset.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalAssetCard + idLink, true);

    xhr_object.onload = function () {
      resfunCardTotalAsset = JSON.parse(this.responseText);
      console.log("Asset Total - ");
      console.log(resfunCardTotalAsset);

      if (resfunCardTotalAsset.response === 0) {
        cardTotalAsset.innerHTML = "No data available"; // Show "No data available" message
      } else {
        cardTotalAsset.innerHTML = resfunCardTotalAsset.response + ""; // Show data count
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a12 = {
  id: "a12",
  x: a12_x,
  y: a12_y,
  w: a12_w,
  h: a12_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardUseAsset" class="count">0</span><br/>
                    <span class=" text">Asset In Use</span>
                  </span>
                  <div id="loader_a12" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer;margin-right: 6px;" id="infoAssetInUseIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadAssetInUse()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a12()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>

              <div id="AssetInUseDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeAssetInUse" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="AssetInUseInfo"></p>
                    <p style="margin-bottom:0px;" id="AssetInUseInfo2"></p>
                    </div>
          </div>`
};

// infoAssetInUseIcon,AssetInUseDiv,closeAssetInUse,AssetInUseInfo

function Refresh_a12() {
  let cardUseAsset = document.getElementById("cardUseAsset");
  let loader = document.getElementById("loader_a12");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardUseAsset.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalAssetInUseAndBreakDownCard + idLink, true);

    xhr_object.onload = function () {
      resfunCardTotalAssetInUseAndBreakDown = JSON.parse(this.responseText);
      console.log("Asset In Use/Breakdown - ");
      console.log(resfunCardTotalAssetInUseAndBreakDown);

      // Check if response exists and if it's greater than 0 hours
      if (resfunCardTotalAssetInUseAndBreakDown.response && parseFloat(resfunCardTotalAssetInUseAndBreakDown.response.InUse) > 0) {
        cardUseAsset.innerHTML = resfunCardTotalAssetInUseAndBreakDown.response.InUse;
      } else {
        cardUseAsset.innerHTML = "No data available"; // Show "No data available" message if no data or data is 0 or less than 0 hours
      }

      loader.style.display = "none"; // Hide loader
    };


    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a13 = {
  id: "a13",
  x: a13_x,
  y: a13_y,
  w: a13_w,
  h: a13_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                <div class="pink-shade"> 
                    <span style="font-size:100%; text-align:left">
                      <span id="cardBreakdownAsset" class="count">0</span><br/>
                      <span class=" text">Asset In Breakdown</span>
                    </span>
                    <div id="loader_a13" class="mt-4 spinner-icon" role="status" style="display: none;">
                       <span>
                         <img height="65" width="65" src="assets/img/spinner.svg"/>
                       </span>
                    </div>
                    <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                     <a style="cursor: pointer;margin-right: 6px;" id="infoAssetInBreakdownIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                    <a1 style="cursor: pointer;" onclick="downloadAssetIB()" data-toggle="popover"  title="Download Underlying Data" >
                      <i class="bi bi-download"></i></a1>
                    <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a13()" title="Refresh Content" >
                      <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                </div>
                <div id="AssetInBreakdownDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeAssetInBreakdown" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="AssetInBreakdownInfo"></p>
                    <p style="margin-bottom:0px;" id="AssetInBreakdownInfo2"></p>
                    </div>
            </div>`
};

// infoAssetInBreakdownIcon,AssetInBreakdownDiv,closeAssetInBreakdown,AssetInBreakdownInfo

function Refresh_a13() {
  let cardBreakdownAsset = document.getElementById("cardBreakdownAsset");
  let loader = document.getElementById("loader_a13");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardBreakdownAsset.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalAssetInUseAndBreakDownCard + idLink, true);

    xhr_object.onload = function () {
      resfunCardTotalAssetInUseAndBreakDown = JSON.parse(this.responseText);
      console.log("Asset In Use/Breakdown - ");
      console.log(resfunCardTotalAssetInUseAndBreakDown);

      // Check if response exists and if it's greater than 0 hours
      if (resfunCardTotalAssetInUseAndBreakDown.response && parseFloat(resfunCardTotalAssetInUseAndBreakDown.response.InBreakdown) > 0) {
        cardBreakdownAsset.innerHTML = resfunCardTotalAssetInUseAndBreakDown.response.InBreakdown;
      } else {
        cardBreakdownAsset.innerHTML = "No data available"; // Show "No data available" message if no data or data is 0 or less than 0 hours
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a14 = {
  id: "a14",
  x: a14_x,
  y: a14_y,
  w: a14_w,
  h: a14_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                <div class="red-shade"> 
                    <span style="font-size:100%; text-align:left">
                      <span id="cardCriticalAsset" class="count">0</span><br/>
                      <span class=" text">Critical Assets In Breakdown</span>
                    </span>
                    <div id="loader_a14" class="mt-4 spinner-icon" role="status" style="display: none;">
                       <span>
                         <img height="65" width="65" src="assets/img/spinner.svg"/>
                       </span>
                    </div>
                    <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                      <a style="cursor: pointer;margin-right: 6px;" id="infoCriticalAssetsInBreakdownIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                    <a1 style="cursor: pointer;" onclick="downloadCAIB()" data-toggle="popover"  title="Download Underlying Data" >
                      <i class="bi bi-download"></i></a1>
                    <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a14()" title="Refresh Content" >
                      <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                </div>
                 <div id="CriticalAssetsInBreakdownDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 300px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeCriticalAssetsInBreakdown" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CriticalAssetsInBreakdownInfo"></p>
                    <p style="margin-bottom:0px;" id="CriticalAssetsInBreakdownInfo2"></p>
                    <p style="margin-bottom:0px;" id="CriticalAssetsInBreakdownInfo3"></p>
                    </div>
            </div>`
};

// infoCriticalAssetsInBreakdownIcon,CriticalAssetsInBreakdownDiv,closeCriticalAssetsInBreakdown,CriticalAssetsInBreakdownInfo

function Refresh_a14() {
  let cardCriticalAsset = document.getElementById("cardCriticalAsset");
  let loader = document.getElementById("loader_a14");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardCriticalAsset.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalCriticalAssetInBreakdownCard + idLink, true);

    xhr_object.onload = function () {
      resfunCardTotalCriticalAssetInBreakdown = JSON.parse(this.responseText);
      console.log("Critical Asset In Breakdown - ");
      console.log(resfunCardTotalCriticalAssetInBreakdown);

      if (resfunCardTotalCriticalAssetInBreakdown.response === 0) {
        cardCriticalAsset.innerHTML = "No data available"; // Show "No data available" message
      } else {
        cardCriticalAsset.innerHTML = resfunCardTotalCriticalAssetInBreakdown.response + ""; // Show data count
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

// Refresh_a15
let a15 = {
  id: "a15",
  x: a15_x,
  y: a15_y,
  w: a15_w,
  h: a15_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="red-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardConductedAssets" class="count">0</span><br/>
                    <span class=" text">PPM Overdue Assets</span>
                  </span>
                  <div id="loader_a15" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer;margin-right: 6px;" id="infoPPMOverdueAssetsIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadAssetPPM()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a15()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
              <div id="PPMOverdueAssetsDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closePPMOverdueAssets" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="PPMOverdueAssetsInfo"></p>
                    <p style="margin-bottom:0px;" id="PPMOverdueAssetsInfo2"></p>
                    </div>
          </div>`
};

// infoPPMOverdueAssetsIcon,PPMOverdueAssetsDiv,closePPMOverdueAssets,PPMOverdueAssetsInfo

function Refresh_a15() {
  let cardTotalAsset = document.getElementById("cardConductedAssets"); // Update variable name
  let loader = document.getElementById("loader_a15");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardTotalAsset.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getConducted + idLink, true); // Update URL for fetching data

    xhr_object.onload = function () {
      resfunCardTotalAsset = JSON.parse(this.responseText); // Update variable name
      console.log("Asset Total - ");
      console.log(resfunCardTotalAsset);

      if (resfunCardTotalAsset.response === 0) {
        cardTotalAsset.innerHTML = "No data available"; // Show "No data available" message
      } else {
        cardTotalAsset.innerHTML = resfunCardTotalAsset.response + ""; // Show data count
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a70 = {
  id: "a70",
  x: a70_x,
  y: a70_y,
  w: a70_w,
  h: a70_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardCustomerAvg" class="count">0</span><br/>
                    <span class=" text">Customer Average Rating</span>
                  </span>
                  <div id="loader_a70" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer;margin-right: 6px;" id="infoCustomerAverageRatingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadcardCustomerAvg()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a70()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
               <div id="CustomerAverageRatingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeCustomerAverageRating" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CustomerAverageRatingInfo"></p>
                    </div>
          </div>`
};

// infoCustomerAverageRatingIcon,CustomerAverageRatingDiv,closeCustomerAverageRating,CustomerAverageRatingInfo

// Refresh_a70
function Refresh_a70() {
  let cardCustomerAvg = document.getElementById("cardCustomerAvg");
  let loader = document.getElementById("loader_a70");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardCustomerAvg.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getCustomerAverage + idLink, true);


    if (globalType == "daily") {
      xhr_object.open("GET", getCustomerAverage + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getCustomerAverage + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      resfunCardCustomerAverage = JSON.parse(this.responseText);
      console.log("Customer Average Rating - ");
      console.log(resfunCardCustomerAverage);
      cardCustomerAvg.innerHTML =
        resfunCardCustomerAverage.response + "";

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}


let a71 = {
  id: "a71",
  x: a71_x,
  y: a71_y,
  w: a71_w,
  h: a71_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardOpenEscalation" class="count">0</span><br/>
                    <span class=" text">Open Escalation</span>
                  </span>
                  <div id="loader_a71" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                    <a style="cursor: pointer;margin-right: 6px;" id="infoOpenEscalationIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadOpenEscalation()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a71()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
               <div id="OpenEscalationDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeOpenEscalation" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="OpenEscalationInfo"></p>
                    <p style="margin-bottom:0px;" id="OpenEscalationInfo2"></p>
                    </div>
          </div>`
};

function Refresh_a71() {
  let cardOpenEscalation = document.getElementById("cardOpenEscalation");
  let loader = document.getElementById("loader_a71");
  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardOpenEscalation.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getOpenCloseEscalation + idLink, true);

    if (globalType == "daily") {
      xhr_object.open("GET", getOpenCloseEscalation + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getOpenCloseEscalation + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      let resfunCardOpenCloseEscalation = JSON.parse(this.responseText);
      console.log("Open Escalation - ");
      console.log(resfunCardOpenCloseEscalation);

      // Check if response exists and if it's not equal to 0
      if (resfunCardOpenCloseEscalation.response && resfunCardOpenCloseEscalation.response.Open !== 0) {
        cardOpenEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Open + "";
      } else {
        cardOpenEscalation.innerHTML = "No data available"; // Show "No data available" message if no data or data count is 0
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}
// cardOpenEscalation,cardCloseEscalation,cardAvgEscalation

let a72 = {
  id: "a72",
  x: a72_x,
  y: a72_y,
  w: a72_w,
  h: a72_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardCloseEscalation" class="count">0</span><br/>
                    <span class=" text">Close Escalation</span>
                  </span>
                  <div id="loader_a72" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                    <a style="cursor: pointer;margin-right: 6px;" id="infoClosedEscalationIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadCloseEscalation()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a72()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
              <div id="ClosedEscalationDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeClosedEscalation" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ClosedEscalationInfo"></p>
                    <p style="margin-bottom:0px;" id="ClosedEscalationInfo2"></p>
                    </div>
          </div>`
};


function Refresh_a72() {
  let cardCloseEscalation = document.getElementById("cardCloseEscalation");
  let loader = document.getElementById("loader_a72");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardCloseEscalation.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getOpenCloseEscalation + idLink, true);

    if (globalType == "daily") {
      xhr_object.open("GET", getOpenCloseEscalation + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getOpenCloseEscalation + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      let resfunCardOpenCloseEscalation = JSON.parse(this.responseText);
      console.log("Close Escalation - ");
      console.log(resfunCardOpenCloseEscalation);

      // Check if response exists and if it's not equal to 0
      if (resfunCardOpenCloseEscalation.response && resfunCardOpenCloseEscalation.response.Closed !== 0) {
        cardCloseEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Closed + "";
      } else {
        cardCloseEscalation.innerHTML = "No data available"; // Show "No data available" message if no data or data count is 0
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a73 = {
  id: "a73",
  x: a73_x,
  y: a73_y,
  w: a73_w,
  h: a73_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardAvgEscalation" class="count">0</span><br/>
                    <span class=" text">Average Escalation</span>
                  </span>
                  <div id="loader_a73" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <div id="fetcher_a72" class="mt-4 fetcher-icon" role="status" style="display: none;">
                          <span>
                              <img height="65" width="65" src="assets/img/fetcher.svg"/>
                          </span>
                      </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                    <a style="cursor: pointer;margin-right: 6px;" id="infoAverageEscalationIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadAvgEscalation()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a73()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>

              <div id="AverageEscalationDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeAverageEscalation" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="AverageEscalationInfo"></p>
                    <p style="margin-bottom:0px;" id="AverageEscalationInfo2"></p>
                    </div>
          </div>`
};


function Refresh_a73() {
  let cardAvgEscalation = document.getElementById("cardAvgEscalation");
  let loader = document.getElementById("loader_a73");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardAvgEscalation.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open("GET", getAvgEscalation + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getAvgEscalation + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      let resfunCardAvgEscalation = JSON.parse(this.responseText);
      console.log("Avg Escalation - ");
      console.log(resfunCardAvgEscalation);

      if (resfunCardAvgEscalation.response !== null && resfunCardAvgEscalation.response !== "" && parseFloat(resfunCardAvgEscalation.response) > 0) {
        cardAvgEscalation.innerHTML = resfunCardAvgEscalation.response + " Hours";
      } else {
        cardAvgEscalation.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };



    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a76 = {
  id: "a76",
  x: a76_x,
  y: a76_y,
  w: a76_w,
  h: a76_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="green-shade">
                        <span style="text-align:left"><span id="cardDieselNot" class="count" style="font-size:30px">0</span><br/>
                        <span class="text">Total Diesel Non Cosumption</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <a1 style="cursor: pointer;" onclick="downloadDieselNot()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1> 
                    </div>
                </div>`,
};

let a77 = {
  id: "a77",
  x: a77_x,
  y: a77_y,
  w: a77_w,
  h: a77_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="yellow-shade">
                        <span style="text-align:left"><span id="cardWaterNot" class="count" style="font-size:30px">0</span><br/>
                        <span class="text">Total Water Non Cosumption</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <a1 style="cursor: pointer;" onclick="downloadWaterNot()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1> 
                    </div>
                </div>`,
};

let a78 = {
  id: "a78",
  x: a78_x,
  y: a78_y,
  w: a78_w,
  h: a78_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Delivery Visitors</b>  &nbsp; <span id="firstDrillDownUnitDelivery" style="display:none;">  </span>   <span id="secondDrilldownUnitDelivery" style="display:none;"> </span></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoDeliveryVisitorsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                          <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_Deliveryvisitors" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadDeliveryVisitor()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showDeliveryVisitors()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div>
                    <hr class="mt-0"/><br><br><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_visitors" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelVisitors">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                 </div>
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
                 <a  style="cursor:pointer;" class="dropdown-item" id="Purpose" >Purpose </a>
              
                 
             </div>
             </div>
                    <center id="loaderDelivery" class="mt-4"><br><br><br>
                   
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="DeliveryNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="deliveryVisitor"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
      <div id="DeliveryVisitorsDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeDeliveryVisitors" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="DeliveryVisitorsInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoDeliveryVisitorsIcon,DeliveryVisitorsDiv,closeDeliveryVisitors,DeliveryVisitorsInfo

let a79 = {
  id: "a79",
  x: a79_x,
  y: a79_y,
  w: a79_w,
  h: a79_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Reactive Proactive Ticket </b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoReactiveProactiveIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                              <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_reactive" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showTickets()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div>
                    <hr class="mt-0"/><br><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_reactive" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelReactive">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div> 
                        <a  style="cursor:pointer;"class="dropdown-item" id="Tower"  >Tower </a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Number">Ticket Number</a>    
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Created_Date">Created Date To</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Rating">Rating</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Service_Type">Service Type</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                    </div>
                  </div>
                    <center id="loaderReactiveTicket" class="mt-4"><br><br><br>
                    
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="ReactiveTicketNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="reactiveTicket"></canvas>
                    </div></center>

                     <div class="custom-dropdown" >
                    <div id="ReactiveProactiveDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeReactiveProactive" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ReactiveProactiveInfo"></p>
                    <p style="margin-bottom:0px;" id="ReactiveProactiveInfo2"></p>
                    <p style="margin-bottom:0px;" id="ReactiveProactiveInfo3"></p>
                    </div>
                  </div>
                </div>`,
};
// infoReactiveProactiveIcon ,ReactiveProactiveDiv,closeReactiveProactive,ReactiveProactiveInfo

let a16 = {
  id: "a16",
  x: a16_x,
  y: a16_y,
  w: a16_w,
  h: a16_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="dt1" align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b>Tickets </b>    &nbsp; <span id="firstDrillDown" style="display:none;">  </span>   <span id="secondDrilldown" style="display:none;"> </span></span>
                          <div class="parent col-md-4">
                          <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTicketsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                          <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_ticket" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showTickets()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                    <hr class="mt-0"/><br>
                   
                      <div id="dataDropdown_ticket" class="dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                      <div style="display:flex;">
                      <span class="dropdown-item" id="listItemLabelTicket" style="pointer-events: none;">Ticket: </span>
                      <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                      </div>
                          
                          <a style="cursor:pointer;" class="dropdown-item" id="Tower">Tower </a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Status">Status</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Created_By">Created By</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Proactive/Reactive">Proactive/Reactive</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Category">Category</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Sub_Category">Sub Category</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Assign_To">Assign To</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Priority">Priority</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                          <a style="cursor:pointer;" class="dropdown-item" id="Related_To">Related To</a>
                          
                      </div>
            
                  
               

                
                    <center id="loaderTicketB1Chart" class="mt-4"><br><br><br>
                    
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="dt1NoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="ticket-b1"></canvas>
                    </div></center>
                      <div class="custom-dropdown" >
                    <div id="TicketsDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 66%;
                    margin: 25px 25px 25px 13%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTickets" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TicketsInfo"></p>
                    <p style="margin-bottom:0px;" id="TicketsInfo2"></p>
                    <p style="margin-bottom:0px;" id="TicketsInfo3"></p>
                    </div>
                  </div>
                </div>`,

};

// infoTicketsIcon,TicketsDiv,closeTickets,TicketsInfo

{/* <div id="firstDrillDown" style="display:none;">
<span>First Drilldown by : </span>
</div>
<div id="secondDrilldown" style="display:none;">
<span>Second Drilldown by : </span>
</div> */}

let a61 = {
  id: "a61",
  x: a61_x,
  y: a61_y,
  w: a61_w,
  h: a61_h,
  content: `<div style="height: 100%; width: 100%;">
                <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="fitout" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Fitout</span>
                        <div class="parent col-md-2">
                            
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showFitout()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                </div>
              
                    <hr class="mt-0"/><br>

                    <div class="row">
                        <div class="col-lg-6 col-md-6 col-sm-12 row">
                        <div class=" d-flex flex-wrap power-counts justify-content-center">
                              <div class="text-center mt-auto">
                                <span id="fitoutOccupiedFlats" class="fs-3 fw-bold">0</span>
                                <br><span>Occupied Units</span>
                              </div>
                   <div id="loader_a61" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                              <div class="text-center  m-1 ">
                                 <a style="cursor: pointer;margin-left: 69%;" id="refreshIconElement_totalAmount" onclick="Refresh_a61()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                <a style="cursor: pointer;"><i style="font-size:20px; font-weight:bold;" class="bi bi-info-circle"  id="infoOccupiedUnitsIcon"></i></a>
                                <a style="cursor: pointer;width:10px;float: right;" onclick="downloadfitoutUnoccupied()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                <br><span id="fitoutUnoccupiedFlats"  class="fs-3 fw-bold">0</span><br>
                                <span>Unoccupied Units</span>
                              </div>    
                           </div>
                        </div>
                        <div class="col-lg-6 col-md-6 col-sm-12 row">
                            <div class="col-6" style="width:125%">
                                <div class=" text-center  m-1">
                                 <a style="cursor: pointer;margin-left: 69%;" id="refreshIconElement_totalAmount" onclick="Refresh_a61FitOut()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                  <a style="cursor: pointer;"><i style="font-size:20px; font-weight:bold;" class="bi bi-info-circle" id="infoFitoutUnitsIcon"></i></a>
                                   <a style="cursor: pointer;padding-left:5px;width:10px" onclick="downloadftFitoutFlats()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                    <br><span id="ftFitoutFlats" class="fs-3 fw-bold">0</span><br>
                                    <div id="loader_a61FitOut" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                                    <span>Fitout Units</span>
                                </div>
                            </div>
                        </div>
                    </div>
                     <div class="custom-dropdown" >
                    <div id="FitoutUnitsDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                       width: 27%;
                       margin: 6% 25px 25px 57%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeFitoutUnits" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;font-size: 14px;" id="FitoutUnitsInfo"></p>
                    <p style="margin-bottom:0px;font-size: 14px;" id="FitoutUnitsInfo2"></p>
                    </div>
                  </div>

                  <div class="custom-dropdown" >
                    <div id="OccupiedUnitsDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                       width: 27%;
                       margin: 6% 25px 25px 16%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeOccupiedUnits" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;font-size: 14px;" id="OccupiedUnitsInfo"></p>
                    <p style="margin-bottom:0px;font-size: 14px;" id="OccupiedUnitsInfo2"></p>
                    </div>
                  </div>
                    <br>
                    <hr class="mt-0"/>
                    <div>
                    <span id="fitout" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Active Fitout Requests</span>
                    
                        <a style="cursor: pointer; float:right; padding-right:30px;" onclick="downloadFitoutTableData()" data-toggle="popover" title="Download Underlying Data" >
                        <img height="15" width="15" src="assets/img/download.png"/></a>
                         <a style="cursor: pointer;" id="infoFitOutTableIcon"><i style="font-size:20px; font-weight:bold ; float: right; padding-right: 20px;" class="bi bi-info-circle"></i></a>
                          <a style="cursor: pointer;" id="refreshIconElementActiveFitout" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold;float: right;padding-right: 12px;" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    </div>

                    <br><br>

                     <div class="custom-dropdown" >
                    <div id="FitOutTableDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 30% 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeFitOutTable" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="FitOutTableInfo"></p>
                    <p style="margin-bottom:0px;" id="FitOutTableInfo2"></p>
                    </div>
                  </div>
                    <div class="tbl-container overflow-scroll" >
              
                        <table id="tblFitout" class="table table-bordered" overflow-y:scroll" >
                        
                            <thead style="font-size:15px">
                                <th>User Name</th>
                                <th>Category</th>
                                <th>Description</th>
                                <th>Tower</th>
                                <th>Unit</th>
                                <th>Master Status</th>
                            </thead>
                            <tbody id= "tablebodyFitout">
                                  
                            </tbody>
                            
                        </table>
                        <center id="loaderFitout" class="mt-4"><br><br><br>
                        
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="FitoutNoData"><br><br><br>No Data Available</span></center>
                        <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body"></div></center>
                    </div>
                </div>`,
};


let a67 = {
  id: "a67",
  x: a67_x,
  y: a67_y,
  w: a67_w,
  h: a67_h,
  content: `<div style="height: 100%; width: 100%;">
                <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="occupancy" align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b></i></b>Occupancy Summary  &nbsp; <span id="firstDrillDownOccupancy" style="display:none;">  </span>   <span id="secondDrilldownOccupancy" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoOccupancySummaryIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadOccupancy()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showOccupancy()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                </div>
                    <hr class="mt-0"/><br><br><br>
                    <center id="loaderOccupancy" class="mt-4"><br><br><br>
                    
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="occupancyNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-0" style="height: 400px;" style="background-color:#fff; class="card-body">
                        <canvas id="Occupancy_sum"></canvas>
                    </div></center>

                    <div class="custom-dropdown" id="custom-dropdown">
                    
                    <div id="dataDropdown" class="dropdown-menu" style="height:300px;inset:0 ; position:absolute; width:fit-content;margin:80px;">
                    <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabel">Tower: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                    </div>
                     
                        <a  style="cursor:pointer;" class="dropdown-item" id="Flat_Type" >Flat Type </a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Possession">Possession</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Sold">Sold</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Date_Of_Possession">Date of Possession</a>
                        
                    </div>
                  
                </div>
                <div class="custom-dropdown" >
      <div id="OccupancySummaryDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeOccupancySummary" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="OccupancySummaryInfo"></p>
      </div>
    </div>
                </div>
                </div>
            
                
                `,
};

// infoOccupancySummaryIcon,OccupancySummaryDiv,closeOccupancySummary,OccupancySummaryInfo

let a69 = {
  id: "a69",
  x: a69_x,
  y: a69_y,
  w: a69_w,
  h: a69_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="width:100%; background-color:#fff; padding: 10px;">
  <div class="row">
      <span id="sentiments" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Customer Sentiments</b></span>
      <div class="parent col-md-4">
      <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCustomerSentimentsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
       <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_sentiments" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
          <div class="col-sm-1 child mx-2">
              <a style="cursor: pointer;" onclick="downloadcustomerSentiment()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
          </div>
          <div class="col-sm-1 child mx-2">
              <img height="15" width="15"  onclick="showCustomerSentiments()" src="assets/img/xmark-solid.svg"/>
          </div>
      </div>
  </div>
</div>
                    <hr class="mt-0"/><br><br><br>
                    <center id="loaderCustomerSentiments" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=CustomerSentimentsNoData"></span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="customerSentiment"></canvas>
                    </div></center>
                    <div class="custom-dropdown" >
                    <div id="CustomerSentimentsDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 66%;
                    margin: 25px 25px 25px 13%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCustomerSentiments" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CustomerSentimentsInfo"></p>
                    </div>
                  </div>
                </div>`,


};

// infoCustomerSentimentsIcon,CustomerSentimentsDiv,closeCustomerSentiments,CustomerSentimentsInfo

let a75 = {
  id: "a75",
  x: a75_x,
  y: a75_y,
  w: a75_w,
  h: a75_h,
  content: `<div style="height: 100%; width: 100%;">
               <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Checklist</b></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElement_checklist" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoChecklistIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadChecklist()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showCheckList()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                   <hr class="mt-0"/><br><br><br>
                    <center id="loaderChecklist" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=ChecklistNoData"></span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="Checklist"></canvas>
                    </div></center>

                   <div class="custom-dropdown" >
                    <div id="ChecklistDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeChecklist" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ChecklistInfo"></p>
                    <p style="margin-bottom:0px;" id="ChecklistInfo2"></p>
                    <p style="margin-bottom:0px;" id="ChecklistInfo3"></p>
                    <p style="margin-bottom:0px;" id="ChecklistInfo4"></p>
                    <p style="margin-bottom:0px;" id="ChecklistInfo5"></p>
                    <p style="margin-bottom:0px;" id="ChecklistInfo6"></p>
                    </div>
                  </div>
                </div>`,


};
// Checklist,loaderChecklist,ChecklistNoData

let a114 = {
  id: "a114",
  x: a114_x,
  y: a114_y,
  w: a114_w,
  h: a114_h,
  content: `<div style="height: 100%; width: 100%;">
               <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Technical Checklist</b></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTechnicalChecklistIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementTechnicalChecklist" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadTechnicalChecklist()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showTechnicalChecklist()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                   <hr class="mt-0"/><br><br><br>
                    <center id="loaderTechnicalChecklist" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=TechnicalChecklistNoData"></span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="TechnicalChecklist"></canvas>
                    </div></center>

                     <div class="custom-dropdown" >
                    <div id="TechnicalChecklistDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTechnicalChecklist" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TechnicalChecklistInfo"></p>
                    <p style="margin-bottom:0px;" id="TechnicalChecklistInfo2"></p>
                    </div>
                  </div>
                </div>`,


};
// loaderTechnicalChecklist,TechnicalChecklistNoData, TechnicalChecklist, downloadTechnicalChecklist

let a115 = {
  id: "a115",
  x: a115_x,
  y: a115_y,
  w: a115_w,
  h: a115_h,
  content: `<div style="height: 100%; width: 100%;">
               <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Non Technical Checklist</b></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementNonTechnicalChecklist" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoNonTechnicalChecklistIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadNonTechnicalChecklist()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showNonTechnicalChecklist()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                   <hr class="mt-0"/><br><br><br>
                    <center id="loaderNonTechnicalChecklist" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=NonTechnicalChecklistNoData"></span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="NonTechnicalChecklist"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="NonTechnicalChecklistDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeNonTechnicalChecklist" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="NonTechnicalChecklistInfo"></p>
                    <p style="margin-bottom:0px;" id="NonTechnicalChecklistInfo2"></p>
                    </div>
                  </div>
                </div>`,


};

let a116 = {
  id: "a116",
  x: a116_x,
  y: a116_y,
  w: a116_w,
  h: a116_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b>Asset BreakDown</b></span>
                        <div class="parent col-md-3">
                             <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoAssetBreakDownIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_AssetBreakDown" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadAssetBreakdown()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showAssetsBreakdownGraph()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <center id="loaderAssetBreakDown" class="mt-4"><br><br><br>
                    
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="AssetBreakDownNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="AssetBreakDown"></canvas>
                    </div></center>

                    <div class="custom-dropdown" >
                    <div id="AssetBreakDownDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeAssetBreakDown" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="AssetBreakDownInfo"></p>
                    <p style="margin-bottom:0px;" id="AssetBreakDownInfo2"></p>

                    </div>
                </div>`,
  // <span id="dt2" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Unit Category-wise Tickets</span>
};

// infoAssetBreakDownIcon,AssetBreakDownDiv,closeAssetBreakDown,AssetBreakDownInfo

let a117 = {
  id: "a117",
  x: a117_x,
  y: a117_y,
  w: a117_w,
  h: a117_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="width:100%; background-color:#fff; padding: 10px;">
      <div class="row">
          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></i></b>Site Wise Dry Waste Segregation Data</span>
          <div class="parent col-md-3">
           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoSiteWiseDryWasteIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
          <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_waste" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
              <div class="col-sm-1 child mx-2">
                  <a style="cursor: pointer;" onclick="download()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
              </div>
              <div class="col-sm-1 child mx-2">
                  <img height="15" width="15"  onclick="showWaste()" src="assets/img/xmark-solid.svg"/>
              </div>
          </div>
      </div>
  </div>
      <hr class="mt-0"/><br>
      <center id="loaderDryWaste" class="mt-4"><br><br><br>
      
      <div class="mt-4" role="status">
      <span>
      <img height="100" width="100" src="assets/img/loader.svg"/></span>
  </div>
      </center>
      <center><span class="fw-bold my-4" id="dryWasteNoData"><br><br><br>No Data Available</span></center>
      <center><div class="m-4" style="height: 400px;" style="background-color:#fff; class="card-body">
          <canvas id="dryWasteSegregation"></canvas>
      </div></center>

      <div class="custom-dropdown" >
                    <div id="SiteWiseDryWasteDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeSiteWiseDryWaste" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="SiteWiseDryWasteInfo"></p>
                    <p style="margin-bottom:0px;" id="SiteWiseDryWasteInfo2"></p>

                    </div>
                  </div>
  </div>`,
  // <span id="dt2" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Unit Category-wise Tickets</span>
};

// infoSiteWiseDryWasteIcon,SiteWiseDryWasteDiv,closeSiteWiseDryWaste,SiteWiseDryWasteInfo

// dryWasteSegregation,loaderDryWaste,dryWasteNoData

// let a118 = {
//   id: "a118",
//   x: a118_x,
//   y: a118_y,
//   w: a118_w,
//   h: a118_h,
//   content: `<div >
//                     <div style="background-color:#fff;" class="card-header row">
//                         <div class="row">
//                             <span id="titlePowerConsumation" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Power Consumption Top Management</span>
//                             <img class="col-md-1 my-2" height="15" width="15" onclick="showPowerConsumptionTop()" src="assets/img/xmark-solid.svg" />
//                         </div>
//                     </div>
//                     <hr class="mt-0" /><br>
//                 <div class="row">
//                 <div class="col-lg-6 col-md-6 col-sm-12 ">
//                 <div class=" d-flex flex-wrap power-counts justify-content-center">
//                     <div class="text-center go-shadow m-2 total-consumption"><span id="pcTotalHtMeterTop" class="fs-3 fw-bold">0 EBKVAH</span><br><span>Total Consumption (Mains)</span>
//                           <a style="cursor: pointer; float:right; width:10px" onclick="downloadTotalConsumption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

//                     <div class="text-center go-shadow m-2 total-transform"><span id="pcTotalTransformerTop" class="fs-3 fw-bold">0 kwh</span><br><span> Total Renewable</span>
//                             <a style="cursor: pointer; float:right;width:10px" onclick="downloadTransformaerTotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

//                     <div class="text-center go-shadow m-2 total-dg"><span id="pcTotalDgTop" class="fs-3 fw-bold">0 DGKVAH</span><br><span>DG Total</span>
//                             <a style="cursor: pointer; float:right; width:10px" onclick="downloadDgtotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>


//                 </div>
//                         </div>
//                         <div class="col-lg-6 col-md-6 col-sm-12 " style="color:#5e2750;"><b>Renewable Sources & Consumption</b>
//                         <div class=" d-flex flex-wrap power-counts justify-content-center"> 
//                     <div class="col-3">
//                     <center id="loaderPowerConsumPieTop" class="">
//                     <div class="mt-4" role="status">
//                     <span>
//                     <img height="100" width="100" src="assets/img/loader.svg"/></span>
//                 </div>
//                     </center>
//                     <center><a style="cursor: pointer;padding-left:600px;width:10px" onclick="downloadDConsumPie()" 
//                     data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
//               <span class="fw-bold my-4" id="powerConsumPieNoDataTop">No Data Available</span></center>

//                     <center><div style=" margin-top:-30px ">
//                         <canvas id="power_consume_pieTop"></canvas>
//                     </div></center>
//                 </div>

//                         <div class="col-3 mt-5">
//                             <div>
//                                 <span class="fw-bold" style="font-size:14px">Renewable Resources </span> <br />
//                                 <span id="psPie1"  style=" font-size: 12px ; margin-left:20px;"> <i style="color:#F2C06C ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
//                                 <span  id="psPie2" style=" font-size: 12px ; margin-left:20px;"> <i style="color:#01C875 ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
//                                 <span  id="psPie3" style=" font-size: 12px ; margin-left:-30px;"><i style="color:#E95420 ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
//                                 <span  id="psPie4" style=" font-size: 12px ; margin-left:-30px;">  <i style="color:#FDAB3D ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
//                             </div>


//                         </div>
//                         </div>



//                     </div>

//                         <div class="col-12 mt-2">
//                             <hr class="mb-4" />
//                             <span class="fw-bold">Site Wise Power Consumption</span> <br />
//                               <center id="loaderSitePower" class="mt-4"><br><br><br>
//                               <div class="mt-4" role="status">
//                               <span>
//                               <img height="100" width="100" src="assets/img/loader.svg"/></span>
//                           </div>
//                               </center>
//                               <center>
//                               <div class="row">

//                                     <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
//                                   <div class="parent col-md-2">
//                                   <div class="col-sm-1 child mx-2">
//                                   <a style="cursor: pointer;" id="refreshIconElement_powerSite" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
//                                     <a style="cursor: pointer;" onclick="downloadSiteWise()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>

//                                   <span class="fw-bold my-4" id="SitePowerNoData"><br><br><br>No Data Available</span>
//                               </center>

//                               <center> 

//                                 <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
//                                   <canvas id="SitePowerConsumption"></canvas>
//                                   <div class="custom-dropdown" id="custom-dropdown">
//                                   <div id="dataDropdown_powersite" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:60%;">
//                                   <div style="display:flex;">
//                                     <span class="dropdown-item" id="listItemLabelpowerTop">Power Consumption: </span>
//                                     <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
//                                     </div>  
//                                     <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>

//                            </div>

//                        </div>
//                                 </div>

//                               </center>

//                               </div> 



//                         </div>

//                         <div class="col-12 mt-2">
//                         <hr class="mb-4" />
//                         <span class="fw-bold">Month Wise Power Consumption</span> <br />
//                           <center>
//                           <div class="row">

//                                 <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
//                               <div class="parent col-md-2">
//                               <div class="col-sm-1 child mx-2">
//                               <a style="cursor: pointer;" id="refreshIconElement_monthpower" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
//                                 <a style="cursor: pointer;" onclick="downloadPowerConsumMonth()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
//                                <span class="fw-bold my-4" id="powerConsumMonthNoData"><br><br><br></span>
//                           </center>

//                           <center> 
//                             <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
//                               <canvas id="power_consumption_month"></canvas>
//                             </div>
//                           </center>
//                           <div class="custom-dropdown" id="custom-dropdown">
//                           <div id="dataDropdown_monthpower_wise" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:100%">
//                           <div style="display:flex;">
//                             <span class="dropdown-item" id="listItemLabelmonthpower">Power Consumption: </span>
//                             <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
//                             </div>
//                             <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>

//                    </div>

//                </div>
//                           </div>    
//                     </div>


//             </div>
//         </div>
//             </div>`,

// };



let a118 = {
  id: "a118",
  x: a118_x,
  y: a118_y,
  w: a118_w,
  h: a118_h,
  content: `<div >
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span id="titlePowerConsumation" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Power Consumption Top Management</span>
                            <img class="col-md-1 my-2" height="15" width="15" onclick="showPowerConsumption()" src="assets/img/xmark-solid.svg" />
                        </div>
                    </div>
                    <hr class="mt-0" /><br>
                <div class="row">
                <div class="col-lg-6 col-md-6 col-sm-12 ">
                <div class=" d-flex flex-wrap power-counts">
                    <div class="text-center go-shadow m-2 total-consumption"><span id="pcTotalHtMeterTop" class="fs-3 fw-bold">0 EBKWH</span><br><span>Total Consumption (Mains)</span><br>
                     <div id="loader_TotalConsumption" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_TotalConsumption()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                             <a style="cursor: pointer;" id="infoTotalConsumptionIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                             <a style="cursor: pointer; float:right; width:10px" onclick="downloadTotalConsumption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>


                    <div class="text-center go-shadow m-2 total-transform"><span id="pcTotalTransformerTop" class="fs-3 fw-bold">0 KWH</span><br><span> Total Renewable</span><br>
                     <div id="loader_TotalRenewable" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_TotalRenewable()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                               <a style="cursor: pointer;" id="infoTotalRenewableIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                            <a style="cursor: pointer; float:right;width:10px" onclick="downloadTransformaerTotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

                    <div class="text-center go-shadow m-2 total-dg"><span id="pcTotalDgTop" class="fs-3 fw-bold">0 DGKWH</span><br><span>DG Total</span><br>
                    <div id="loader_DGTotal" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_DGTotal()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                               <a style="cursor: pointer;" id="infoTotalDGIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                            <a style="cursor: pointer; float:right; width:10px" onclick="downloadDgtotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>


                             <div class="text-center go-shadow m-2 tatal-diesel-consume"><span id="evConsumption" class="fs-3 fw-bold">0 KWH</span><br><span>EV Consumption</span><br>
                    <div id="loader_EVConsumption" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 64%;" id="refreshIconElement_totalAmount" onclick="Refresh_EVConsumption()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              <a style="cursor: pointer;" id="infoEVConsumptionIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                            <a style="cursor: pointer; float:right; width:10px" onclick="downloadEVConsumption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

                   
                </div>

                   
                </div>

               
                      

                         
                        <div class="col-lg-6 col-md-6 col-sm-12 " style="color:#5e2750;"><b>Renewable Sources & Consumption</b> 
                         <a style="cursor: pointer;margin-left: 10%;" id="infoRenewableSourcesIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer;width:10px;"  id="Refresh_RenewableSources" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;width:10px" onclick="downloadTransformaerTotal()" 
                    data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                        <div class=" d-flex flex-wrap power-counts justify-content-center"> 
                    <div class="col-3">
                    <center id="loaderPowerConsumPieTop" class="">
                        <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center>
              <span class="fw-bold my-4" id="powerConsumPieNoDataTop">No Data Available</span></center>
                
                    <center><div style=" margin-top:-30px ">
                        <canvas id="power_consume_pieTop"></canvas>
                    </div></center>
                </div>
                        
                        <div class="col-3 mt-5">
                            <div>
                                <span class="fw-bold" style="font-size:14px">Renewable Resources </span> <br />
                                <span id="psPie1"  style=" font-size: 12px ; margin-left:20px;"> <i style="color:#F2C06C ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
                                <span  id="psPie2" style=" font-size: 12px ; margin-left:20px;"> <i style="color:#01C875 ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
                                <span  id="psPie3" style=" font-size: 12px ; margin-left:-30px;"><i style="color:#E95420 ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
                                <span  id="psPie4" style=" font-size: 12px ; margin-left:-30px;">  <i style="color:#FDAB3D ;font-size: 13px; margin-left:10px; font-style:normal;"></i></span><br/>
                            </div>

                           
                        </div>
                        </div>

                       

                    </div>

                        <div class="col-12 mt-2">
                            <hr class="mb-4" />
                            <span class="fw-bold">Site Wise Power Consumption</span> <br />
                              <center id="loaderSitePower" class="mt-4"><br><br><br>
                               <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                              </center>
                              <center>
                              <div class="row">
                              
                                    <span  align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b></span>
                                  <div class="parent col-md-3">
                                  <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" id="refreshIconElement_powerSite" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                  </div>
                                  <div class="col-sm-1 child mx-2">
                                   <a style="cursor: pointer;" id="infoSiteWisePowerIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                   </div>
                                  <div class="col-sm-1 child mx-2">
                                    <a style="cursor: pointer;" onclick="downloadSiteWise()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                    </div>
                                     
                                   <span class="fw-bold my-4" id="SitePowerNoData"><br><br><br>No Data Available</span>
                              </center>
                      <div class="custom-dropdown" >
                          <div id="SiteWisePowerDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 60%;
                         margin: 48% 25px 25px 27%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeSiteWisePower" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="SiteWisePowerInfo"></p>
                          <p id="SiteWisePowerInfo2"></p>
                          </div>
                  </div>

                  <div class="custom-dropdown" >
                          <div id="TotalConsumptionDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                             margin: 5% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalConsumption" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalConsumptionInfo"></p>
                          <p id="TotalConsumptionInfo2"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="TotalRenewableDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 23%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalRenewable" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalRenewableInfo"></p>
                          <p id="TotalRenewableInfo2"></p>
                          </div>
                  </div>


                    <div class="custom-dropdown" >
                          <div id="TotalDGDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 16% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalDG" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalDGInfo"></p>
                          <p id="TotalDGInfo2"></p>
                          </div>
                  </div>

                       <div class="custom-dropdown" >
                          <div id="EVConsumptionnDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 19% 25px 25px 23%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeEVConsumption" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="EVConsumptionInfo"></p>
                          <p id="EVConsumptionInfo2"></p>
                          </div>
                  </div>


                  <div class="custom-dropdown" >
                          <div id="RenewableSourcesDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 41%;
                          margin: 12% 25px 25px 54%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeRenewableSources" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="RenewableSourcesInfo"></p>
                          <p id="RenewableSourcesInfo2"></p>
                          </div>
                  </div>

                 
                              <center> 
                            
                                <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                                  <canvas id="SitePowerConsumption"></canvas>
                                  <div class="custom-dropdown" id="custom-dropdown">
                                  <div id="dataDropdown_power" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:55%">
                                    <span class="dropdown-item" id="listItemLabelpower">Power Consumption: </span>
                                    <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>
                               
                           </div>
                         
                       </div>
                                </div>
                               
                              </center>

                              </div> 

                           
                              
                        </div>

                        <div class="col-12 mt-2">
                        <hr class="mb-4" />
                        <span class="fw-bold">Month Wise Power Consumption</span> <br />
                          <center id="loaderMonthPower" class="mt-4"><br><br><br>
                           <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                          </center>
                          <center>
                          <div class="row">
                          
                                <span  align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b></span>
                              <div class="parent col-md-3">
                              <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_monthpower" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                                <div class="col-sm-1 child mx-2">
                                   <a style="cursor: pointer;" id="infoMonthWisePowerIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                   </div>
                                    <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadPowerConsum()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                </div>
                               <span class="fw-bold my-4" id="powerConsumMonthNoData"><br><br><br>No Data Available</span>
                          </center>
                      <div class="custom-dropdown" >
                          <div id="MonthWisePowerDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 60%;
                         margin: 90% 25px 25px 27%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeMonthWisePower" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="MonthWisePowerInfo"></p>
                          <p id="MonthWisePowerInfo2"></p>
                          </div>
                  </div>
                          <center> 
                            <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                              <canvas id="power_consumption_month"></canvas>
                            </div>
                          </center>
                          <div class="custom-dropdown" id="custom-dropdown">
                          <div id="dataDropdown_monthpower" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:90%">
                            <span class="dropdown-item" id="listItemLabelmonthpower">Power Consumption: </span>
                            <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>
                       
                   </div>
                 
               </div>
                          </div>    
                    </div>

               
            </div>
        </div>
            </div>`,
  // <center id="loaderPowerConsumAssetWiseTimeSeries" class="mt-4"><br><br><br>
  //                 <div class="mt-4 spinner-border" role="status">
  //                     <span class="sr-only"></span>
  //                 </div>
  //             </center>
  // <div class="col-12 mt-2">
  //   <hr class="mb-4" />
  //     <center>
  //       <div class="row">
  //         <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
  //       <div class="parent col-md-2">
  //       <div class="col-sm-1 child mx-2">
  //         <span class="fw-bold my-4" id="powerConsumAssetWiseTimeSeriesNoData"><br><br><br>No Data Available</span>
  //       </div>
  //       </div>
  //    </center>
  //     <center>
  //       <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
  //         <canvas id="power-consumption-assetwise"></canvas>
  //       </div>
  //     </center>
  // </div>


  //   <div class="col-12 mt-2">
  //   <hr class="mb-4" />
  //   <span class="fw-bold">Site Wise DG Efficiency</span> <br />
  //     <center id="loaderMonthWiseDG" class="mt-4"><br><br><br>
  //       <div class="mt-4 spinner-border" role="status">
  //           <span class="sr-only"></span>
  //       </div>
  //     </center>
  //     <center>
  //     <div class="row">

  //           <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
  //         <div class="parent col-md-2">
  //         <div class="col-sm-1 child mx-2">
  //         <a style="cursor: pointer;" id="refreshIconElement_dg" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
  //           <a style="cursor: pointer;" onclick="downloadDGMonth()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
  //          <span class="fw-bold my-4" id="MonthWiseDGNoData"><br><br><br>No Data Available</span>
  //     </center>

  //     <center> 
  //       <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
  //         <canvas id="MonthWiseDG"></canvas>
  //       </div>
  //       <div class="custom-dropdown" id="custom-dropdown">
  //       <div id="dataDropdown_dg" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:150%">
  //         <span class="dropdown-item" id="listItemLabeldg">Power Consumption: </span>
  //         <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>

  // </div>

  // </div>
  //     </center>
  //     </div>    
};

let a119 = {
  id: "a119",
  x: a119_x,
  y: a119_y,
  w: a119_w,
  h: a119_h,
  content: `<div >
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span id="titleWaterConsumption" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Water Consumption Top Management</span>
                            <img class="col-md-1 my-2" height="15" width="15" onclick="showWaterConsumptionTop()" src="assets/img/xmark-solid.svg" />
                        </div>
                    </div>
                    <hr class="mt-0" /><br>
<div class="row">
      <div class="col-12 water-counts" style="margin-bottom:70px;">
          <div class="text-center go-shadow m-2 total-consumption">
            <span id="wcTotalConsumptionTop" class="fs-3 fw-bold">0 KL</span><br>
            <span>Total Sourced</span><br>
             <div id="loader_wcTotalConsumptionTop" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 68%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalConsumptionTop()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalConsumptionWaterIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
            <a style="cursor: pointer;width:10px;float: right;" onclick="downloadwcTotalConsumption()" data-toggle="popover" title="Download Underlying Data">
            <img height="15" width="15" src="assets/img/download.png"/></a>
          </div>
          <div class="text-center go-shadow m-2 total-transform"><span id="wcTotalDomesticTop" class="fs-3 fw-bold">0
                  KL</span><br><span>Domestic Outlet</span><br>
                    <div id="loader_wcTotalDomesticTop" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 65%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalDomesticTop()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalDomesticIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                  <a style="cursor: pointer;width:10px" onclick="downloadDomesticTotal()" 
                    data-toggle="popover" title="Download Underlying Data">
                    <img height="15" width="15" src="assets/img/download.png"/></a></div>
          <div class="text-center go-shadow m-2 total-dg"><span id="wcFlushingTotalTop" class="fs-3 fw-bold">0
                  KL</span><br><span>Flushing Outlet</span><br>
                  <div id="loader_wcFlushingTotalTop" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcFlushingTotalTop()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                   <a style="cursor: pointer;" id="infoFlushingTotalIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                  <a style="cursor: pointer;width:10px;padding-left:0px;" onclick="downloadFlushingTotal()" 
                    data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                     <div class="text-center go-shadow m-2 tatal-diesel-consume"><span id="wcTotalIrrigationTop" class="fs-3 fw-bold">0
                  KL</span><br><span>Irrigation Outlet</span><br>
                   <div id="loader_wcTotalIrrigationTop" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalIrrigationTop()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalIrrigationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                  <a style="cursor: pointer;width:10px;padding-left:0px;" onclick="downloadIrrigation()" 
                    data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
      </div>

      <div class="custom-dropdown" >
                          <div id="TotalConsumptionWaterDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                             margin: 5% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalConsumptionWater" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalConsumptionWaterInfo"></p>
                          <p id="TotalConsumptionWaterInfo2"></p>
                          </div>
                  </div>


                   <div class="custom-dropdown" >
                          <div id="TotalDomesticDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 27%;    
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalDomestic" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalDomesticInfo"></p>
                          <p id="TotalDomesticInfo2"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="FlushingTotalDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 49%;    
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeFlushingTotal" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="FlushingTotalInfo"></p>
                          <p id="FlushingTotalInfo2"></p>
                          </div>
                  </div>


                       <div class="custom-dropdown" >
                          <div id="TotalIrrigationDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                              width: 26%;
                               margin: 38% 25px 25px 7%;   
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalIrrigation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalIrrigationInfo"></p>
                          <p id="TotalIrrigationInfo2"></p>
                          </div>
                  </div>




                        <div class="col-md-12 row">
                            <div class="col-md-6 d-flex border-end row">
                                <div>
                                <span id="fitout" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Water Source Consumption</span>
                                    <a style="cursor: pointer;width:10px;float:right;" id="refreshIconElement_waterSource" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                <a style="cursor: pointer; float:right;" onclick="downloadWaterConsumPie()" data-toggle="popover" title="Download Underlying Data">
                                <img height="15" width="15" src="assets/img/download.png"/></a>
                                </div>

                               
                                <center><br>
                                      <span class="fw-bold my-4" id="waterConsumPieNoData"></span>
                                </center>
                                <center><div style="background-color:#fff; class="card-body col-8 mt-4">
                                    <canvas id="water_consume_pieTop" style="display: block; box-sizing: border-box; height: 300px; width: 597.6px;"></canvas>
                                </div></center>
                                <span class="col-4 ml-2">
                                    <div>
                                        <p align="left" id="wsPie1"></p>
                                    </div>
                                </span>
                            </div>

                            <div class="col-md-6 d-flex row ">
                                <div>
                                <span id="domesticMonth" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Site Wise Domestic Water Consumption</span>
                                 <a style="cursor: pointer;width:10px;" id="refreshIconElement_domesticWater" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                <a style="cursor: pointer; float:right;" onclick="downloadWaterDomesticMonth()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                </div>

                                <center id="loaderWaterDomesticMonth" class="mt-4">
                                <div class="mt-4" role="status">
                                <span>
                                <img height="100" width="100" src="assets/img/loader.svg"/></span>
                            </div>
                            </center>
                                    
                                <center><br>
                                    <span class="fw-bold my-4" id="WaterDomesticMonthNoData"></span>
                                </center>

                                <center>
                                    <div style="background-color:#fff; class="card-body col-8 mt-4">
                                      <canvas id="WaterDomesticMonth" style="display: block; box-sizing: border-box; height: 300px; width: 597.6px;"></canvas>
                                    </div>
                                </center>
                            </div>
                        </div>

                      <div class="col-12">
                            <hr class="mb-4" />
                            <span class="fw-bold">Customer Wise Domestic Water Consumption</span> <br />
                            <center id="loaderCustomerWiseWater" class="mt-4"><br><br><br>
                            <div class="mt-4" role="status">
                            <span>
                            <img height="100" width="100" src="assets/img/loader.svg"/></span>
                            </div>
                            </center>

                            <center>
                        <div class="row">
                            <span  align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b></span>
                            <div class="parent col-md-3">
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;width:10px;" id="refreshIconElement_CustomerWise" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;" onclick="downloadWaterConsumBarSector()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                          <span class="fw-bold my-4"  id="CustomerWiseWaterNoData""><br><br><br>No Data Available</span></center>
                            <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                                <canvas id="CustomerWiseWater"></canvas>
                            </div></center>
                        </div>
                    </div> 

                        <div class="col-12">
                            <hr class="mb-4" />
                            <span class="fw-bold">Site Wise Water Consumption</span> <br />
                            <center id="loaderSiteWiseWater" class="mt-4"><br><br><br>
                            <div class="mt-4" role="status">
                            <span>
                            <img height="100" width="100" src="assets/img/loader.svg"/></span>
                            </div>
                            </center>

                            <center>
                        <div class="row">
                            <span  align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b></span>
                            <div class="parent col-md-3">
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;width:10px;" id="refreshIconElement_SiteWise" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;" onclick="downloadWaterConsumBar()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                          <span class="fw-bold my-4"  id="SiteWiseWaterNoData""><br><br><br>No Data Available</span></center>
                            <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                                <canvas id="SiteWiseWater"></canvas>
                            </div></center>
                        </div>
                    </div> 
                   

                    <div class="col-12">
                    <hr class="mb-4" />
                    <span class="fw-bold">Month Wise Water Consumption</span> <br />

                    <center>
                <div class="row">
                <span  align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b></span>
                <div class="parent col-md-3">
                 <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;width:10px;" id="refreshIconElement_MonthWise" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        </div>
                 <div class="col-sm-1 child mx-2">
                 <a style="cursor: pointer;" onclick="downloadWaterConsumBar()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
               <span class="fw-bold my-4"  id="waterConsumNoData""><br><br><br></span></center>
                <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                    <canvas id="water_consumption_top"></canvas>
                </div></center>
                </div>
            </div> 


            <div class="col-12">
            <hr class="mb-4" />
            <span class="fw-bold">Site Wise STP Efficiency</span> <br />
            <center id="loaderMonthWiseSTP" class="mt-4"><br><br><br>
            <div class="mt-4" role="status">
            <span>
            <img height="100" width="100" src="assets/img/loader.svg"/></span>
        </div>
            </center>

            <center>
        <div class="row">
        <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
        <div class="parent col-md-2">
         <div class="col-sm-1 child mx-2">
         <a style="cursor: pointer;" onclick="downloadMonthWiseSTP()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
       <span class="fw-bold my-4"  id="MonthWiseSTPNoData""><br><br><br>No Data Available</span></center>
        <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
            <canvas id="MonthWiseSTP"></canvas>
        </div></center>
        </div>
    </div> 

    </div>
                </div>`,
};

let a120 = {
  id: "a120",
  x: a120_x,
  y: a120_y,
  w: a120_w,
  h: a120_h,
  content: `<div style="height: 100%; width: 100%;">
               <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Top 10 Checklist</b></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTop10ChecklistIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                          <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_Top10Checklist" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadChecklistTop()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="show()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                   <hr class="mt-0"/><br><br><br>
                    <center id="loaderTopChecklist" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=ChecklistTopNoData"></span></center>
                    <center><div class="m-4"  style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="ChecklistTop"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="Top10ChecklistDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTop10Checklist" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="Top10ChecklistInfo"></p>
                    <p style="margin-bottom:0px;" id="Top10ChecklistInfo2"></p>
                    </div>
                  </div>
                </div>`,


};



let a121 = {
  id: "a121",
  x: a121_x,
  y: a121_y,
  w: a121_w,
  h: a121_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="orange-shade"  style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                        <span style="text-align:left" padding-right:70px;"><span id="cardLTIRTop" class="count">0</span><br/>
                        <span class="text">LTIR Top Management</span></span>
                        <div id="loader_a121" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <a style="cursor: pointer;" id="infoLTIRIconTop"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer; " id="refreshIconElement_totalAmount" onclick="Refresh_a121()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadLTIRTop()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                    </div>
                    <div class="custom-dropdown" style="padding:0px;" >
                    <div id="LTIRDivTop" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeLTIRTop" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="LTIRInfoTop"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfoTop2"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfoTop3"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfoTop4"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfoTop5"></p>
                    </div>
                  </div>
                </div>`,
};


let a122 = {
  id: "a122",
  x: a122_x,
  y: a122_y,
  w: a122_w,
  h: a122_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="text-align:left" padding-right:70px; "><span id="cardZeroIncidentDaysTop" class="count">0</span><br/>
                  <span class="text">Zero Incident Days Top Management</span></span>
                  <div id="loader_a122" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a style="cursor: pointer;"  onclick="Refresh_a122()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                  <a style="cursor: pointer;" id="infoIncidentZeroIconTop"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadZeroIncidentDaysTop()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="fa fa-download"></i></a1>
               </div>
               <div class="custom-dropdown" style="padding:0px;" >
                    <div id="IncidentZeroDivTop" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentZeroTop" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfoTop"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfoTop2"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfoTop3"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfoTop4"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfoTop5"></p>
                    </div>
                  </div>
</div>`,
};



let a123 = {
  id: "a123",
  x: a123_x,
  y: a123_y,
  w: a123_w,
  h: a123_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="pink-shade"  style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                        <span style="text-align:left"><span id="cardIncidentPerSqFtTop" class="count">0</span><br/>
                        <span class="text">Incident Per Million Sq Ft Per Annum Top Management</span></span>
                        <div id="loader_a123" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                           <a style="cursor: pointer; margin-right:2%;" id="refreshIconElement_totalAmount" onclick="Refresh_a123()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer; margin-right:10px;" id="infoIncidentSqIconTop"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadIncidentPerSqFtTop()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                    </div>
                    <div class="custom-dropdown"  style="padding:0px;" >
                    <div id="IncidentSqDivTop" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentSqTop" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="IncidentSqInfoTop"></p>
                    <p style="margin-bottom:0px;" id="IncidentSqInfoTop2"></p>
                    <p style="margin-bottom:0px;" id="IncidentSqInfoTop3"></p>
                    <p style="margin-bottom:0px;" id="IncidentSqInfoTop4"></p>
                    <p style="margin-bottom:0px;" id="IncidentSqInfoTop5"></p>
                    </div>
                  </div>
                </div>`,
};



let a124 = {
  id: "a124",
  x: a124_x,
  y: a124_y,
  w: a124_w,
  h: a124_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="pink-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                        <span style="text-align:left"><span id="cardIncidentNearMissGoodCatchTop" class="count">0</span><br/>
                        <span class="text">Incident Near Miss / Good Catch Per Million Sq Ft Per Annum Top Management</span></span>
                         <div id="loader_a124" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                          <a style="cursor: pointer; margin-right:2%;"  onclick="Refresh_a124()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer; margin-right:10px;" id="infoIncidentGoodIconTop"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadIncidentNearMissGoodCatchTop()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                    </div>

                    <div class="custom-dropdown"  style="padding:0px;"  >
                    <div id="incidentGoodDivTop" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentGoodTop" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="incidentGoodInfoTop"></p>
                    <p style="margin-bottom:0px;" id="incidentGoodInfoTop2"></p>
                    <p style="margin-bottom:0px;" id="incidentGoodInfoTop3"></p>
                    <p style="margin-bottom:0px;" id="incidentGoodInfoTop4"></p>
                    <p style="margin-bottom:0px;" id="incidentGoodInfoTop5"></p>
                    </div>
                  </div>
                </div>`,
};



let a125 = {
  id: "a125",
  x: a125_x,
  y: a125_y,
  w: a125_w,
  h: a125_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Incidents Top Management</span>
                        <div class="parent col-md-4">
                          <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoIncidentsIconTop"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementIncidentsTop" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadIncidentTop()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showIncidents()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <center id="loaderIncidentTop" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="incidentNoDataTop"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                        <canvas id="incident-dountTop"></canvas>
                    </div></center>

                          <div class="custom-dropdown" >
      <div id="IncidentsDivTop" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeIncidentsTop" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="IncidentsInfoTop"></p>
      <p id="IncidentsInfoTop2"></p>
      </div>
    </div>
                </div>`,

};


let a126 = {
  id: "a126",
  x: a126_x,
  y: a126_y,
  w: a126_w,
  h: a126_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Level Wise Incidents Top Management</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementLevelWiseIncidentsTop" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoLevelWiseIncidentsIconTop"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadPyramidTop()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                           
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showPyramid()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <center id="loaderPyramidTop" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="chartPyramidNoDataTop"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                      <canvas id="chartPyramidTop"></canvas>
                    </div>

                    </center>

                    <div class="custom-dropdown" >
                    <div id="LevelWiseIncidentsDivTop" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: auto;
                    margin: 40px;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeLevelWiseIncidentsTop" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p id="LevelWiseIncidentsInfoTop"></p>
                    <p id="LevelWiseIncidentsInfoTop2"></p>
                    </div>
                  </div>
                </div>
            
         `,
};


let a127 = {
  id: "a127",
  x: a127_x,
  y: a127_y,
  w: a127_w,
  h: a127_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Incident Summary Top Management</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoIncidentSummaryIconTop"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementIncidentSummaryTop" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadIncidentSummaryTop()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showRAC()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container overflow-hidden h-auto p-0" style="width: 100%;">
                        <center> <table id="tblIncidentSummaryinfoTop" style="width: 100%;margin-right:20px;  overflow-y:scroll" class="table table-bordered mx-4">
                                <thead>
                                    <th>Sr. No.</th>
                                    <th>Name of the site</th>
                                    <th>Location</th>
                                    <th>Incident date</th>
                                    <th>Time of incidence</th>
                                    <th>Incident Category</th>
                                    <th>Incident Brief</th>
                                    <th>Loss/Damage Evalution</th>
                                    <th>RCA</th>
                                    <th>Level</th>
                                    <th>Primary RCA Category</th>
                                    <th>Corrective Actions</th>
                                    <th>Preventive Actions</th>
                                    <th>Incident Status</th>
                                    <th>Action Owner</th>
                                    <th>Reason for pending</th>
                                </thead>
                                <tbody id="tablebodyIncidentSummaryTop">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderIncidentSummaryTop" class="mt-4"><br><br><br>
                           <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="IncidentSummaryNoDataTop"><br><br><br>No Data Available</span></center>
                    </div>
                     <div class="custom-dropdown" >
      <div id="IncidentSummaryDivTop" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeIncidentSummaryTop" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="IncidentSummaryInfoTop"></p>
      <p id="IncidentSummaryInfoTop2"></p>
      </div>
    </div>
                </div>`,
};




let a128 = {
  id: "a128",
  x: a128_x,
  y: a128_y,
  w: a128_w,
  h: a128_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Top 5  Category-wise Incidents Top Management</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTop5CategorywiseIconTop"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementTopCategorywiseTop" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadCategoryWiseIncidentsTop()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCategoryWiseIncidents()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>

                    <center id="loaderIncidentCategoryTop" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="incidentCategoryNoDataTop"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                        <canvas id="incident-category-pieTop"></canvas>
                    </div></center>

                          <div class="custom-dropdown" >
      <div id="Top5CategorywiseDivTop" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeTop5CategorywiseTop" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="Top5CategorywiseInfoTop"></p>
      <p id="Top5CategorywiseInfoTop2"></p>
      </div>
    </div>
                </div>`,

};


let a129 = {
  id: "a129",
  x: a129_x,
  y: a129_y,
  w: a129_w,
  h: a129_h,
  content: `<div style="height: 100%; width: 100%;">
                    
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>EV Consumption Top Management</b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElement_EVConsumption" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                          <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoEVConsumptionGraphIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadEVConsumptionGraph()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="show()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                    <hr class="mt-0" />
                    <center id="loaderEVConsumption" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>

                
                    </center>
                    <center><span class="fw-bold my-4" id="EVConsumptionNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="EVConsumptionGraph"></canvas>
                    </div></center>

                    <div class="custom-dropdown" id="custom-dropdown">
                          <div id="dataDropdown_EVConsumption" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin: 9% 70px 61px;">
                          <span><img height="15" width="15"  id="closeDropdown" src="assets/img/xmark-solid.svg"/></span>
                            <span class="dropdown-item" id="listItemLabelmonthpower">EV Consumption: </span>
                            <a  style="cursor:pointer;"class="dropdown-item" id="month-wise">Month Wise </a>
                       
                   </div>
                 
               </div>
                    <div class="custom-dropdown" >
                    <div id="EVConsumptionGraphDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeEVConsumptionGraph" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="EVConsumptionGraphInfo"></p>
                    <p style="margin-bottom:0px;" id="EVConsumptionGraphInfo2"></p>
                    </div>
                  </div>
                </div>`,
};

// ChecklistTop,ChecklistTopNoData,loaderTopChecklist

let a18 = {
  id: "a18",
  x: a18_x,
  y: a18_y,
  w: a18_w,
  h: a18_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="dt2" align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b>Unit Category-wise Tickets</b>  &nbsp; <span id="firstDrillDownUnitCategory" style="display:none;">  </span>   <span id="secondDrilldownUnitCategory" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                              <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoUnitCategorywiseIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_category" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadCategoryWiseTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCategoryWiseTickets()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>

                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_category" class=" dropdown-menu common-popup" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelCategory">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                 </div>
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>

                 <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Proactive/Reactive">Proactive/Reactive</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                 
             </div>
             </div>
                    <center id="loaderCategoryTicketChart" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="categoryTicketNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="catagory-ticket"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="UnitCategorywiseDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeUnitCategorywise" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="UnitCategorywiseInfo"></p>
                    </div>
                  </div>
                </div>`,
  // <span id="dt2" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Unit Category-wise Tickets</span>
};

// infoUnitCategorywiseIcon,UnitCategorywiseDiv,closeUnitCategorywise,UnitCategorywiseInfo

let a19 = {
  id: "a19",
  x: a19_x,
  y: a19_y,
  w: a19_w,
  h: a19_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b>Unit Category-wise Proactive Tickets</b>  &nbsp; <span id="firstDrillDownUnitCategoryProactive" style="display:none;">  </span>   <span id="secondDrilldownUnitCategoryProactive" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoUnitCategorywiseProactiveIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_proactive" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadCategoryWiseProactiveTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCategoryWiseProactiveTickets()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_proactive" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelProactive">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                    </div>
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
      
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Proactive/Reactive">Proactive/Reactive</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                 
             </div>
             </div>
                    <center id="loaderCategoryProactiveTicketChart" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="categoryProactiveTicketNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="proactive-ticket"></canvas>
                    </div></center>

                     <div class="custom-dropdown" >
                    <div id="UnitCategorywiseProactiveDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeUnitCategorywiseProactive" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="UnitCategorywiseProactiveInfo"></p>
                    </div>
                  </div>
                </div>`,
};

// infoUnitCategorywiseProactiveIcon,UnitCategorywiseProactiveDiv,closeUnitCategorywiseProactive,UnitCategorywiseProactiveInfo

let a39 = {
  id: "a39",
  x: a39_x,
  y: a39_y,
  w: a39_w,
  h: a39_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="dt2_ca"  align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b>Common Area Category-wise Tickets</b>  &nbsp; <span id="firstDrillDownCommon" style="display:none;">  </span>   <span id="secondDrilldownCommon" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCommonAreaCategoryIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_common" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadCACategoryWiseTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCACategoryWiseTickets()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_common" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelCommon">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                       </div> 
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
      
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                 
             </div>
             </div>
                    <center id="loaderCACategoryTicketChart" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="categoryCATicketNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="catagory-ticket-ca"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="CommonAreaCategoryDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCommonAreaCategory" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CommonAreaCategoryInfo"></p>
                    </div>
                  </div>
                </div>`,
};

// infoCommonAreaCategoryIcon,CommonAreaCategoryDiv,closeCommonAreaCategory,CommonAreaCategoryInfo

let a40 = {
  id: "a40",
  x: a40_x,
  y: a40_y,
  w: a40_w,
  h: a40_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="dt3_ca"  align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b>Common Area Category-wise Proactive Tickets</b>  &nbsp; <span id="firstDrillDownCommonProactive" style="display:none;">  </span>   <span id="secondDrilldownCommonProactive" style="display:none;"> - </span></span>
                        <div class="parent col-md-4">
                          <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCommonAreaCategoryProactiveIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_commonproactive" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadCACategoryWiseProactiveTickets()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCACategoryWiseProactiveTickets()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>

                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_commonproactive" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelCommonProactive">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                          </div> 
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
   
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Proactive">Proactive</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                 
             </div>
             </div>
                    <center id="loaderCACategoryProactiveTicketChart" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="categoryCAProactiveTicketNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="proactive-ticket-ca"></canvas>
                    </div></center>


                     <div class="custom-dropdown" >
                    <div id="CommonAreaCategoryProactiveDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCommonAreaCategoryProactive" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CommonAreaCategoryProactiveInfo"></p>
                    </div>
                  </div>
                </div>`,
};

// infoCommonAreaCategoryProactiveIcon ,CommonAreaCategoryProactiveDiv,closeCommonAreaCategoryProactive,CommonAreaCategoryProactiveInfo

let a20 = {
  id: "a20",
  x: a20_x,
  y: a20_y,
  w: a20_w,
  h: a20_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span  align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b> Tickets Ageing Matrix</span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTicketsAgeingMatrixIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_TicketsAgeingMatrix" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadTicketsAgeingMatrix()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showTicketsAgeingMatrix()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container overflow-hidden h-auto p-0" id="tbl1info">
                        <table style="width: 100%;">
                            <thead>
                                <tr>
                                    <th rowspan="2">Priority</th>
                                    <th colspan="5">No. Of Days</th>
                                </tr>
                                <tr>
                                    <th>0-10</th>
                                    <th>11-20</th>
                                    <th>21-30</th>
                                    <th>31-40</th>
                                    <th>40+</th>
                                </tr>
                            </thead>
                            <tbody id="tablebodyTicketAgeing">

                            </tbody>
                        </table>
                    </div>
                    <center id="loaderAgeingMatrix" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="ageingMatrixNoData"><br><br><br>No Data Available</span></center>
                    <div class="go-shadow mx-0 my-auto text-center green-count " style="margin-top: 15px !important;">
                        <span id="daysTicketAgeing" class="fw-bold fs-3">0</span><span class="fs-6 fw-normal">
                            days</span>
                        <br>
                        Average Time Taken To Resolve A Ticket
                    </div>
                      <div class="custom-dropdown" >
                    <div id="TicketsAgeingMatrixDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTicketsAgeingMatrix" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TicketsAgeingMatrixInfo"></p>
                    </div>
                  </div>
                </div>`,
};

// infoTicketsAgeingMatrixIcon,TicketsAgeingMatrixDiv,closeTicketsAgeingMatrix,TicketsAgeingMatrixInfo

let a21 = {
  id: "a21",
  x: a21_x,
  y: a21_y,
  w: a21_w,
  h: a21_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span  align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Resolution TAT  &nbsp; <span id="firstDrillDownResolution" style="display:none;">  </span>   <span id="secondDrilldownResolution" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoResolutionTATIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_resolutionTAT" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadResolutionTAT()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showResolutionTAT()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <div class="custom-dropdown" id="custom-dropdown">
                      <div id="dataDropdown_resolutionTAT" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                      <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelresolutionTAT">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div>
                        <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
   
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Proactive/Reactive">Proactive/Reactive</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                  
                      </div>
           
                    </div>
                    <span class="d-flex justify-content-between py-1 mx-2" id="ri1">
                        <span style="margin:30px;"> Achieved <br>&emsp; <span
                                style="color:#01C875;" id="tatResolutionAchieved"></span> </span>
                        <span style="margin:30px;">Breached <br>&emsp; <span
                                style="color:#FDAB3D ;" id="tatResolutionBreached"></span> </span>
                    </span>
                    <center id="loaderTATResolution" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="tatResolutionNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="background-color:#fff; class="card-body">
                        <canvas id="resolution-b1"></canvas>
                    </div></center>
                    <div class="custom-dropdown" >
      <div id="ResolutionTATDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeResolutionTAT" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ResolutionTATInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoResolutionTATIcon,ResolutionTATDiv,closeResolutionTAT,ResolutionTATInfo

let a22 = {
  id: "a22",
  x: a22_x,
  y: a22_y,
  w: a22_w,
  h: a22_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span  align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Response TAT &nbsp; <span id="firstDrillDownResponse" style="display:none;">  </span>   <span id="secondDrilldownResoponse" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoResponseTATIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_responseTAT" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadResponseTAT()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showResponseTAT()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_responseTAT" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                      <span class="dropdown-item" id="listItemLabelresponseTAT">Ticket: </span>
                      <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                      </div> 
                      <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
            
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Status">Status</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Proactive/Reactive">Proactive/Reactive</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Priority">Priority</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                      <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                 
             </div>
           
         </div>
                    <span class="d-flex justify-content-between py-1 mx-2" id="ri2">
                        <span style="margin:30px;">Achieved <br>&emsp; <span
                                style="color:#01C875;" id="tatResponseAchieved"></span> </span>
                        <span style="margin:30px;"> Breached <br>&emsp; <span
                                style="color:#FDAB3D;" id="tatResponseBreached"></span> </span>
                    </span>
                    <center id="loaderTATResponse" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="tatResponseNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="background-color:#fff; class="card-body">
                        <canvas id="response-b1"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
      <div id="ResponseTATDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeResponseTAT" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ResponseTATInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoResponseTATIcon,ResponseTATDiv,closeResponseTAT,ResponseTATInfo

let a23 = {
  id: "a23",
  x: a23_x,
  y: a23_y,
  w: a23_w,
  h: a23_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Visitors</span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoVisitorsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_Visitors" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadVisitors()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showVisitors()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0 mb-0" /><br>
                    <div class="row text-center m-2" id="spaceoccupancydata">
                        <div class="col-lg-4 col-md-2 col-sm-12">
                            <span id="visTotalVisitors" class="fs-3 fw-bold text-violet">0</span><br>Total Visitors
                        </div>
                        <div class="col-lg-4 col-md-2 col-sm-12 border-start border-end">
                            <span id="visExpectedVisitors" class="fs-3 fw-bold text-darkorange ">0</span><br>Expected
                            Visitors
                        </div>
                        <div class="col-lg-4 col-md-2 col-sm-12">
                            <span id="visUnExpectedVisitors" class="fs-3 fw-bold text-sandel">0</span><br>Unexpected
                            Visitors
                        </div>
                        <div class="col-lg-4 col-md-2 col-sm-12 border-top border-end">
                            <span id="visTotalStaff"class="fs-3 fw-bold text-sandel">0</span><br>Total Staff
                        </div>
                        <div class="col-lg-4 col-md-3 col-sm-12 border-end border-top">
                            <span id="visStaffIn"  class="fs-3 fw-bold text-sandel">0</span><br>Staff In
                        </div>
                        <div class="col-lg-4 col-md-3 col-sm-12  border-top">
                            <span id="visStaffOut"  class="fs-3 fw-bold text-sandel">0</span><br>Staff Out
                        </div>

                    </div>
                    <div class="go-shadow mx-0 my-auto text-center green-count" style="margin-top: 15px !important;width: 602px">
                        <span id="visTotalVehicles" class="fw-bold fs-3">0</span>
                        <br>Total Vehicles
                    </div>

                    <div id="VisitorsDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeVisitors" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="VisitorsInfo"></p>
      <p id="VisitorsInfo2"></p>
      <p id="VisitorsInfo3"></p>
      <p id="VisitorsInfo4"></p>
      </div>
    </div>

                </div>`,
};

// infoVisitorsIcon,VisitorsDiv,closeVisitors,VisitorsInfo

let a50 = {
  id: "a50",
  x: a50_x,
  y: a50_y,
  w: a50_w,
  h: a50_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="green-shade"> 
                        <span style="text-align:left;padding-right:90px;"><span id="visExpectedVisitors" class="count">0</span><br/>
                        <span class="text">Expected Visitors</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <a1 style="cursor: pointer;" onclick="downloadExpectedVisitors()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a51 = {
  id: "a51",
  x: a51_x,
  y: a51_y,
  w: a51_w,
  h: a51_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="pink-shade"> 
                        <span style="text-align:left;padding-right:50px;"><span id="visUnExpectedVisitors" class="count">0</span><br/>
                        <span class="text">UnExpected Visitors</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                         <a1 style="cursor: pointer;" onclick="downloadUnExpectedVisitors()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a55 = {
  id: "a55",
  x: a55_x,
  y: a55_y,
  w: a55_w,
  h: a55_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="green-shade"> 
                        <span style="text-align:left;padding-right:90px;"><span id="visTotalVehicles" class="count">0</span><br/>
                        <span class="text">Total Vehicles</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                         <a1 style="cursor: pointer;" onclick="downloadTotalVehicles()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a56 = {
  id: "a56",
  x: a56_x,
  y: a56_y,
  w: a56_w,
  h: a56_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="pink-shade"> 
                        <span style="text-align:left;padding-right:100px;"><span id="visTotalStaff" class="count">0</span><br/>
                        <span class="text">Total Staff</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                         <a1 style="cursor: pointer;" onclick="downloadTotalStaff()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a57 = {
  id: "a57",
  x: a57_x,
  y: a57_y,
  w: a57_w,
  h: a57_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="yellow-shade"> 
                        <span style="text-align:left;padding-right:120px;"><span id="visStaffIn" class="count">0</span><br/>
                        <span class="text">Staff In</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                         <a1 style="cursor: pointer;" onclick="downloadStaffIn()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a58 = {
  id: "a58",
  x: a58_x,
  y: a58_y,
  w: a58_w,
  h: a58_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="red-shade"> 
                        <span style="text-align:left;padding-right:120px;"><span id="visStaffOut" class="count">0</span><br/>
                        <span class="text">Staff Out</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                         <a1 style="cursor: pointer;" onclick="downloadStaffOut()" data-toggle="popover"  title="Download Underlying Data" >
                        <i class="bi bi-download"></i></a1>
                    </div>
                </div>`,
};

let a59 = {
  id: "a59",
  x: a59_x,
  y: a59_y,
  w: a59_w,
  h: a59_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visGoodsInwards" class="count">0</span><br/>
                    <span class=" text">Goods Inwards</span>
                  </span>
                  <div id="loader_a59" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadGoodsInwards()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a59()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

// Refresh_a59
function Refresh_a59() {
  let visGoodsInwards = document.getElementById("visGoodsInwards");
  let loader = document.getElementById("loader_a59");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visGoodsInwards.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getGoodsInwards + idLink, true);

    if (globalType == "daily") {
      xhr_object.open("GET", getGoodsInwards + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getGoodsInwards + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      resfunGoodsInwards = JSON.parse(this.responseText);
      console.log("GoodsInwards - ");
      console.log(resfunGoodsInwards);

      if (resfunGoodsInwards.response) {
        visGoodsInwards.innerHTML = resfunGoodsInwards.response + "";
      } else {
        visGoodsInwards.innerHTML = "No data available"; // Show "No data available" message if no data or API can't be recalled
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a60 = {
  id: "a60",
  x: a60_x,
  y: a60_y,
  w: a60_w,
  h: a60_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visOutwards" class="count">0</span><br/>
                    <span class=" text">Goods Outwards</span>
                  </span>
                  <div id="loader_a60" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <div id="fetcher_a60" class="mt-4 fetcher-icon" role="status" style="display: none;">
                          <span>
                              <img height="65" width="65" src="assets/img/fetcher.svg"/>
                          </span>
                      </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadOutwards()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a60()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};


function Refresh_a60() {
  let visOutwards = document.getElementById("visOutwards");
  let loader = document.getElementById("loader_a60");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visOutwards.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open("GET", getOutwards + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getOutwards + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond, true);
    }

    xhr_object.onload = function () {
      resfunOutwards = JSON.parse(this.responseText);
      console.log("Outwards - ");
      console.log(resfunOutwards);

      if (resfunOutwards && resfunOutwards.response) {
        visOutwards.innerHTML = resfunOutwards.response + "";
      } else {
        visOutwards.innerHTML = "No data available"; // Show "No data available" message if no data or API can't be recalled
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}
// showTotalVisitors(),loaderTotalVisitors,totalVisitorsNoData,total-visitors

let a47 = {
  id: "a47",
  x: a47_x,
  y: a47_y,
  w: a47_w,
  h: a47_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span id="dt2_tv" align="left" style="color:#5e2750;width:1000px" class="fw-bold col-md-11 mt-1">Total Visitors </span>
                             <a style="cursor: pointer;padding-right:40px;width:10px" onclick="downloadVisitors()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>     
                            <img class="col-md-1 my-2" height="15" width="15" onclick="showTotalVisitors()" src="assets/img/xmark-solid.svg" />
                        </div>
                    </div>
                    <hr class="mt-0" /><br>
                    <select class="border-1 d-flex dashboard-cal my-0 mx-2" style="margin-left: 5px;" id="drop" name="drop"  >
                        
                    </select>
                    <center id="loaderTotalVisitors" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="totalVisitorsNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="total-visitors"></canvas>
                    </div></center>
                </div>`,
};

let a48 = {
  id: "a48",
  x: a48_x,
  y: a48_y,
  w: a48_w,
  h: a48_h,
  content: `<div style="height: 100%; width: 100%;">

                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="dt1" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Goods In</b>  &nbsp; <span id="firstDrillDownGoodsIn" style="display:none;">  </span>   <span id="secondDrilldownGoodsIn" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoGoodsInIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_goodsIn" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadGoodsInwards()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showGoodsIn()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>

                    <hr class="mt-0" /><br>
                      <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_goodsIn" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                        <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelGoodsIn">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div> 
                        <a  style="cursor:pointer;"class="dropdown-item" id="item">Item </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="mode_of_transport" >Mode of transport </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="type" >Type </a>


                        </div>
                      </div>
                    
                    <center id="loaderGoodsIn" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id=goodsInNoData"></span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="goods_in"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
      <div id="GoodsInDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeGoodsIn" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="GoodsInInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoGoodsInIcon,GoodsInDiv,closeGoodsIn,GoodsInInfo

let a49 = {
  id: "a49",
  x: a49_x,
  y: a49_y,
  w: a49_w,
  h: a49_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="dt1" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Goods Out</b>  &nbsp; <span id="firstDrillDownGoodsOut" style="display:none;">  </span>   <span id="secondDrilldownGoodsOut" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoGoodsOutIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_goodsOut" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadOutwards()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showGoodsOut()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>

                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_goodsOut" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                        <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelGoodsOut">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div> 
                        <a  style="cursor:pointer;"class="dropdown-item" id="item">Item </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="mode_of_transport" >Mode of transport </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="type" >Type </a>


                        </div>
                      </div>
                    <center id="loaderGoodsOut" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="goodsOutNoData">No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="goods_out"></canvas>
                    </div></center>
                    <div class="custom-dropdown" >
      <div id="GoodsOutDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeGoodsOut" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="GoodsOutInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoGoodsOutIcon,GoodsOutDiv,closeGoodsOut,GoodsOutInfo

let a25 = {
  id: "a25",
  x: a25_x,
  y: a25_y,
  w: a25_w,
  h: a25_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="background-color:#fff;" class="card-header row">
      <div class="row">
          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Power Consumption</span>
          <img class="col-md-1 my-2" height="15" width="15" onclick="showPowerConsumption()" src="assets/img/xmark-solid.svg" />
                      
          </div>
  </div>
  <hr class="mt-0" /><br>
   <div class="row">
      <div class="col-lg-6 col-md-6 col-sm-12 ">
          <div class=" d-flex flex-wrap power-counts justify-content-center">
              <div class="text-center go-shadow m-2 total-consumption"><span id="pcTotalHtMeter" class="fs-3 fw-bold">0 kwh</span><br><span>Total Consumption (Mains)</span>
              <div id="loader_TotalConsumptionMains" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;"  onclick="Refresh_TotalConsumptionMains()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              <a style="cursor: pointer;" id="infoTotalConsumptionMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                            <a style="cursor: pointer; float:right; width:10px" onclick="downloadTotalConsumption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

              <div class="text-center go-shadow m-2 total-transform"><span id="pcTotalTransformer" class="fs-3 fw-bold">0 kwh</span><br><span>Solar Total</span>
               <div id="loader_TotalRenewableMains" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_TotalRenewableMains()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                               <a style="cursor: pointer;" id="infoTotalRenewableMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                      <a style="cursor: pointer; float:right;width:10px" onclick="downloadTransformaerTotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

              <div class="text-center go-shadow m-2 total-dg"><span id="pcTotalDg" class="fs-3 fw-bold">0kwh</span><br><span>DG Total</span>
               <div id="loader_DGTotalMains" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_DGTotalMains()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                               <a style="cursor: pointer;" id="infoTotalDGMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                      <a style="cursor: pointer; float:right; width:10px" onclick="downloadDgtotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

              <div class="text-center go-shadow m-2 tatal-diesel-consume"><span id="pcTotalDieselConsumed"class="fs-3 fw-bold">0 liter</span><br><span>Total Diesel Consumed</span>
              <div id="loader_TotalDiesel" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                             <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_TotalDiesel()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                               <a style="cursor: pointer;" id="infoTotalDieselIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                      <a style="cursor: pointer; float:right;width:10px" onclick="downloadTotalDieselConsumed()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
          </div>
      </div>
      <div class="col-lg-6 col-md-6 col-sm-12 row">
          <div class="col-6">
              <div class=" text-center go-shadow m-2 cumulative-area w-100">
                  <span id="pcTotalDieselConsumedPie" class="fs-3 fw-bold">0 liters</span><br><span>Cumulative Power Consumed</span>
                      
              </div>
              <div align="left" class="m-3">
                  <span class="fw-bold">Sub Meter Sources</span> <br />
                  <span id="psPie1"></span>
                  <span id="psPie2"></span>
                  <span id="psPie3"></span>
                  <span id="psPie4"></span>
                  <span id="psPie5"></span>
              </div>
          </div>
          <div class="col-6">
              <center id="loaderPowerConsumPie" class="mt-4">
              <div class="mt-4" role="status">
              <span>
              <img height="100" width="100" src="assets/img/loader.svg"/></span>
          </div>
              </center>
              <center><a style="cursor: pointer;padding-left:120px;width:10px" onclick="downloadDConsumPie()" 
                    data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                     <a style="cursor: pointer;margin-left: 10%;" id="infoRenewableSourcesMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer;width:10px;"  id="Refresh_RenewableSourcesMains" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
              <span class="fw-bold my-4" id="powerConsumPieNoData">No Data Available</span></center>
              <center><div style="background-color:#fff; class="card-body">
                  <canvas id="power-consume-pie"></canvas>
              </div></center>
          </div>
      </div>

      <div class="col-12 mt-2">
          <hr class="mb-4" />
          <span class="fw-bold">Power Consumption - Time Series</span> <br />
            <center id="loaderPowerConsum" class="mt-4"><br><br><br>
            <div class="mt-4" role="status">
            <span>
            <img height="100" width="100" src="assets/img/loader.svg"/></span>
        </div>
            </center>
            <center>
            <div class="row">
            
                  <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
                <div class="parent col-md-2">
                  <div class="col-sm-1 child mx-2">
                                   <a style="cursor: pointer;" id="infoPowerConsumptionSeriesIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                   </div>
                <div class="col-sm-1 child mx-2">
          <a style="cursor: pointer;" id="refreshIconElement_power" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
         </div>

                <div class="col-sm-1 child mx-2">
                  <a style="cursor: pointer;" onclick="downloadPowerConsum()"  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                 <span class="fw-bold my-4" id="powerConsumNoData"><br><br><br>No Data Available</span>
            </center>
       
            <center> 
              <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                <canvas id="power-consumption"></canvas>
              </div>
            </center>
            <div class="custom-dropdown" id="custom-dropdown">
            <div id="dataDropdown_power" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:37%">
            <div style="display:flex;">
              <span class="dropdown-item" id="listItemLabelpower">Power Consumption: </span>
              <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
              </div> 
              <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>
         
      </div>
   
</div>


      </div> 
      

        
      
      </div> 


    </div>

    <div class="custom-dropdown" >
                          <div id="TotalConsumptionMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                             margin: 5% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalConsumptionMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalConsumptionMainsInfo"></p>

                          </div>
                  </div>

                                     <div class="custom-dropdown" >
                          <div id="TotalRenewableMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 23%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalRenewableMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalRenewableMainsInfo"></p>
                          </div>
                  </div>

                  <div class="custom-dropdown" >
                          <div id="TotalDGMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 16% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalDGMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalDGMainsInfo"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="TotalDieselDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 16% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalDiesel" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalDieselInfo"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="RenewableSourcesMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 41%;
                          margin: 12% 25px 25px 54%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeRenewableSourcesMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="RenewableSourcesMainsInfo"></p>
                          </div>
                  </div>


                   <div class="custom-dropdown" >
                          <div id="PowerConsumptionSeriesDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                              width: 54%;
                             margin: 47% 25px 25px 32%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closePowerConsumptionSeries" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="PowerConsumptionSeriesInfo"></p>
                          </div>
                  </div>



        
</div>`,
  // <center id="loaderPowerConsumAssetWiseTimeSeries" class="mt-4"><br><br><br>
  //                 <div class="mt-4 spinner-border" role="status">
  //                     <span class="sr-only"></span>
  //                 </div>
  //             </center>
  // <div class="col-12 mt-2">
  //   <hr class="mb-4" />
  //     <center>
  //       <div class="row">
  //         <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
  //       <div class="parent col-md-2">
  //       <div class="col-sm-1 child mx-2">
  //         <span class="fw-bold my-4" id="powerConsumAssetWiseTimeSeriesNoData"><br><br><br>No Data Available</span>
  //       </div>
  //       </div>
  //    </center>
  //     <center>
  //       <div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
  //         <canvas id="power-consumption-assetwise"></canvas>
  //       </div>
  //     </center>
  // </div>
};

let a26 = {
  id: "a26",
  x: a26_x,
  y: a26_y,
  w: a26_w,
  h: a26_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Water Consumption</span>
                            <img class="col-md-1 my-2" height="15" width="15" onclick="showWaterConsumption()" src="assets/img/xmark-solid.svg" />
                        </div>
                    </div>
                    <hr class="mt-0" /><br>
                    <div class="row">
                        <div class=" col-md-12 " style="margin-bottom:70px; display:flex;flex-wrap:wrap;">
                        <div style="width:47% " class="  text-center go-shadow m-3 total-consumption"><span id="wcTotalConsumption" class="fs-3 fw-bold">0
                                KL</span><br><span style="padding-left:40px">Total Consumption </span>
                                 <div id="loader_wcTotalConsumption" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 68%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalConsumption()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalConsumptionWaterMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer;width:10px" onclick="downloadwcTotalConsumption()" 
                                  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                        <div style="width:47%" class="text-center go-shadow m-3 total-transform"><span id="wcTotalDomestic" class="fs-3 fw-bold">0
                                KL</span><br><span style="padding-left:50px">Domestic Total</span>
                                <div id="loader_wcTotalDomestic" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 65%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalDomestic()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalDomesticMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer;padding-left:40px;width:10px" onclick="downloadDomesticTotal()" 
                                  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                        <div  style="width:31.5%" class="text-center go-shadow m-2 total-dg"><span id="wcFlushingTotal" class="fs-3 fw-bold">0
                                KL</span><br><span style="padding-left:50px">Flushing Total</span>
                                <div id="loader_wcFlushingTotal" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcFlushingTotal()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                   <a style="cursor: pointer;" id="infoFlushingTotalMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer;width:10px" onclick="downloadFlushingTotal()" 
                                  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                        <div style="width:31.5%" class="text-center go-shadow m-2 tatal-diesel-consume"><span id="wcTotalIrrigation" class="fs-3 fw-bold">0
                                KL</span><br><span style="padding-left:50px">Irrigation Total</span>
                                <div id="loader_wcTotalIrrigation" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalIrrigation()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalIrrigationMainsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer;padding-left:40px;width:10px" onclick="downloadIrrigation()" 
                                  data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                       <div style="width:31.5%" class="text-center go-shadow m-2 total-consumption"><span id="wcTotalSTP" class="fs-3 fw-bold">0
                                  KL</span><br><span style="padding-left:50px">STP Total</span>
                                  <div id="loader_wcTotalSTP" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                      </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_wcTotalSTP()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                    <a style="cursor: pointer;" id="infoTotalSTPIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                  <a style="cursor: pointer;width:10px" onclick="downloadwcTotalSTP()" 
                                    data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>          
                                  
                    </div>



                        <div class="col-md-12 row">
                            <div class="col-md-6 d-flex border-end row">
                                <center id="loaderWaterConsumPie" class="mt-4">
                                <div class="mt-4" role="status">
                                <span>
                                <img height="100" width="100" src="assets/img/loader.svg"/></span>
                            </div>
                                </center>
                                <br>
                                <div>
                                <span id="fitout" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Water Resources</span>
                                  <a style="cursor: pointer;margin-left:52%" id="infoWaterResourcesIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer; float:right;" onclick="downloadWaterConsumPie()" data-toggle="popover" title="Download Underlying Data">
                                <img height="15" width="15" src="assets/img/download.png"/></a>
                                </div>
                               
                                <center><br>
                                      <span class="fw-bold my-4" id="waterConsumPieNoData">No Data Available</span>
                                </center>
                                <center><div style="background-color:#fff; class="card-body col-8 mt-4">
                                    <canvas id="water-consume-pie" style="display: block; box-sizing: border-box; height: 300px; width: 597.6px;"></canvas>
                                </div></center>
                                <span class="col-4 ml-2">
                                    <div>
                                        <p align="left" id="wsPie1"></p>
                                    </div>
                                </span>
                            </div>

                            <div class="col-md-6 d-flex row ">
                                <center id="loaderWaterConsumLPCD" class="mt-4">
                                <div class="mt-4" role="status">
                                <span>
                                <img height="100" width="100" src="assets/img/loader.svg"/></span>
                            </div>
                                </center>
                                <div>
                                <span id="fitout" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>LPCD</span>
                                 <a style="cursor: pointer;margin-left:52%" id="infoLPCDIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a> 
                                <a style="cursor: pointer; float:right;" onclick="downloadWaterConsumLPCD()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                </div>
                                    
                                <center><br>
                                    <span class="fw-bold my-4" id="waterConsumLPCDNoData">No Data Available</span>
                                </center>

                                <center>
                                    <div style="background-color:#fff; class="card-body col-8 mt-4">
                                      <canvas id="water-consume-lpcd" style="display: block; box-sizing: border-box; height: 300px; width: 597.6px;"></canvas>
                                    </div>
                                </center>

                                <span class="col-4 ml-2">
                                    <div>
                                        <p align="left" id="wsLPCD"></p>
                                    </div>
                                </span>
                            </div>
                        </div>

                        <div class="col-12">
                            <hr class="mb-4" />
                            <span class="fw-bold">Water Consumption - Time Series</span> <br />
                            <center id="loaderWaterConsum" class="mt-4"><br><br><br>
                            <div class="mt-4" role="status">
                            <span>
                            <img height="100" width="100" src="assets/img/loader.svg"/></span>
                        </div>
                            </center>

                            <center>
                        <div class="row">
                        <span  align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></b></span>
                        <div class="parent col-md-2">
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_water" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                         <div class="col-sm-1 child mx-2">
                         <a style="cursor: pointer;" onclick="downloadWaterConsumBar()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                       <span class="fw-bold my-4"  id="waterConsumNoData""><br><br><br>No Data Available</span></center>
                        <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                            <canvas id="water-consumption"></canvas>
                        </div></center>
                        <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_water" class=" dropdown-menu" style="height:150px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px; margin-top:80%">
                        <div style="display:flex;">
                          <span class="dropdown-item" id="listItemLabelwater">Water Consumption: </span>
                          <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                          </div>
                          <a  style="cursor:pointer;"class="dropdown-item" id="Asset_Name">Asset Name </a>
                     
                 </div>
               
             </div>
                        </div>
                    </div>

                          <div class="custom-dropdown" >
                          <div id="TotalConsumptionWaterMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                             margin: 5% 25px 25px 2%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalConsumptionWaterMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalConsumptionWaterMainsInfo"></p>

                          </div>
                  </div>

                  <div class="custom-dropdown" >
                          <div id="TotalDomesticMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                             width: 30%;
                              margin: 20% 25px 25px 9%;  
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalDomesticMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalDomesticMainsInfo"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="FlushingTotalMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 49%;    
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeFlushingTotalMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="FlushingTotalMainsInfo"></p>
                          </div>
                  </div>

                  <div class="custom-dropdown" >
                          <div id="TotalIrrigationMainsDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                          width: 25%;
                          margin: 5% 25px 25px 73%;    
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalIrrigationMains" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalIrrigationMainsInfo"></p>
                          </div>
                  </div>


                  <div class="custom-dropdown" >
                          <div id="TotalSTPDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                           width: 25%;
                           margin: 30% 25px 25px 37%;   
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeTotalSTP" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="TotalSTPInfo"></p>
                          </div>
                  </div>

                   <div class="custom-dropdown" >
                          <div id="WaterResourcesDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                           width: 30%;
                           margin: 62% 25px 25px 8%; 
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeWaterResources" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="WaterResourcesInfo"></p>
                          </div>
                  </div>

                  <div class="custom-dropdown" >
                          <div id="LPCDDiv" class=" dropdown-menu" style="height: 160px;
                          overflow-y: scroll;
                          inset: 0px;
                          position: absolute;
                           width: 30%;
                           margin: 63% 25px 25px 58%;
                          display: none;
                          padding: 10px;">
                          <span > <img  id="closeLPCD" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                          <p id="LPCDInfo"></p>
                          </div>
                  </div>
                </div>`,
};

// infoLPCDIcon ,LPCDDiv ,closeLPCD,LPCDInfo

// infoWaterResourcesIcon,WaterResourcesDiv,closeWaterResources,WaterResourcesInfo

let a27 = {
  id: "a27",
  x: a27_x,
  y: a27_y,
  w: a27_w,
  h: a27_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Carbon Emission</span>
                            
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="d-flex text-center justify-content-around">
                        <p><span id="cEScope1" class="text-violet fw-bold fs-3">0</span><br> Scope 1</p>
                                                 <div id="loader_a27Emission1" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                           <a style="cursor: pointer;" id="refreshIconElement_totalAmount" onclick="Refresh_a27Emission1()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;margin-left: -13%;;width:10px" onclick="downloadCarbonEmissionScope1()" 
                                      data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>

                        <p><span id="cEScope2" class="text-darkorange fw-bold fs-3">0</span><br> Scope 2</p>
                        <div id="loader_a27Emission2" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                           <a style="cursor: pointer;" id="refreshIconElement_totalAmount" onclick="Refresh_a27Emission2()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;margin-left: -13%;width:10px" onclick="downloadCarbonEmissionScope2()" 
                                      data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                    </div>
                </div>`,
};

let a63 = {
  id: "a63",
  x: a63_x,
  y: a63_y,
  w: a63_w,
  h: a63_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">
                      <div class="row">
                            <span align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1">Energy Intensity</span>

                            <a class="col-md-1" style="cursor: pointer;" onclick="downloadEnergyIntensity()" 
                                      data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                                       <a class="col-md-1" style="cursor: pointer;" id="infoEnergyIntensityIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                        <a1 class="col-md-1" id="refreshButton" style="cursor: pointer;" onclick="Refresh_a63()" title="Refresh Content" >
                                          <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                            
                        </div>
                        <div id="loader_a63" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <hr class="mt-0" />
                        <span align="left" id='energyIntensity' style="color:#5e2750;" class="text-violet fw-bold fs-3 col-md-11 mt-1">0</span></div>

       <div class="custom-dropdown" >
      <div id="EnergyIntensityDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeEnergyIntensity" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="EnergyIntensityInfo"></p>
      <p id="EnergyIntensityInfo2"></p>
      <p id="EnergyIntensityInfo3"></p>
      <p id="EnergyIntensityInfo4"></p>
      </div>
    </div>
                   
                </div>`,
};


// infoEnergyIntensityIcon,EnergyIntensityDiv,closeEnergyIntensity,EnergyIntensityInfo


let a28 = {
  id: "a28",
  x: a28_x,
  y: a28_y,
  w: a28_w,
  h: a28_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row mb-4"><a style="cursor: pointer;padding-left:540px; width:10px" onclick="downloadFuelConsumption()" 
                        data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                    <div class="d-flex text-center justify-content-around">
                        <p><span id="fuelConsmVal" class="text-violet fw-bold fs-3">0</span><br>Fuel Consumption</p>
                    </div>
                </div>`,
};

let a29 = {
  id: "a29",
  x: a29_x,
  y: a29_y,
  w: a29_w,
  h: a29_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row mb-4"><a style="cursor: pointer;padding-left:400px;width:10px" onclick="downloadFitout()" 
                        data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                    <div class="d-flex text-center justify-content-around">
                        <p><span id="fitOutVal" class="text-violet fw-bold fs-3">0</span><br>Fitout Request</p>
                    </div>
                </div>`,
};

let a30 = {
  id: "a30",
  x: a30_x,
  y: a30_y,
  w: a30_w,
  h: a30_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Incidents</span>
                        <div class="parent col-md-3">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_incident" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadIncidents()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showIncidents()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_incident" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelIncident">Incident: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                 </div> 
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
                 <a  style="cursor:pointer;" class="dropdown-item" id="Primary_Category" >Primary Category </a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Secondary_Category">Secondary Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_Date">Created Date</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Level_Wise">Level Wise</a>                
                  <a  style="cursor:pointer;"  class="dropdown-item" id="Reported_By">Reported By</a>

             </div>
           
         </div>
                    <center id="loaderIncident" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="incidentNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; height:300px;" class="card-body">
                        <canvas id="incident-dount"></canvas>
                    </div></center>
                </div>`,
  // <p class="fw-bold">Incident Status</p>
  // <span align="left" class="row mx-2">
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#77216f;"></i>
  //         Open &emsp; <span id="incidentsOpen" class="float-end" style="color:#77216f">0</span>
  //     </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#f2c06c"></i> In
  //         Progress &emsp; <span id="incidentsInProgress" class="float-end"
  //             style="color:#f2c06c ;">0</span> </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#E2445B;"></i>
  //         Pending &emsp; <span id="incidentsPending" class="float-end" style="color:#E2445B;">0</span>
  //     </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#a1cd7a;"></i>
  //         Closed &emsp; <span id="incidentsClosed" class="float-end" style="color:#a1cd7a;">0</span>
  //     </span>
  // </span>
};

let a31 = {
  id: "a31",
  x: a31_x,
  y: a31_y,
  w: a31_w,
  h: a31_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Top 5  Category-wise Incidents</span>
                        <div class="parent col-md-3">
                        <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_categoryIncident" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadCategoryWiseIncidents()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCategoryWiseIncidents()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_incidentcategory" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                 <span class="dropdown-item" id="listItemLabelIncidentCategory">Incident: </span>
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
                 <a  style="cursor:pointer;" class="dropdown-item" id="Primary_Category" >Primary Category </a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Secondary_Category">Secondary Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_Date">Created Date</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Level_Wise">Level Wise</a>                
                  <a  style="cursor:pointer;"  class="dropdown-item" id="Reported_By">Reported By</a>

             </div>
           
         </div>
                    <center id="loaderIncidentCategory" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="incidentCategoryNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                        <canvas id="incident-category-pie"></canvas>
                    </div></center>
                </div>`,
  // <p class="fw-bold">Incident Category</p>
  // <span align="left" class="row mx-2">
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#E2445B;"></i>
  //         Mechanical &emsp; <span id="incidentsCatMechanical" class="float-end"
  //             style="color:#E2445B;">0</span> </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#f2c06c"></i>
  //         Health & Safety &emsp; <span id="incidentsCatHealthSafety" class="float-end"
  //             style="color:#f2c06c ;">0</span> </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#f8ea94;"></i>
  //         Engineering &emsp; <span id="incidentsCatEngineering" class="float-end"
  //             style="color:#f2c06c">0</span> </span>
  //     <span class="col-6 p-1 "><i class="bi p-1  bi-circle-fill px-1" style="color:#a1cd7a;"></i>
  //         Other &emsp; <span id="incidentsCatOther" class="float-end" style="color:#a1cd7a;">0</span>
  //     </span>
  // </span>




  // <div class="col-sm-1 child mx-2">
  //                       <a style="cursor: pointer;" id="refreshIconElement_incidentcategory" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
  //                        </div>
};

let a32 = {
  id: "a32",
  x: a32_x,
  y: a32_y,
  w: a32_w,
  h: a32_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Manpower Attendance</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoManpowerAttendanceIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_manPower" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadManPowerAttendance()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showManPowerAttendance()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <div class="tbl-container overflow-scroll" >
                        <table id="tblManPowerinfo" class="table table-bordered" overflow-y:scroll">
                            <thead style="font-size:15px;vertical-align: middle">
                                <th> Designation </th>
                                <th>Attendance</th>
                            </thead>
                            <tbody id= "tablebodyManPower">
                                  
                            </tbody>
                            
                        </table>
                        <center id="loaderManPower" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="ManPowerNoData"><br><br><br>No Data Available</span></center>
                    </div>
                    <div class="custom-dropdown" >
      <div id="ManpowerAttendanceDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeManpowerAttendance" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ManpowerAttendanceInfo"></p>
      <p id="ManpowerAttendanceInfo2"></p>
      </div>
    </div>
                </div>`,
};

let a33 = {
  id: "a33",
  x: a33_x,
  y: a33_y,
  w: a33_w,
  h: a33_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Footfall Analysis   &nbsp; <span id="firstDrillDownFootfall" style="display:none;">  </span>   <span id="secondDrilldownFootfall" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoFootfallAnalysisIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_footfall" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadEventsFootfallAnalysis()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showEventsFootfallAnalysis()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_footfall" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                 <span class="dropdown-item" id="listItemLabelFootFall">Ticket: </span>
                 <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                 </div> 
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
      
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Facility_Name">Facility Name</a>
                 
             </div>
             </div>
                    <center><span class="fw-bold my-4" id="footfallNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="footfall_bar"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
      <div id="FootfallAnalysisDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeFootfallAnalysis" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="FootfallAnalysisInfo"></p>
      </div>
    </div>
                </div>`,
};

// infoFootfallAnalysisIcon,FootfallAnalysisDiv,closeFootfallAnalysis,FootfallAnalysisInfo

// changes
let a34 = {
  id: "a34",
  x: a34_x,
  y: a34_y,
  w: a34_w,
  h: a34_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="orange-shade"  style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                        <span style="text-align:left" padding-right:70px;"><span id="cardLTIR" class="count">0</span><br/>
                        <span class="text">LTIR</span></span>
                        <div id="loader_a34" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <a style="cursor: pointer;" id="infoLTIRIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer;" id="refreshIconElement_totalAmount" onclick="Refresh_a34()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadLTIR()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                    </div>
                    <div class="custom-dropdown" style="padding:0px;" >
                    <div id="LTIRDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeLTIR" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="LTIRInfo"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfo2"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfo3"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfo4"></p>
                    <p style="margin-bottom:0px;" id="LTIRInfo5"></p>
                    </div>
                  </div>
                </div>`
};
// changes Refresh_a34
function Refresh_a34() {
  let cardLTIR = document.getElementById("cardLTIR");
  let loader = document.getElementById("loader_a34");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardLTIR.innerHTML = " "; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    let url;

    // Construct the URL based on globalType
    if (globalType === "daily") {
      url = getLTIR + idLink + "&date=" + globalDateFirst;
    } else {
      url = getLTIR + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond;
    }

    xhr_object.open("GET", url, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunGetLTIR = JSON.parse(xhr_object.responseText);
        console.log("LTIR - ");
        console.log(resfunGetLTIR);

        // Check if data is absent or count is zero
        if (!resfunGetLTIR.response || resfunGetLTIR.response === 0) {
          console.log("No data or zero count received.");
          cardLTIR.innerHTML = "No data available";
        } else {
          cardLTIR.innerHTML = resfunGetLTIR.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardLTIR.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardLTIR.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  // function handleRefresh() {
  //   fetchData(); // Refresh the data
  // }

}
let a35 = {
  id: "a35",
  x: a35_x,
  y: a35_y,
  w: a35_w,
  h: a35_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="text-align:left" padding-right:70px; "><span id="cardZeroIncidentDays" class="count">0</span><br/>
                  <span class="text">Zero Incident Days</span></span>
                  <div id="loader_a35" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                                          <a style="cursor: pointer;" id="refreshIconElement_totalAmount" onclick="Refresh_a35()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                  <a style="cursor: pointer;" id="infoIncidentZeroIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadZeroIncidentDays()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="fa fa-download"></i></a1>
               </div>
               <div class="custom-dropdown" style="padding:0px;" >
                    <div id="IncidentZeroDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentZero" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfo"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfo2"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfo3"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfo4"></p>
                    <p style="margin-bottom:0px;" id="IncidentZeroInfo5"></p>
                    </div>
                  </div>
</div>`
};

// changes Refresh_a35
function Refresh_a35() {
  let cardZeroIncidentDays = document.getElementById("cardZeroIncidentDays");
  let loader = document.getElementById("loader_a35");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardZeroIncidentDays.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getZeroIncidentDays + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunGetZeroIncidentDays = JSON.parse(this.responseText);
        console.log("Zero Incidents - ");
        console.log(resfunGetZeroIncidentDays);

        // Check if data is absent or count is zero
        if (!resfunGetZeroIncidentDays.response || resfunGetZeroIncidentDays.response === 0) {
          console.log("No data or zero count received.");
          cardZeroIncidentDays.innerHTML = "No data available";
        } else {
          cardZeroIncidentDays.innerHTML = resfunGetZeroIncidentDays.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardZeroIncidentDays.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardZeroIncidentDays.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let a36 = {
  id: "a36",
  x: a36_x,
  y: a36_y,
  w: a36_w,
  h: a36_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardIncidentPerSqFt" class="count">0</span><br/>
                    <span class=" text">Incident Per Million Sq Ft Per Annum</span>
                  </span>
                  <div id="loader_a36" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer;" id="infoIncidentPerMillionIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadIncidentPerSqFt()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a36()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
               <div class="custom-dropdown" style="padding:0px;" >
                    <div id="IncidentPerMillionDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentPerMillion" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="IncidentPerMillionInfo"></p>
                    <p style="margin-bottom:0px;" id="IncidentPerMillionInfo2"></p>
                    <p style="margin-bottom:0px;" id="IncidentPerMillionInfo3"></p>
                     <p style="margin-bottom:0px;" id="IncidentPerMillionInfo4"></p>
                    </div>
                  </div>
          </div>`
};
// infoIncidentPerMillionIcon,IncidentPerMillionDiv,closeIncidentPerMillion,IncidentPerMillionInfo

function Refresh_a36() {
  let cardIncidentPerSqFt = document.getElementById("cardIncidentPerSqFt");
  let loader = document.getElementById("loader_a36");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardIncidentPerSqFt.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getIncidentPerSqFt + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunGetIncidentPerSqFt = JSON.parse(this.responseText);
        console.log("Incidents Per Sq. Ft. - ");
        console.log(resfunGetIncidentPerSqFt);

        // Check if data is absent or count is zero
        if (!resfunGetIncidentPerSqFt.response || resfunGetIncidentPerSqFt.response === 0) {
          console.log("No data or zero count received.");
          cardIncidentPerSqFt.innerHTML = "No data available";
        } else {
          cardIncidentPerSqFt.innerHTML = resfunGetIncidentPerSqFt.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardIncidentPerSqFt.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardIncidentPerSqFt.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a37 = {
  id: "a37",
  x: a37_x,
  y: a37_y,
  w: a37_w,
  h: a37_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardIncidentNearMissGoodCatch" class="count">0</span><br/>
                    <span class=" text">Incident Near Miss / Good Catch Per Million Sq Ft Per Annum</span>
                  </span>
                  <div id="loader_a37" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                                    <a style="cursor: pointer;" id="infoIncidentNearMissIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadIncidentNearMissGoodCatch()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a37()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
                             <div class="custom-dropdown" style="padding:0px;" >
                    <div id="IncidentNearMissDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeIncidentNearMiss" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="IncidentNearMissInfo"></p>
                    <p style="margin-bottom:0px;" id="IncidentNearMissInfo2"></p>
                    <p style="margin-bottom:0px;" id="IncidentNearMissInfo3"></p>
                     <p style="margin-bottom:0px;" id="IncidentNearMissInfo4"></p>
                      <p style="margin-bottom:0px;" id="IncidentNearMissInfo5"></p>
                    </div>
                  </div>
          </div>`
};
// infoIncidentNearMissIcon,IncidentNearMissDiv,closeIncidentNearMiss,IncidentNearMissInfo

function Refresh_a37() {
  let cardIncidentNearMissGoodCatch = document.getElementById("cardIncidentNearMissGoodCatch");
  let loader = document.getElementById("loader_a37");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardIncidentNearMissGoodCatch.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getIncidentNearMissGoodCatch + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunGetIncidentNearMissGoodCatch = JSON.parse(this.responseText);
        console.log("Incidents Near Miss Good Catch - ");
        console.log(resfunGetIncidentNearMissGoodCatch);

        // Check if data is absent or count is zero
        if (!resfunGetIncidentNearMissGoodCatch.response || resfunGetIncidentNearMissGoodCatch.response === 0) {
          console.log("No data or zero count received.");
          cardIncidentNearMissGoodCatch.innerHTML = "No data available";
        } else {
          cardIncidentNearMissGoodCatch.innerHTML = resfunGetIncidentNearMissGoodCatch.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardIncidentNearMissGoodCatch.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardIncidentNearMissGoodCatch.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a41 = {
  id: "a41",
  x: a41_x,
  y: a41_y,
  w: a41_w,
  h: a41_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardSafeManHours" class="count">0</span><br/>
                    <span class=" text">Safe Man Hours</span>
                  </span>
                  <div id="loader_a41" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                       <a style="cursor: pointer;" id="infoSafeManIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadSafeManHours()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a41()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
              <div class="custom-dropdown" style="padding:0px;" >
                    <div id="SafeManDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeSafeMan" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="SafeManInfo"></p>
                    <p style="margin-bottom:0px;" id="SafeManInfo2"></p>
                    <p style="margin-bottom:0px;" id="SafeManInfo3"></p>
                    </div>
                  </div>
          </div>`
};

// infoSafeManIcon,SafeManDiv,closeSafeMan,SafeManInfo
function Refresh_a41() {
  let cardSafeManHours = document.getElementById("cardSafeManHours");
  let loader = document.getElementById("loader_a41");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardSafeManHours.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getSafeManHours + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunGetSafeManHours = JSON.parse(this.responseText);
        console.log("Safe Man Hours - ");
        console.log(resfunGetSafeManHours);

        // Check if data is absent or count is zero
        if (!resfunGetSafeManHours.response || resfunGetSafeManHours.response === 0) {
          console.log("No data or zero count received.");
          cardSafeManHours.innerHTML = "No data available";
        } else {
          cardSafeManHours.innerHTML = resfunGetSafeManHours.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardSafeManHours.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardSafeManHours.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a38 = {
  id: "a38",
  x: a38_x,
  y: a38_y,
  w: a38_w,
  h: a38_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Incident Summary</span>
                        <div class="parent col-md-3">
                         <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_incidentSummary" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadRAC()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showRAC()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container overflow-hidden h-auto p-0" style="width: 100%;">
                        <center> <table id="tblRCAinfo" style="width: 100%;margin-right:20px;  overflow-y:scroll" class="table table-bordered mx-4">
                                <thead>
                                    <th>Sr. No.</th>
                                    <th>Name of the site</th>
                                    <th>Location</th>
                                    <th>Incident date</th>
                                    <th>Time of incidence</th>
                                    <th>Incident Category</th>
                                    <th>Incident Brief</th>
                                    <th>Loss/Damage Evalution</th>
                                    <th>RCA</th>
                                    <th>Level</th>
                                    <th>Primary RCA Category</th>
                                    <th>Corrective Actions</th>
                                    <th>Preventive Actions</th>
                                    <th>Incident Status</th>
                                    <th>Action Owner</th>
                                    <th>Reason for pending</th>
                                </thead>
                                <tbody id="tablebodyRCA">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderRCA" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="RCANoData"><br><br><br>No Data Available</span></center>
                    </div>
                </div>`,
};

let a42 = {
  id: "a42",
  x: a42_x,
  y: a42_y,
  w: a42_w,
  h: a42_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Asset Breakdown Table</span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoAssetBreakdownTableIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_assetBreakdown" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadAssetsBreakdown()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showAssetsBreakdown()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container overflow-hidden h-auto p-0" style="width: 100%;marign-left:100px">
                        <center> <table id="tblAssetsBreakdowninfo" class="table table-bordered mx-6" style=" marign-left:100px">
                                <thead>
                                    <th>Sr. No.</th>
                                    <th>Asset name</th>
                                    <th>Breakdown Date</th>
                                    <th>Asset Code</th>
                                     <th>In Use Date</th>
                                     <th> Duration</th>
                                     <th>Comments</th>
                                   
                                   
                                </thead>
                                <tbody id="tablebodyAssetsBreakdown">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderAssetsBreakdown" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="assetsBreakdownNoData"><br><br><br>No Data Available</span></center>
                    </div>
                    <div class="custom-dropdown" >
      <div id="AssetBreakdownTableDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeAssetBreakdownTable" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="AssetBreakdownTableInfo"></p>
      </div>
    </div>
                </div>`,



};

// infoAssetBreakdownTableIcon,AssetBreakdownTableDiv,closeAssetBreakdownTable,AssetBreakdownTableInfo

let a74 = {
  id: "a74",
  x: a74_x,
  y: a74_y,
  w: a74_w,
  h: a74_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Facilities Info</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElement_FacilitiesInfo" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoFacilitiesInfoIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadFacilityInfo()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showFacilityInfo()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container overflow-hidden h-auto p-0" style="width: 100%;marign-left:100px">
                        <center> <table id="tblfacilityinfo" class="table table-bordered mx-6" style=" marign-left:100px">
                                <thead>
                                    <th>Sr. No.</th>
                                    <th>Facility Name</th>
                                 
                                    <th>Booked By</th>
                                    <th>Booking Status</th>
                                    <th>Tower</th>
                                  
                                    <th>Schedule Date</th>
                                    <th>Schedule Slot</th>
                                   
                                   
                                   
                                </thead>
                                <tbody id="tablebodyfacilityinfo">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderfacilityinfo" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="facilityinfoNoData"><br><br><br>No Data Available</span></center>
                    </div>

                   <div class="custom-dropdown" >
                    <div id="FacilitiesInfoDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeFacilitiesInfo" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="FacilitiesInfoInfo"></p>
                    <p style="margin-bottom:0px;" id="FacilitiesInfoInfo2"></p>
                    </div>
                  </div>
                </div>`,



};
// tblfacilityinfo,tablebodyfacilityinfo,loaderfacilityinfo,facilityinfoNoData

let a68 = {
  id: "a68",
  x: a68_x,
  y: a68_y,
  w: a68_w,
  h: a68_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Executive Escalation </span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoExecutiveEscalationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                                 <a style="cursor: pointer;" id="refreshIconElementExecutiveEscalation" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadExecutiveEscalation()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showExecutiveEscalation()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="tbl-container">
                        <center> <table id="tblExecutiveEscalationinfo" class="table table-bordered" >
                                <thead>
                                    
                                    <th>Ticket Number</th>
                                    <th>Description</th>
                                    <th>Community Head</th>
                                    <th>Category</th>
                                    <th> Sub Category</th>
                                    <th>Ticket Status</th>
                                    <th>Created On </th>
                                    <th>Flat </th>
                                  
                                   
                                </thead>
                                <tbody id="tablebodyExecutiveEscalation">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderExecutiveEscalation" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="executiveEscalationNoData"><br><br><br>No Data Available</span></center>
                    </div>
                     <div class="custom-dropdown" >
      <div id="ExecutiveEscalationDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeExecutiveEscalation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ExecutiveEscalationInfo"></p>
      <p id="ExecutiveEscalationInfo2"></p>
      </div>
    </div>
                </div>`,

  // tblExecutiveEscalationinfo , tablebodyExecutiveEscalation ,loaderExecutiveEscalation ,executiveEscalationNoData


};

let a44 = {
  id: "a44",
  x: a44_x,
  y: a44_y,
  w: a44_w,
  h: a44_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Level Wise Incidents</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoLevelWiseIncidentsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_levelIncidents" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadPyramid()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showPyramid()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_incidentlevel" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                 <span class="dropdown-item" id="listItemLabelIncidentLevel">Incident: </span>
                 <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
                 <a  style="cursor:pointer;" class="dropdown-item" id="Primary_Category" >Primary Category </a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Secondary_Category">Secondary Category</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Created_Date">Created Date</a>
                 <a  style="cursor:pointer;"  class="dropdown-item" id="Level_Wise">Level Wise</a>                
                  <a  style="cursor:pointer;"  class="dropdown-item" id="Reported_By">Reported By</a>

             </div>
           
         </div>
                    <center id="loaderPyramid" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="chartPyramidNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; height:300px;" class="card-body">
                      <canvas id="chartPyramid"></canvas>
                    </div>

                    </center>

                                        <div class="custom-dropdown" >
      <div id="LevelWiseIncidentsDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeLevelWiseIncidents" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="LevelWiseIncidentsInfo"></p>
      <p id="LevelWiseIncidentsInfo2"></p>
      </div>
    </div>
                </div>
            
         `,
};
{/* <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;" id="refreshIconElement_incidentlevel" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div> */}

// infoLevelWiseIncidentsIcon,LevelWiseIncidentsDiv,closeLevelWiseIncidents,LevelWiseIncidentsInfo                       

let a46 = {
  id: "a46",
  x: a46_x,
  y: a46_y,
  w: a46_w,
  h: a46_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Primary Root Cause Category</span>
                        <div class="parent col-md-3">
                         <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_primaryRoot" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadRootCause()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showRootCause()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    
                    <center id="loaderRootCause" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="rootCauseNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                    <canvas id="root_Cause_pie"></canvas>
                    </div></center>
                    <span class="col-4 ml-2">
                      <div style="padding:10px;">
                          <p align="left" id="incidentRoot"></p>
                      </div>
                     </span>
                   
          </div>`,
};

let a64 = {
  id: "a64",
  x: a64_x,
  y: a64_y,
  w: a64_w,
  h: a64_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Body Injury Chart</span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoBodyInjuryChartIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_bodyInjury" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadBodyInjuryChart()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showBodyInjuryChart()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    
                    <center id="loaderBodyInjuryChart" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>

                    <center><span class="fw-bold my-4" id="bodyInjuryChartNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                    <img  id="bodyInjuryChart" name="bodyInjuryChart"  width=600px height=600px  src="src="https://reports.lockated.com:8000/media/body_injury/8756975713423273.png"" alt="">
                    </div></center>
                    <span class="col-4 ml-2">
                      <div style="padding:10px;">
                          <p align="center" ></p>
                      </div>
                     </span>
                     <div class="custom-dropdown" >
      <div id="BodyInjuryChartDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeBodyInjuryChart" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="BodyInjuryChartInfo"></p>
      </div>
    </div>
            </div>`,
};

// infoBodyInjuryChartIcon,BodyInjuryChartDiv,closeBodyInjuryChart,BodyInjuryChartInfo

let a80 = {
  id: "a80",
  x: a80_x,
  y: a80_y,
  w: a80_w,
  h: a80_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px" > 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardRegisterdUser" class="count">0</span><br/>
                    <span class=" text">Total Registered Users</span>
                  </span>
                  <div id="loader_a80" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer; margin-left:26%;" id="infoTotalRegisteredIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadRegisteredUsers()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a80()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
               <div class="custom-dropdown" style="padding:0px;" >
                    <div id="TotalRegisteredDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalRegistered" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalRegisteredInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalRegisteredInfo2"></p>
                    </div>
                  </div>
          </div>`
};


function Refresh_a80() {
  let cardRegisterdUser = document.getElementById("cardRegisterdUser");
  let loader = document.getElementById("loader_a80");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardRegisterdUser.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalusers + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        totalUsrers = JSON.parse(this.responseText);
        console.log("Asset Total - ");
        console.log(totalUsrers);

        if (!totalUsrers.response || totalUsrers.response === 0) {
          console.log("No data or zero count received.");
          cardRegisterdUser.innerHTML = "No data available";
        } else {
          cardRegisterdUser.innerHTML = totalUsrers.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardRegisterdUser.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardRegisterdUser.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}


let a81 = {
  id: "a81",
  x: a81_x,
  y: a81_y,
  w: a81_w,
  h: a81_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade" style="height: inherit;padding: 0px 20px; padding-top: 10px" > 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardDownloads" class="count">0</span><br/>
                    <span class=" text">Total Downloads</span>
                  </span>
                  <div id="loader_a81" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer; margin-left:26%;" id="infoTotalDownloadsIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadDownloads()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a81()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
              <div class="custom-dropdown" style="padding:0px;" >
                    <div id="TotalDownloadsDiv" class=" dropdown-menu"style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalDownloads" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalDownloadsInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalDownloadsInfo2"></p>
                    </div>
                  </div>
          </div>`
};

function Refresh_a81() {
  let cardDownloads = document.getElementById("cardDownloads");
  let loader = document.getElementById("loader_a81");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardDownloads.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalDownloads + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let totalDownloads = JSON.parse(this.responseText);
        console.log("Asset Download data - ");
        console.log(totalDownloads);

        // Check if data is absent or count is zero
        if (!totalDownloads.response || totalDownloads.response === 0) {
          console.log("No data or zero count received.");
          cardDownloads.innerHTML = "No data available";
        } else {
          cardDownloads.innerHTML = totalDownloads.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        cardDownloads.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardDownloads.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}
let a82 = {
  id: "a82",
  x: a82_x,
  y: a82_y,
  w: a82_w,
  h: a82_h,
  content: `<div style="height: 100%; width: 100%;">
                <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></i></b>Zone Wise Escalation</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoZoneWiseEscalationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_ZoneWise" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadExecutiveEscalation()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="show()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                </div>
                    <hr class="mt-0"/>
                    <center id="loaderSiteWiseEscalation" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="SiteWiseEscalationNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-5" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="SiteWiseEscalation"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="ZoneWiseEscalationDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeZoneWiseEscalation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ZoneWiseEscalationInfo"></p>
                    <p style="margin-bottom:0px;" id="ZoneWiseEscalationInfo2"></p>
                    </div>
                  </div>
                </div>`,

  // SiteWiseEscalation,loaderSiteWiseEscalation,SiteWiseEscalationNoData
};

let a83 = {
  id: "a83",
  x: a83_x,
  y: a83_y,
  w: a83_w,
  h: a83_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                     
                      
                     
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Open & Close Escalation  &nbsp; <span id="firstDrillDownopenEscalation" style="display:none;">  </span>   <span id="secondDrilldownopenEscalation" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoOpenCloseEscalationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;" id="refreshIconElement_openClose" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadExecutiveEscalation()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="show()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                      </div>
                    </div>
                    <hr class="mt-0" /><br><br><br>

                    
                    <div class="custom-dropdown" id="custom-dropdown">
                      <div id="dataDropdown_openClose" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                      <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelOpenClose">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div>
                        <a  style="cursor:pointer;"class="dropdown-item" id="Tower">Tower </a>
             
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Created_By">Created By</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Number">Ticket Number</a>
                        
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Category">Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Sub_Category">Sub Category</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Assign_To">Assign To</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Created_Date">Created Date To</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Rating">Rating</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Ticket_Type">Ticket Type</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Service_Type">Service Type</a>
                        <a  style="cursor:pointer;"  class="dropdown-item" id="Related_To">Related To</a>
                      </div>
                    </div>
                   
                                        
                    <center id="loaderOpenCloseEscalation" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    
                    
                    <center><div style="background-color:#fff; height:300px;" class="card-body">
                    <canvas id="OpenCloseEscalation"></canvas>
                    </div></center>

                    <div class="custom-dropdown" >
                    <div id="OpenCloseEscalationDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeOpenCloseEscalation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="OpenCloseEscalationInfo"></p>
                    <p style="margin-bottom:0px;" id="OpenCloseEscalationInfo2"></p>
                    </div>
                  </div>
                   
          </div>`,
  // loaderOpenCloseEscalation,OpenCloseEscalationNoData,OpenCloseEscalation
  // <center><span class="fw-bold my-4" id="OpenCloseEscalationNoData"><br><br><br>No Data Available</span></center>
};

let a84 = {
  id: "a84",
  x: a84_x,
  y: a84_y,
  w: a84_w,
  h: a84_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="width:100%; background-color:#fff; padding: 10px;">
  <div class="row">
      <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Category-Wise Executive Escalation</b></span>
      <div class="parent col-md-4">
      <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCategoryWiseExecutiveIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
        <div class="col-sm-1 child mx-2">
                          <a style="cursor: pointer;" id="refreshIconElement_categoryExecutive" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                           </div>
          <div class="col-sm-1 child mx-2">
              <a style="cursor: pointer;" onclick="downloadCategoryEscalation()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
          </div>
          <div class="col-sm-1 child mx-2">
              <img height="15" width="15"  onclick="showTickets()" src="assets/img/xmark-solid.svg"/>
          </div>
      </div>
  </div>
</div>
                    <hr class="mt-0"/>
                    <center id="loaderCategoryEscalation" class="mt-4"><br><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="NoDataCategoryEscalation"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="background-color:#fff; class="card-body">
                        <canvas id="CategoryEscalation"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="CategoryWiseExecutiveDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCategoryWiseExecutive" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CategoryWiseExecutiveInfo"></p>
                    <p style="margin-bottom:0px;" id="CategoryWiseExecutiveInfo2"></p>
                    </div>
                  </div>
                </div>`,
}

let a85 = {
  id: "a85",
  x: a85_x,
  y: a85_y,
  w: a85_w,
  h: a85_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="width:100%; background-color:#fff; padding: 10px;">
  <div class="row">
      <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Service Partner Evaluation </span>
      <div class="parent col-md-4">
      <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoServicePartnerEvaluationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
       <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_servicePartner" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
          <div class="col-sm-1 child mx-2">
              <a style="cursor: pointer;" onclick="downloadAuditScore()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
          </div>
          <div class="col-sm-1 child mx-2">
              <img height="15" width="15" onclick="showServicePartnerEvaluation()" src="assets/img/xmark-solid.svg"/>
          </div>
      </div>
  </div>
</div>
  <hr class="mt-0" /><br>
  <div class="tbl-container">
      <center> <table id="tblAuditScoreinfo" class="table table-bordered" >
              <thead>
                  
              <th>Sr No.</th>
              <th>Vendor Name</th>
              <th>Average Rating</th>
              <th>Date</th>
              <th>Site</th>
              <th>Percentage</th>
                
                 
              </thead>
              <tbody id="tablebodyAuditScore">
                  
              </tbody>
          </table>
      </center> 
      <center id="loaderAuditScore" class="mt-4"><br><br><br>
      <div class="mt-4" role="status">
      <span>
      <img height="100" width="100" src="assets/img/loader.svg"/></span>
  </div>
      </center>  
      <center><span class="fw-bold my-4" id="AuditScoreNoData"><br><br><br>No Data Available</span></center>
  </div>
  <div class="custom-dropdown" >
      <div id="ServicePartnerEvaluationDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeServicePartnerEvaluation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ServicePartnerEvaluationInfo"></p>
      <p id="ServicePartnerEvaluationInfo2"></p>
      </div>
    </div>
</div>`,
};

let a100 = {
  id: "a100",
  x: a100_x,
  y: a100_y,
  w: a100_w,
  h: a100_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="background-color:#fff;" class="card-header row">
                          <div class="row">
                          <span  id="dt3"  align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Cluster Wise Total Steps Taken</span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoClusterWiseTotalStepsTakenIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                              <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_custerStats" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;"  onclick="downloadClusterWiseTotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showClusterWise()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                        </div>
                      </div>
                      <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_custerStats" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                        <div style="display:flex;">
                          <span class="dropdown-item" id="listItemLabelCusterStats">Ticket: </span>
                          <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                          </div> 
                          <a  style="cursor:pointer;"class="dropdown-item" id="User_Name">User Name </a>
                          
                        </div>
           
                      </div>
                      
                      <center id="loaderClusterStats" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                      </center>
                      <center><span class="fw-bold my-4" id="clusterStatsNoData"><br><br><br>No Data Available</span></center>
                     
                     <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                          <canvas id="cluster-stats"></canvas>
                      </div></center>
                       <div class="custom-dropdown" >
                    <div id="ClusterWiseTotalStepsTakenDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeClusterWiseTotalStepsTaken" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ClusterWiseTotalStepsTakenInfo"></p>

                    </div>
                  </div>
                  </div>`,
  // listItemLabelCusterStats     dataDropdown_custerStats
};

// infoClusterWiseTotalStepsTakenIcon,ClusterWiseTotalStepsTakenDiv,closeClusterWiseTotalStepsTaken,ClusterWiseTotalStepsTakenInfo

let a101 = {
  id: "a101",
  x: a101_x,
  y: a101_y,
  w: a101_w,
  h: a101_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="background-color:#fff;" class="card-header row">
                    
                          <div class="row">
                          <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Function Wise Total Steps Taken</span>
                          <div class="parent col-md-4">
                            <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoFunctionWiseTotalStepsTakenIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                              <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_dailyStepStats" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;"  onclick="downloadFunctionWiseTotal()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                              <img height="15" width="15" onclick="showFunctionWise()" src="assets/img/xmark-solid.svg"/>
                            </div>
                          </div>
                      </div>
                      </div>
                      <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_dailyStepStats" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                        <div style="display:flex;">
                          <span class="dropdown-item" id="listItemLabelDailyStepStats">Ticket: </span>
                          <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div> 
                          <a  style="cursor:pointer;"class="dropdown-item" id="User_Name">User Name </a>
                          
                        </div>
           
                      </div>
                      
                      <center id="loaderDailyStep" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                      </center>
                      <center><span class="fw-bold my-4" id="dailyStepNoData"><br><br><br>No Data Available</span></center>
                     
                      <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                          <canvas id="barChartDailyStep"></canvas>
                      </div></center>
                       <div class="custom-dropdown" >
                    <div id="FunctionWiseTotalStepsTakenDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeFunctionWiseTotalStepsTaken" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="FunctionWiseTotalStepsTakenInfo"></p>

                    </div>
                  </div>
                  </div>`,
  // refreshIconElement_dailyStepStats   listItemLabelDailyStepStats   dataDropdown_dailyStepStats

};

// infoFunctionWiseTotalStepsTakenIcon,FunctionWiseTotalStepsTakenDiv,closeFunctionWiseTotalStepsTaken,FunctionWiseTotalStepsTakenInfo

let a102 = {
  id: "a102",
  x: a102_x,
  y: a102_y,
  w: a102_w,
  h: a102_h,
  content: `<div style="height: 100%; width: 100%;">
           
              <div style="background-color:#fff;" class="card-header row">
                          <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Gender Participation  &nbsp; <span id="firstDrillDownGender" style="display:none;">  </span>   <span id="secondDrilldownGender" style="display:none;"> </span></span>
                        <div class="parent col-md-4">
                             <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoGenderParticipationIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                            <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;" id="refreshIconElement_genderParticipation" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadGenderParticipation()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                              <img height="15" width="15" onclick="showGenderParticipation()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                      </div>
                <div class="custom-dropdown" id="custom-dropdown">
                    <div id="dataDropdown_genderParticipation" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                    <div style="display:flex;">
                      <span class="dropdown-item" id="listItemLabelGenderParticipation">Ticket: </span>
                      <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                      </div>  
                      <a  style="cursor:pointer;"class="dropdown-item" id="User_Name">User Name </a>
                   
             
                    </div>
               
             
                </div>
              
              <center id="loaderGender" class="mt-4"><br><br><br>
               <div class="mt-4" role="status">
                  <span>
                     <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
              </center>
              <center><span class="fw-bold my-4" id="genderNoData"><br><br><br>No Data Available</span></center>
            
            <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                  <canvas id="genderParticipation"></canvas>
              </div></center>
              <div class="custom-dropdown" >
                    <div id="GenderParticipationDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeGenderParticipation" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="GenderParticipationInfo"></p>

                    </div>
                  </div>
            </div>`,

};

// infoGenderParticipationIcon,GenderParticipationDiv,closeGenderParticipation,GenderParticipationInfo

let a103 = {
  id: "a103",
  x: a103_x,
  y: a103_y,
  w: a103_w,
  h: a103_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">
                        <div class="row">
                            <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1"></span>
                            <img class="col-md-1 my-2" height="15" width="15" onclick="showTrendsOverMonthSites()" src="assets/img/xmark-solid.svg" />
                        </div>
                    </div>
                        <div class="col-md-12 row">
                            <div class="col-md-6 d-flex border-end row">
                                <div >
                                  <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-10  mt-1"><b></i></b>Inventory Cost Trend Over The Months   &nbsp; <span id="firstDrillDownInventoryMonths" style="display:none;">  </span>   <span id="secondDrilldownInventoryMonths" style="display:none;"> </span> </span>
                                   <div style="float:right;">
                                   <a style="cursor: pointer;" id="infoTrendOverTheMonthsIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                        <a style="cursor: pointer;" id="refreshIconElement_trendOverMonth" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a> &nbsp;
                                      
                                        <a style="cursor: pointer; float:right;" onclick="downloadTrendsMonths()" data-toggle="popover" title="Download Underlying Data">
                                        <img height="15" width="15" src="assets/img/download.png"/></a>
                                    </div> 
                                </div>
                                
                                <div class="custom-dropdown" id="custom-dropdown">
                                  <div id="dataDropdown_trendOverMonth" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                                  <div style="display:flex;">
                                      <span class="dropdown-item" id="listItemLabelTrendOverMonth">Ticket: </span>
                                      <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                                      </div>  
                                      <a  style="cursor:pointer;"class="dropdown-item" id="Inventory_Name">Inventory Name </a>
                                      <a  style="cursor:pointer;" class="dropdown-item" id="Inventory_Type" >Inventory Type </a>
                                    
                                    
                                  </div>
                                </div>

                   

                                <center id="loaderTrendsMonths" class="mt-4">
                                <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                                </center>
                               
                                <center><br>
                                      <span class="fw-bold my-4" id="TrendsMonthsNoData">No Data Available</span>
                                </center>
                                <center><div style="background-color:#fff; height:300px; class="card-body mt-4">
                                    <canvas id="trendsOverMonths" ></canvas>
                                </div></center>
                            </div>

                            <div class="col-md-6 d-flex row ">
                               
                                <div>
                                  <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-10  mt-1"><b></i></b>Inventory Cost Trend Over All The Sites   &nbsp; <span id="firstDrillDownInventorySites" style="display:none;">  </span>   <span id="secondDrilldownInventorySites" style="display:none;"> </span></span>
                                  <div style="float:right;">
                                    <a style="cursor: pointer;" id="infoTrendOverTheSitesIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                                    <a style="cursor: pointer;" id="refreshIconElement_trendsOverSites" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                                    &nbsp;
                                    <a style="cursor: pointer;" onclick="downloadTrendsSites()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" style="margin-bottom:10px;" src="assets/img/download.png"/></a>
                                  </div>

                                </div>
                                   <div class="custom-dropdown" id="custom-dropdown">
                                      <div id="dataDropdown_trendsOverSites" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:auto;">
                                      <div style="display:flex;">
                                      <span class="dropdown-item" id="listItemLabelTrendsOverSites">Ticket: </span>
                                      <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                                      </div>
                                      <a  style="cursor:pointer;"class="dropdown-item" id="Inventory_Name">Inventory Name </a>
                                      <a  style="cursor:pointer;" class="dropdown-item" id="Inventory_Type" >Inventory Type </a>
                
                 
                                      </div>
                                   </div>
                                <center id="loaderTrendsSites" class="mt-4">
                                <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                                </center>
                                    
                                <center><br>
                                    <span class="fw-bold my-4" id="TrendsSitesNoData">No Data Available</span>
                                </center>

                                <center>
                                    <div style="background-color:#fff; height:300px;" class="card-body mt-4">
                                      <canvas id="trendsOverSites"></canvas>
                                    </div>
                                </center>

                                <span class="col-4 ml-2">
                                    <div>
                                        <p align="left" id="wsLPCD"></p>
                                    </div>
                                </span>
                            </div>
                        </div>      
    </div>

                  <div class="custom-dropdown" >
                    <div id="TrendOverTheMonthsDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 35%;
                    margin: 25px 25px 25px 3%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTrendOverTheMonths" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TrendOverTheMonthsInfo"></p>
                    <p style="margin-bottom:0px;" id="TrendOverTheMonthsInfo2"></p>

                    </div>

                    <div class="custom-dropdown" >
                    <div id="TrendOverTheSitesDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 35%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTrendOverTheSites" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TrendOverTheSitesInfo"></p>
                    <p style="margin-bottom:0px;" id="TrendOverTheSitesInfo2"></p>

                    </div>
                </div>`,
  // refreshIconElement_trendOverMonth   dataDropdown_trendOverMonth  listItemLabelTrendOverMonth
  // dataDropdown_trendsOverSites , listItemLabelTrendsOverSites,refreshIconElement_trendsOverSites
  // <span class="dropdown-item" id="listItemLabelTrendsOverSites">Ticket: </span>
};

// infoTrendOverTheSitesIcon,TrendOverTheSitesDiv,closeTrendOverTheSites,TrendOverTheSitesInfo

// showTotalVisitors2(),loaderTotalVisitorsII,totalVisitorsNoDataII,total-visitors-II  refreshIconElement_totalVisitorII  dataDropdown_totalVisitorII  listItemLabelTotalVisitorII
let a104 = {
  id: "a104",
  x: a104_x,
  y: a104_y,
  w: a104_w,
  h: a104_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="background-color:#fff;" class="card-header row">  
                    <div class="row">
                    <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 d-flex mt-1"><b></b>Total Visitors II   &nbsp; <span id="firstDrillDownVisitors" style="display:none;">  </span>   <span id="secondDrilldownVisitors" style="display:none;"> </span></span>
                    <div class="parent col-md-4">
                     <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoTotalVisitorsIIIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_totalVisitorII" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                            <a style="cursor: pointer;"  onclick="downloadTotalVisitorsChartII()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                        <img height="15" width="15" onclick="showTotalVisitors2()" src="assets/img/xmark-solid.svg"/>
                      </div>
                    </div>
                </div>
                </div>
                    <div class="custom-dropdown" id="custom-dropdown">
                        <div id="dataDropdown_totalVisitorII" class=" dropdown-menu" style="height:300px;overflow-y:scroll;inset:0 ; position:absolute; width:fit-content;margin:60px;">
                        <div style="display:flex;">
                        <span class="dropdown-item" id="listItemLabelTotalVisitorII">Ticket: </span>
                        <span > <img  id="closeDropdown" height="15" width="15" src="assets/img/xmark-solid.svg"/></span>
                        </div>  
                        <a  style="cursor:pointer;"class="dropdown-item" id="type_of_visitor">Type of visitor </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="created_by" >Created By </a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="purpose" >Purpose</a>
                        <a  style="cursor:pointer;" class="dropdown-item" id="visiting_to" >Visiting To </a>


                        </div>
                    </div>
                    <center id="loaderTotalVisitorsII" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="totalVisitorsNoDataII"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="total-visitors-II"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="TotalVisitorsIIDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeTotalVisitorsII" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalVisitorsIIInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalVisitorsIIInfo2"></p>
                    </div>
                  </div>
                </div>`,
};
// infoTotalVisitorsIIIcon,TotalVisitorsIIDiv,closeTotalVisitorsII,TotalVisitorsIIInfo
let a105 = {
  id: "a105",
  x: a105_x,
  y: a105_y,
  w: a105_w,
  h: a105_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visTotalVisitorsCards" class="count">0</span><br/>
                    <span class=" text">Total Visitors</span>
                  </span>
                  <div id="loader_a105" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadVisitors()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a105()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

function Refresh_a105() {
  let visTotalVisitorsCards = document.getElementById("visTotalVisitorsCards");
  let loader = document.getElementById("loader_a105");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visTotalVisitorsCards.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    let url;
    if (globalType === "daily") {
      url = getVisitorsCards + idLink + "&date=" + globalDateFirst;
    } else {
      url = getVisitorsCards + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond;
    }

    xhr_object.open("GET", url, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunVisitorsCards = JSON.parse(xhr_object.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitorsCards);

        if (resfunVisitorsCards && resfunVisitorsCards.response && resfunVisitorsCards.response.totalVisitors) {
          visTotalVisitorsCards.innerHTML = resfunVisitorsCards.response.totalVisitors;
        } else {
          visTotalVisitorsCards.innerHTML = "No data available";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visTotalVisitorsCards.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}

let a106 = {
  id: "a106",
  x: a106_x,
  y: a106_y,
  w: a106_w,
  h: a106_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visExpectedVisitorsCards" class="count">0</span><br/>
                    <span class=" text">Expected Visitors</span>
                  </span>
                  <div id="loader_a106" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadExpectedVisitors()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a106()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

function Refresh_a106() {
  let visExpectedVisitorsCards = document.getElementById("visExpectedVisitorsCards");
  let loader = document.getElementById("loader_a106");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visExpectedVisitorsCards.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    let url;
    if (globalType === "daily") {
      url = getVisitorsCards + idLink + "&date=" + globalDateFirst;
    } else {
      url = getVisitorsCards + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond;
    }

    xhr_object.open("GET", url, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunVisitorsCards = JSON.parse(xhr_object.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitorsCards);

        if (resfunVisitorsCards && resfunVisitorsCards.response && resfunVisitorsCards.response.expectedVisitors) {
          visExpectedVisitorsCards.innerHTML = resfunVisitorsCards.response.expectedVisitors;
        } else {
          visExpectedVisitorsCards.innerHTML = "No data available";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visExpectedVisitorsCards.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}


let a107 = {
  id: "a107",
  x: a107_x,
  y: a107_y,
  w: a107_w,
  h: a107_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visUnExpectedVisitorsCards" class="count">0</span><br/>
                    <span class=" text">UnExpected Visitors</span>
                  </span>
                  <div id="loader_a107" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadUnExpectedVisitors()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a107()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};


function Refresh_a107() {
  let visUnExpectedVisitorsCards = document.getElementById("visUnExpectedVisitorsCards");
  let loader = document.getElementById("loader_a107");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visUnExpectedVisitorsCards.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    let url;
    if (globalType === "daily") {
      url = getVisitorsCards + idLink + "&date=" + globalDateFirst;
    } else {
      url = getVisitorsCards + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond;
    }

    xhr_object.open("GET", url, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunVisitorsCards = JSON.parse(xhr_object.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitorsCards);

        if (resfunVisitorsCards && resfunVisitorsCards.response && resfunVisitorsCards.response.unexpectedVisitors) {
          visUnExpectedVisitorsCards.innerHTML = resfunVisitorsCards.response.unexpectedVisitors;
        } else {
          visUnExpectedVisitorsCards.innerHTML = "No data available";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visUnExpectedVisitorsCards.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}



let a108 = {
  id: "a108",
  x: a108_x,
  y: a108_y,
  w: a108_w,
  h: a108_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="yellow-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visTotalGatePass" class="count">0</span><br/>
                    <span class=" text">Total Gate Pass</span>
                  </span>
                  <div id="loader_a108" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadTotalGatePass()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a108()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

function Refresh_a108() {
  let visTotalGatePass = document.getElementById("visTotalGatePass");
  let loader = document.getElementById("loader_a108");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visTotalGatePass.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open("GET", getVisitorsCards + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getVisitorsCards + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunVisitors = JSON.parse(this.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitors);

        // Check if response exists and if totalGatePass is not equal to 0
        if (resfunVisitors.response && resfunVisitors.response.totalGatePass !== 0) {
          visTotalGatePass.innerHTML = resfunVisitors.response.totalGatePass + "";
        } else {
          visTotalGatePass.innerHTML = "No data available"; // Show "No data available" message if no data or data count is 0
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visTotalGatePass.innerHTML = "No data available"; // Show "No data available" on error
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}
let a109 = {
  id: "a109",
  x: a109_x,
  y: a109_y,
  w: a109_w,
  h: a109_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="red-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visReturnGatePass" class="count">0</span><br/>
                    <span class=" text">Returnable Gate Pass Issued</span>
                  </span>
                  <div id="loader_a109" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadReturnGatePass()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a109()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};


function Refresh_a109() {
  let visReturnGatePass = document.getElementById("visReturnGatePass");
  let loader = document.getElementById("loader_a109");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visReturnGatePass.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getVisitorsCards + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunVisitorsCards = JSON.parse(this.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitorsCards);

        if (resfunVisitorsCards && resfunVisitorsCards.response && resfunVisitorsCards.response.returnable_gatePass) {
          visReturnGatePass.innerHTML = resfunVisitorsCards.response.returnable_gatePass;
        } else {
          visReturnGatePass.innerHTML = "No data available";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visReturnGatePass.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}


let a110 = {
  id: "a110",
  x: a110_x,
  y: a110_y,
  w: a110_w,
  h: a110_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visNonReturnGatePass" class="count">0</span><br/>
                    <span class=" text">Non-Returnable Gate Pass Issued</span>
                  </span>
                  <div id="loader_a110" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadNonReturnGatePass()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a110()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};


function Refresh_a110() {
  let visNonReturnGatePass = document.getElementById("visNonReturnGatePass");
  let loader = document.getElementById("loader_a110");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visNonReturnGatePass.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getVisitorsCards + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        resfunVisitorsCards = JSON.parse(this.responseText);
        console.log("Visitors cards----------------- - ");
        console.log(resfunVisitorsCards);

        if (resfunVisitorsCards && resfunVisitorsCards.response && resfunVisitorsCards.response.non_returnable_gatePass) {
          visNonReturnGatePass.innerHTML = resfunVisitorsCards.response.non_returnable_gatePass;
        } else {
          visNonReturnGatePass.innerHTML = "No data available";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visNonReturnGatePass.innerHTML = "No data available";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}

let a111 = {
  id: "a111",
  x: a111_x,
  y: a111_y,
  w: a111_w,
  h: a111_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visTotalStaffCard" class="count">0</span><br/>
                    <span class=" text">Total Staff</span>
                  </span>
                  <div id="loader_a111" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadTotalStaff()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a111()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};


function Refresh_a111() {
  let visTotalStaffCard = document.getElementById("visTotalStaffCard");
  let loader = document.getElementById("loader_a111");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visTotalStaffCard.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getStaff + idLink, true);

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunStaff = JSON.parse(this.responseText);
        console.log("Staff - ");
        console.log(resfunStaff);

        if (!resfunStaff.response || resfunStaff.response === 0) {
          console.log("No data or zero count received.");
          visTotalStaffCard.innerHTML = "No data available";
        } else {
          visTotalStaffCard.innerHTML = resfunStaff.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visTotalStaffCard.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      visTotalStaffCard.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let a112 = {
  id: "a112",
  x: a112_x,
  y: a112_y,
  w: a112_w,
  h: a112_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="yellow-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visStaffInCard" class="count">0</span><br/>
                    <span class=" text">Staff In</span>
                  </span>
                  <div id="loader_a112" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadStaffIn()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a112()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

// changes Refresh_a112
function Refresh_a112() {
  let visStaffInCard = document.getElementById("visStaffInCard");
  let loader = document.getElementById("loader_a112");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visStaffInCard.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    // Condition based on globalType
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getStaffIn + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getStaffIn + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getStaffIn +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getStaffIn +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunStaffIn = JSON.parse(this.responseText);
        console.log("Staff In - ");
        console.log(resfunStaffIn);

        if (!resfunStaffIn.response || resfunStaffIn.response === 0) {
          console.log("No data or zero count received.");
          visStaffInCard.innerHTML = "No data available";
        } else {
          visStaffInCard.innerHTML = resfunStaffIn.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visStaffInCard.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      visStaffInCard.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}

let a113 = {
  id: "a113",
  x: a113_x,
  y: a113_y,
  w: a113_w,
  h: a113_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="red-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="visStaffOutCard" class="count">0</span><br/>
                    <span class=" text">Staff Out</span>
                  </span>
                  <div id="loader_a113" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  <a1 style="cursor: pointer;" onclick="downloadStaffOut()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_a113()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
          </div>`
};

// Refresh_a113

function Refresh_a113() {
  let visStaffOutCard = document.getElementById("visStaffOutCard");
  let loader = document.getElementById("loader_a113");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    visStaffOutCard.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    // Condition based on globalType
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getStaffOut + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getStaffOut + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getStaffOut +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getStaffOut +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunStaffOut = JSON.parse(this.responseText);
        console.log("Staff Out - ");
        console.log(resfunStaffOut);

        if (!resfunStaffOut.response || resfunStaffOut.response === 0) {
          console.log("No data or zero count received.");
          visStaffOutCard.innerHTML = "No data available";
        } else {
          visStaffOutCard.innerHTML = resfunStaffOut.response + "";
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        visStaffOutCard.innerHTML = "No data available"; // Show error message
      }

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      visStaffOutCard.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let b70 = {
  id: "b70",
  x: b70_x,
  y: b70_y,
  w: b70_w,
  h: b70_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="orange-shade"> 
                        <span style="text-align:left"><span id="cardTotalParking" class="count">0</span><br/>
                        <span class="text">Total Parking</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <div id="loader_b70" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                    <a style="cursor: pointer; margin-right:0px;" id="infoTotalParkingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadTotalParking()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                          <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b70()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                    </div>
                    <div id="TotalParkingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalParking" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalParkingInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalParkingInfo2"></p>
                    </div>
                </div>`,
};

function Refresh_b70() {
  let cardTotalParking = document.getElementById("cardTotalParking");
  let loader = document.getElementById("loader_b70");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardTotalParking.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getParking + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);

    xhr_object.onload = function () {
      let resfunCardParking = JSON.parse(this.responseText);
      console.log("Parking----------- - ");
      console.log(resfunCardParking);

      // Update HTML elements with values from the response
      cardTotalParking.innerHTML = resfunCardParking.total_parking + "";

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardTotalParking.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let b71 = {
  id: "b71",
  x: b71_x,
  y: b71_y,
  w: b71_w,
  h: b71_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="green-shade"> 
                        <span style="text-align:left"><span id="cardFreeParking" class="count">0</span><br/>
                        <span class="text">Free Parking</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <div id="loader_b71" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer; margin-right:0px;" id="infoFreeParkingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadFreeParking()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                          <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b71()" title="Refresh Content" >
                        <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                    </div>
                                        <div id="FreeParkingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeFreeParking" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="FreeParkingInfo"></p>
                    <p style="margin-bottom:0px;" id="FreeParkingInfo2"></p>
                    </div>
                </div>`,
};

function Refresh_b71() {
  let cardFreeParking = document.getElementById("cardFreeParking");
  let loader = document.getElementById("loader_b71");

  // Function to fetch free parking data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardFreeParking.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getPaidFreeParking + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);

    xhr_object.onload = function () {
      let resfunCardParkingPaidFree = JSON.parse(this.responseText);
      console.log("Free Parking - ");
      console.log(resfunCardParkingPaidFree);

      // Update HTML element with free parking data
      cardFreeParking.innerHTML = resfunCardParkingPaidFree.response.free_parking + "";

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardFreeParking.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch for free parking
  fetchData();

  // Function to handle refresh button click for free parking
  function handleRefresh() {
    fetchData(); // Refresh the free parking data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let b72 = {
  id: "b72",
  x: b72_x,
  y: b72_y,
  w: b72_w,
  h: b72_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="pink-shade"> 
                        <span style="text-align:left"><span id="cardPaidParking" class="count">0</span><br/>
                        <span class="text">Paid Parking</span></span>
                        <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                        <div id="loader_b72" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                           <a style="cursor: pointer; margin-right:0px;" id="infoPaidParkingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadPaidParking()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                          <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b72()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                    </div>
                     <div id="PaidParkingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closePaidParking" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="PaidParkingInfo"></p>
                    <p style="margin-bottom:0px;" id="PaidParkingInfo2"></p>
                    </div>
                </div>`,
};

function Refresh_b72() {
  let cardPaidParking = document.getElementById("cardPaidParking");
  let loader = document.getElementById("loader_b72");

  // Function to fetch paid parking data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardPaidParking.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getPaidFreeParking + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);

    xhr_object.onload = function () {
      let resfunCardParkingPaidFree = JSON.parse(this.responseText);
      console.log("Paid Parking - ");
      console.log(resfunCardParkingPaidFree);

      // Update HTML element with paid parking data
      cardPaidParking.innerHTML = resfunCardParkingPaidFree.response.paid_parking + "";

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardPaidParking.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch for paid parking
  fetchData();

  // Function to handle refresh button click for paid parking
  function handleRefresh() {
    fetchData(); // Refresh the paid parking data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let b73 = {
  id: "b73",
  x: b73_x,
  y: b73_y,
  w: b73_w,
  h: b73_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="yellow-shade"> 
                        <span style="text-align:left"><span id="CardOccupiedParking" class="count">0</span>
                        <span class="text">Allocated Parking</span><br/><br/>
                        <div id="loader_b73" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <span class="count" id="occupiedFour">0 </span> <span class="text"> 4Wheelers | </span> <span class="count" id="occupiedTwo">0 </span> <span class="text"> 2Wheelers </span>  </span>
                       
                        <a style="cursor: pointer; margin-right:0%;" id="infoOccupiedParkingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadOccupiedParking()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1><br/>
                          <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b73()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                    </div>
                     <div id="OccupiedParkingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeOccupiedParking" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="OccupiedParkingInfo"></p>
                    <p style="margin-bottom:0px;" id="OccupiedParkingInfo2"></p>
                     <p style="margin-bottom:0px;" id="OccupiedParkingInfo3"></p>
                      <p style="margin-bottom:0px;" id="OccupiedParkingInfo4"></p>
                    </div>
                </div>`,
};

function Refresh_b73() {
  let CardOccupiedParking = document.getElementById("CardOccupiedParking");
  let occupiedFour = document.getElementById("occupiedFour");
  let occupiedTwo = document.getElementById("occupiedTwo");
  let loader = document.getElementById("loader_b73");

  // Function to fetch occupied parking data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    CardOccupiedParking.innerHTML = ""; // Clear the content while loading
    occupiedFour.innerHTML = "";
    occupiedTwo.innerHTML = "";

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getOccupiedParking + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);

    xhr_object.onload = function () {
      let resfunCardParkingOccpied = JSON.parse(this.responseText);
      console.log("Occupied Parking - ");
      console.log(resfunCardParkingOccpied);

      // Update HTML elements with values from the response
      CardOccupiedParking.innerHTML = resfunCardParkingOccpied.response.occupied_parking + "";
      occupiedFour.innerHTML = resfunCardParkingOccpied.response["4_wheeler_parking"] + "";
      occupiedTwo.innerHTML = resfunCardParkingOccpied.response["2_wheeler_parking"] + "";

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      CardOccupiedParking.innerHTML = "No data available"; // Show "No data available" message on error
      occupiedFour.innerHTML = "";
      occupiedTwo.innerHTML = "";
    };

    xhr_object.send();
  }

  // Initial data fetch for occupied parking
  fetchData();

  // Function to handle refresh button click for occupied parking
  function handleRefresh() {
    fetchData(); // Refresh the occupied parking data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


let b74 = {
  id: "b74",
  x: b74_x,
  y: b74_y,
  w: b74_w,
  h: b74_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
                    <div class="red-shade"> 
                        <span style="text-align:left"><span id="cardVacantParking" class="count">0</span>
                        <span class="text"> Available Parking</span><br/><br/>
                        <div id="loader_b74" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                        <span id="fourVacant" class="count">0 </span> <span class="text"> 4Wheelers | </span> <span class="count" id="twoVacant">0 </span> <span class="text"> 2Wheelers </span>  </span>
                          <a style="cursor: pointer; margin-right:0%;" id="infoVacantParkingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a1 style="cursor: pointer;" onclick="downloadVacantParking()" data-toggle="popover"  title="Download Underlying Data" >
                          <i class="fa fa-download"></i></a1>
                          <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b74()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
                    </div>
                      <div id="VacantParkingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeVacantParking" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="VacantParkingInfo"></p>
                    <p style="margin-bottom:0px;" id="VacantParkingInfo2"></p>
                     <p style="margin-bottom:0px;" id="VacantParkingInfo3"></p>
                      <p style="margin-bottom:0px;" id="VacantParkingInfo4"></p>
                    </div>
                </div>`,
};

function Refresh_b74() {
  let cardVacantParking = document.getElementById("cardVacantParking");
  let fourVacant = document.getElementById("fourVacant");
  let twoVacant = document.getElementById("twoVacant");
  let loader = document.getElementById("loader_b74");

  // Function to fetch vacant parking data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardVacantParking.innerHTML = ""; // Clear the content while loading
    fourVacant.innerHTML = "";
    twoVacant.innerHTML = "";

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getVacantParking + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);

    xhr_object.onload = function () {
      let resfunCardParkingVacant = JSON.parse(this.responseText);
      console.log("Vacant Parking - ");
      console.log(resfunCardParkingVacant);

      // Update HTML elements with values from the response
      cardVacantParking.innerHTML = resfunCardParkingVacant.response + "";
      fourVacant.innerHTML = resfunCardParkingVacant.four_wheeler_count + "";
      twoVacant.innerHTML = resfunCardParkingVacant.two_wheeler_count + "";

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      cardVacantParking.innerHTML = "No data available"; // Show "No data available" message on error
      fourVacant.innerHTML = "";
      twoVacant.innerHTML = "";
    };

    xhr_object.send();
  }

  // Initial data fetch for vacant parking
  fetchData();

  // Function to handle refresh button click for vacant parking
  function handleRefresh() {
    fetchData(); // Refresh the vacant parking data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}


// loaderTrendsMonths,TrendsMonthsNoData,trendsOverMonths

let b76 = {
  id: "b76",
  x: b76_x,
  y: b76_y,
  w: b76_w,
  h: b76_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Permit Per Site</b></span>

                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoPermitPerSiteIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_permitSite" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadPermitSite()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showCategoryWiseTickets()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" /><br>
                    <center id="loaderSitePermit" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="SitePermitNoData"><br><br><br>No Data Available</span></center>
                    <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                        <canvas id="sitePermit"></canvas>
                    </div></center>
                     <div class="custom-dropdown" >
                    <div id="PermitPerSiteDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 60%;
                    margin: 26px 25px 25px 27%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closePermitPerSite" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p id="PermitPerSiteInfo"></p>
                    <p id="PermitPerSiteInfo2"></p>
                    </div>
                  </div>
                </div>`,
  // <span id="dt2" align="left" style="color:#5e2750;" class="fw-bold col-md-11 mt-1">Unit Category-wise Tickets</span>
};

let b77 = {
  id: "b77",
  x: b77_x,
  y: b77_y,
  w: b77_w,
  h: b77_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Permit Status</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoPermitStatusIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                          <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_permitStatus" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadPermitStatus()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showIncidents()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <center id="loaderPermitStatus" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="PermitStatusNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                        <canvas id="permitStatus"></canvas>
                    </div></center>
                                        <div class="custom-dropdown" >
                    <div id="PermitStatusDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 53%;
                    margin: 25px 25px 25px 30%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closePermitStatus" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p id="PermitStatusInfo"></p>
                    <p id="PermitStatusInfo2"></p>
                    </div>
                  </div>
                </div>`,

};

let b78 = {
  id: "b78",
  x: b78_x,
  y: b78_y,
  w: b78_w,
  h: b78_h,
  content: `<div style="height: 100%; width: 100%;">
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b></b>Client Wise Outstanding Amount</span>
                        <div class="parent col-md-4">
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoClientWiseOutstandingIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_ClientWise" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadOutstandingClient()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15" onclick="showTotalOutstandingAmount()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div>
                    <hr class="mt-0" />
                    <div class="tbl-container overflow-hidden h-auto p-0" style="width: 100%;">
                        <center> <table id="tblOutstandinginfo" style="width: 100%;margin-right:20px;overflow-y:scroll; display: inline-table "  class="table table-bordered ">
                                <thead>
                                  
                                    <th>Sites</th>
                                    <th>Outstanding Amount</th>
                                    <th>Percentage</th>
                                   
                                </thead>
                                <tbody id="tablebodyOutstanding">
                                    
                                </tbody>
                            </table>
                        </center> 
                        <center id="loaderOutstanding" class="mt-4"><br><br><br>
                        <div class="mt-4" role="status">
                        <span>
                        <img height="100" width="100" src="assets/img/loader.svg"/></span>
                    </div>
                        </center>  
                        <center><span class="fw-bold my-4" id="OutstandingNoData"><br><br><br>No Data Available</span></center>
                    </div>
                     <div class="custom-dropdown" >
      <div id="ClientWiseOutstandingDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeClientWiseOutstanding" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="ClientWiseOutstandingInfo"></p>
      <p id="ClientWiseOutstandingInfo2"></p>
      </div>
    </div>
                </div>`,
};

let b61 = {
  id: "b61",
  x: b61_x,
  y: b61_y,
  w: b61_w,
  h: b61_h,
  content: `<div style="height: 100%; width: 100%;">
                <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="titleInventory" align="left" style="color:#5e2750;" class="fw-bold col-md-10 mt-1"><b></i></b>Inventory</span>
                        <div class="parent col-md-2">
                       
                            
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showTotalInventory()" src="assets/img/xmark-solid.svg"/>
                                
                            </div>
                        </div>
                    </div>
                </div>
              
                    <hr class="mt-0"/><br>

                    <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-12 ">
                        <div class=" d-flex flex-wrap power-counts justify-content-center">
                            <div class="text-center go-shadow m-2 total-consumption"><span id="overStock" class="fs-3 fw-bold"></span><br><span>Over Stock Items</span><br>
                            <div id="loader_OverStock" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                              <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_OverStock()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            <a style="cursor: pointer;" id="infoOverStockItemsIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                            <a style="cursor: pointer; float:right;" onclick="downloadOverStock()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            
                            </div>

                                 

                            <div class="text-center go-shadow m-2 total-consumption"><span id="underStock" class="fs-3 fw-bold"></span><br><span>Under Stock Items</span><br>
                            <div id="loader_UnderStock" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_UnderStock()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            <a style="cursor: pointer;" id="infoUnderStockItemsIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                            <a style="cursor: pointer; float:right;" onclick="downloadUnderStock()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>

                            <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="workOrder" class="fs-3 fw-bold"></span><br><span>Work Order </span><br>
                              <div id="loader_WorkOrder" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_WorkOrder()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            <a style="cursor: pointer;" id="infoWorkOrderIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                            <a style="cursor: pointer; float:right;" onclick="downloadWorkOrder()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

                            <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="purchaseOrder"class="fs-3 fw-bold"></span><br><span>Purchase Order</span><br>
                             <div id="loader_purchaseOrder" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_purchaseOrder()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                            <a style="cursor: pointer;" id="infoPurchaseOrderIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                            <a style="cursor: pointer; float:right;" onclick="downloadPurchaseOrder()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>
                        </div>
                    </div>

                    <div class="col-lg-6 col-md-6 col-sm-12 ">
                    <div class=" d-flex flex-wrap power-counts justify-content-center">
                        <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="totalInventory" class="fs-3 fw-bold"></span><br><span> Total Value Of Inventory</span><br>
                        <div id="loader_TotalValue" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_TotalValue()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;" id="infoTotalValueOfInventoryIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer; float:right;" onclick="downloadTotalValue()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

                        <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="capitalBlock" class="fs-3 fw-bold"></span><br><span>Capital Blocked in Over Stocking</span><br>
                         <div id="loader_capitalBlock" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_capitalBlock()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;" id="infoCapitalBlockedIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer; float:right; width:10px" onclick="downloadInventory()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a></div>

                        <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="valueConsumable" class="fs-3 fw-bold"></span><br><span>Total Value of Consumables</span><br>
                        <div id="loader_valueConsumable" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_valueConsumable()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;" id="infoValueofConsumablesIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer; float:right; width:10px" onclick="downloadTotalConsumables()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a> </div>

                        <div class="text-center go-shadow m-2 total-consumption"><i class="bi bi-currency-rupee" style="font-size:20px"></i><span id="valueSpares"class="fs-3 fw-bold"></span><br><span>Total Value of Spares</span><br>
                        <div id="loader_valueSpares" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                   <a style="cursor: pointer;width:10px;margin-left: 66%;" id="refreshIconElement_totalAmount" onclick="Refresh_valueSpares()" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                        <a style="cursor: pointer;" id="infoValueofSparesIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        <a style="cursor: pointer; float:right; width:10px" onclick="downloadTotalSpares()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a> </div>
                    </div>
                </div>

                <div class="custom-dropdown" style="padding:0px;" >
                <div id="OverStockItemsDiv" class=" dropdown-menu" style="height: 130px;
                overflow-y: scroll;
                inset: 0px;
                position: absolute;
                width: 312px;
                margin: 11px;
                overflow-x: hidden;
                display: none;
                padding: 10px;
                font-size: 15px;
                margin-left: 2%;">
                <span > <img  id="closeOverStockItems" style="margin-left: 95% ; width: auto;
                height: 15px;" src="assets/img/xmark-solid.svg"/></span>
                <p style="margin-bottom:0px;" id="OverStockItemsInfo"></p>
                <p style="margin-bottom:0px;" id="OverStockItemsInfo2"></p>
                <p style="margin-bottom:0px;" id="OverStockItemsInfo3"></p>
                </div>
              </div>


              <div class="custom-dropdown" style="padding:0px;" >
              <div id="UnderStockItemsDiv" class=" dropdown-menu" style="height: 130px;
              overflow-y: scroll;
              inset: 0px;
              position: absolute;
              width: 312px;
              margin: 11px;
              overflow-x: hidden;
              display: none;
              padding: 10px;
              font-size: 15px;
              margin-left: 23%;">
              <span > <img  id="closeUnderStockItems" style="margin-left: 95% ; width: auto;
              height: 15px;" src="assets/img/xmark-solid.svg"/></span>
              <p style="margin-bottom:0px;" id="UnderStockItemsInfo"></p>
              <p style="margin-bottom:0px;" id="UnderStockItemsInfo2"></p>
              <p style="margin-bottom:0px;" id="UnderStockItemsInfo3"></p>
              </div>
            </div>




            <div class="custom-dropdown" style="padding:0px;" >
              <div id="WorkOrderDiv" class=" dropdown-menu" style="height: 130px;
              overflow-y: scroll;
              inset: 0px;
              position: absolute;
              width: 312px;
              margin: 9% 8px 11px 3%;
              overflow-x: hidden;
              display: none;
              padding: 10px;
              font-size: 15px;">
              <span > <img  id="closeWorkOrder" style="margin-left: 95% ; width: auto;
              height: 15px;" src="assets/img/xmark-solid.svg"/></span>
              <p style="margin-bottom:0px;" id="WorkOrderInfo"></p>
              <p style="margin-bottom:0px;" id="WorkOrderInfo2"></p>
              <p style="margin-bottom:0px;" id="WorkOrderInfo3"></p>
              </div>
            </div>



            <div class="custom-dropdown" style="padding:0px;" >
            <div id="PurchaseOrderDiv" class=" dropdown-menu" style="height: 130px;
            overflow-y: scroll;
            inset: 0px;
            position: absolute;
            width: 312px;
            margin: 10% 11px 11px 23%;
            overflow-x: hidden;
            display: none;
            padding: 10px;
            font-size: 15px;">
            <span > <img  id="closePurchaseOrder" style="margin-left: 95% ; width: auto;
            height: 15px;" src="assets/img/xmark-solid.svg"/></span>
            <p style="margin-bottom:0px;" id="PurchaseOrderInfo"></p>
            <p style="margin-bottom:0px;" id="PurchaseOrderInfo2"></p>
            <p style="margin-bottom:0px;" id="PurchaseOrderInfo3"></p>
            </div>
          </div>



          <div class="custom-dropdown" style="padding:0px;" >
          <div id="TotalValueOfInventoryDiv" class=" dropdown-menu" style="height: 130px;
          overflow-y: scroll;
          inset: 0px;
          position: absolute;
          width: 312px;
          margin: 2% 11px 11px 49%;
          overflow-x: hidden;
          display: none;
          padding: 10px;
          font-size: 15px;">
          <span > <img  id="closeTotalValueOfInventory" style="margin-left: 95% ; width: auto;
          height: 15px;" src="assets/img/xmark-solid.svg"/></span>
          <p style="margin-bottom:0px;" id="TotalValueOfInventoryInfo"></p>
          <p style="margin-bottom:0px;" id="TotalValueOfInventoryInfo2"></p>
          <p style="margin-bottom:0px;" id="TotalValueOfInventoryInfo3"></p>
          </div>
        </div>



        <div class="custom-dropdown" style="padding:0px;" >
        <div id="CapitalBlockedDiv" class=" dropdown-menu" style="height: 130px;
        overflow-y: scroll;
        inset: 0px;
        position: absolute;
        width: 312px;
        margin: 3% 11px 11px 70%;
        overflow-x: hidden;
        display: none;
        padding: 10px;
        font-size: 15px;">
        <span > <img  id="closeCapitalBlocked" style="margin-left: 95% ; width: auto;
        height: 15px;" src="assets/img/xmark-solid.svg"/></span>
        <p style="margin-bottom:0px;" id="CapitalBlockedInfo"></p>
        <p style="margin-bottom:0px;" id="CapitalBlockedInfo2"></p>
        <p style="margin-bottom:0px;" id="CapitalBlockedInfo3"></p>
        </div>
      </div>



      <div class="custom-dropdown" style="padding:0px;" >
      <div id="ValueofConsumablesDiv" class=" dropdown-menu" style="height: 130px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: 312px;
      margin: 11% 11px 11px 50%;
      overflow-x: hidden;
      display: none;
      padding: 10px;
      font-size: 15px;">
      <span > <img  id="closeValueofConsumables" style="margin-left: 95% ; width: auto;
      height: 15px;" src="assets/img/xmark-solid.svg"/></span>
      <p style="margin-bottom:0px;" id="ValueofConsumablesInfo"></p>
      <p style="margin-bottom:0px;" id="ValueofConsumablesInfo2"></p>
      <p style="margin-bottom:0px;" id="ValueofConsumablesInfo3"></p>
      </div>
    </div>


    <div class="custom-dropdown" style="padding:0px;" >
    <div id="ValueofSparesDiv" class=" dropdown-menu" style="height: 130px;
    overflow-y: scroll;
    inset: 0px;
    position: absolute;
    width: 312px;
    margin: 12% 11px 11px 70%;
    overflow-x: hidden;
    display: none;
    padding: 10px;
    font-size: 15px;">
    <span > <img  id="closeValueofSpares" style="margin-left: 95% ; width: auto;
    height: 15px;" src="assets/img/xmark-solid.svg"/></span>
    <p style="margin-bottom:0px;" id="ValueofSparesInfo"></p>
    <p style="margin-bottom:0px;" id="ValueofSparesInfo2"></p>
    <p style="margin-bottom:0px;" id="ValueofSparesInfo3"></p>
    </div>
  </div>

                    
 </div>`,

};

let b34 = {
  id: "b34",
  x: b34_x,
  y: b34_y,
  w: b34_w,
  h: b34_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="totalAmount" class="count">0</span><br/>
                    <span class=" text">Total Amount</span>
                  </span>
                  <div id="loader_b34" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                    <a style="cursor: pointer;margin-right: 0px;" id="infoTotalAmountIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadTotalAmount()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b34()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
                <div id="TotalAmountDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalAmount" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalAmountInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalAmountInfo2"></p>
                    <p style
          </div>`
};


function Refresh_b34() {
  let totalAmount = document.getElementById("totalAmount");
  let loader = document.getElementById("loader_b34");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    totalAmount.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open("GET", getTotalAmount + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getTotalAmount + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfungetTotalAmount = JSON.parse(this.responseText);
        console.log("Total Amount - ");
        console.log(resfungetTotalAmount);

        // Check if total_amount_response exists and is not 0
        if (resfungetTotalAmount.total_amount_response !== undefined && resfungetTotalAmount.total_amount_response !== 0) {
          totalAmount.innerHTML = resfungetTotalAmount.total_amount_response + "";
        } else {
          totalAmount.innerHTML = "No data available"; // Show "No data available" message if no data or total_amount_response is 0
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        totalAmount.innerHTML = "No data available"; // Show "No data available" on error
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}


let b35 = {
  id: "b35",
  x: b35_x,
  y: b35_y,
  w: b35_w,
  h: b35_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="green-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="totalReceived" class="count">0</span><br/>
                    <span class=" text">Total Received</span>
                  </span>
                  <div id="loader_b35" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                   <a style="cursor: pointer;margin-right: 0px;" id="infoTotalReceivedIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadTotalReceived()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b35()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
               <div id="TotalReceivedDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalReceived" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalReceivedInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalReceivedInfo2"></p>
                    <p style="margin-bottom:0px;" id="TotalReceivedInfo3"></p>
                    <p style="margin-bottom:0px;" id="TotalReceivedInfo4"></p>
                    <p style="margin-bottom:0px;" id="TotalReceivedInfo5"></p>
                    </div>
          </div>`
};


function Refresh_b35() {
  let totalReceived = document.getElementById("totalReceived");
  let loader = document.getElementById("loader_b35");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    totalReceived.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open("GET", getTotalAmount + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getTotalAmount + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfungetTotalAmount = JSON.parse(this.responseText);
        console.log("Total Amount - ");
        console.log(resfungetTotalAmount);

        // Check if received_amount_response exists and is not 0
        if (resfungetTotalAmount.received_amount_response !== undefined && resfungetTotalAmount.total_amount_response !== 0) {
          totalReceived.innerHTML = resfungetTotalAmount.total_amount_response + "";
        } else {
          totalReceived.innerHTML = "No data available"; // Show "No data available" message if no data or total_amount_response is 0
        }
      } else {
        console.error('Error fetching data:', xhr_object.statusText);
        totalReceived.innerHTML = "No data available"; // Show "No data available" on error
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }
}


let b36 = {
  id: "b36",
  x: b36_x,
  y: b36_y,
  w: b36_w,
  h: b36_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="pink-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="totalOutstanding" class="count">0</span><br/>
                    <span class=" text">Total Outstanding</span>
                  </span>
                  <div id="loader_b36" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                     <a style="cursor: pointer;margin-right: 6px;" id="infoTotalOutstandingIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadTotalOutstanding()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_b36()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>
                                  <div id="TotalOutstandingDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 312px;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeTotalOutstanding" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="TotalOutstandingInfo"></p>
                    <p style="margin-bottom:0px;" id="TotalOutstandingInfo2"></p>
                    <p style="margin-bottom:0px;" id="TotalOutstandingInfo3"></p>
                    <p style="margin-bottom:0px;" id="TotalOutstandingInfo4"></p>
                    <p style="margin-bottom:0px;" id="TotalOutstandingInfo5"></p>
                    </div>
          </div>`
};


// changes Refresh_b36
function Refresh_b36() {
  let totalOutstanding = document.getElementById("totalOutstanding");
  let loader = document.getElementById("loader_b36");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    totalOutstanding.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open("GET", getTotalAmount + idLink, true);


    if (globalType == "daily") {
      xhr_object.open("GET", getTotalAmount + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getTotalAmount + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      resfungetTotalAmount = JSON.parse(this.responseText);
      console.log("Total Amount - ");
      console.log(resfungetTotalAmount);
      totalOutstanding.innerHTML =
        resfungetTotalAmount.total_outstanding + "";

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

}


let c15 = {
  id: "c15",
  x: c15_x,
  y: c15_y,
  w: c15_w,
  h: c15_h,
  content: `<div style="height: 100%; width: 100%;">
  <div style="background-color:#fff;" class="card-header row">
      <div class="row">
    <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Cluster Employee Particiption</span>
    <div class="parent col-md-3">
     <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoClusterEmployeeParticiptionIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
     <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_ClusterEmployee" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
        <div class="col-sm-1 child mx-2">
            <a style="cursor: pointer;"  onclick="downloadClusterEmployeeParticiption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
        </div>
    </div>
</div>
  </div>
  
  <center id="loaderClusterEmployeeParticiption" class="mt-4"><br><br><br>
  <div class="mt-4" role="status">
  <span>
  <img height="100" width="100" src="assets/img/loader.svg"/></span>
</div>
      </center>  
  <center><span class="fw-bold my-4" id="ClusterEmployeeParticiptionNoData"><br><br><br>No Data Available</span></center>

  <div class="tbl-container">
      <table id="tblClusterEmployeeParticiptioninfo" class="table table-bordered table-reponsive" style="overflow-x:scroll">    
          <tbody id = "tablebodyClusterEmployeeParticiption">
          <thead>
              <th>Rank</th>
              <th>Cluster</th>
              <th>No.Of Participants</th>
              <th> Avg Step Count   </th>
          </thead>
          </tbody>  
      </table>
  </div>
   <div class="custom-dropdown" >
                    <div id="ClusterEmployeeParticiptionDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeClusterEmployeeParticiption" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="ClusterEmployeeParticiptionInfo"></p>

                    </div>
                  </div>
</div>`,
};

// infoClusterEmployeeParticiptionIcon,ClusterEmployeeParticiptionDiv,closeClusterEmployeeParticiption,ClusterEmployeeParticiptionInfo

let c21 = {
  id: "c21",
  x: c21_x,
  y: c21_y,
  w: c21_w,
  h: c21_h,
  content: `<div style="height: 100%; width: 100%;">
                     
              <div style="background-color:#fff;" class="card-header row">
              <div class="row">
            <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Cumulative Leaderboard : Top 10 Female</span>
            <div class="parent col-md-3">
             <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCumulativeLeaderboardTop10FemaleIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
             <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_CumulativeFemale" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                <div class="col-sm-1 child mx-2">
                    <a style="cursor: pointer;"  onclick="downloadCumulativeLeaderboardFemale()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                </div>
            </div>
        </div>
          </div>
                      
                      <center id="loaderCommulativeLeaderboardFemale" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                          </center>  
                      <center><span class="fw-bold my-4" id="commulativeLeaderboardNoDataFemale"><br><br><br>No Data Available</span></center>
  
                      <div class="tbl-container">
                          <table id="tblCommulativeLeaderboardinfoFemale" class="table table-bordered">    
                              <tbody id = "tablebodyCommulativeLeaderboardFemale">
                              <thead>
                                  <th>Rank</th>
                                  <th>Employee</th>
                                  <th>Cluster</th>
                                  <th>Steps Taken</th>
                              </thead>
                              </tbody>  
                          </table>
                      </div>
                       <div class="custom-dropdown" >
                    <div id="CumulativeLeaderboardTop10FemaleDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCumulativeLeaderboardTop10Female" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CumulativeLeaderboardTop10FemaleInfo"></p>
                    <p style="margin-bottom:0px;" id="CumulativeLeaderboardTop10FemaleInfo2"></p>
                    </div>
                  </div>
                  </div>`,
};
// infoCumulativeLeaderboardTop10FemaleIcon,CumulativeLeaderboardTop10FemaleDiv,closeCumulativeLeaderboardTop10Female,CumulativeLeaderboardTop10FemaleInfo

let c11 = {
  id: "c11",
  x: c11_x,
  y: c11_y,
  w: c11_w,
  h: c11_h,
  content: `<div style="height: 100%; width: 100%;" class="dashboard-movement">
              <div class="orange-shade"> 
                  <span style="font-size:100%; text-align:left">
                    <span id="cardDailyStep" class="count">0</span><br/>
                    <span class=" text">Organisation Daily Step Count</span>
                  </span>
                  <div id="loader_c11" class="mt-4 spinner-icon" role="status" style="display: none;">
                     <span>
                       <img height="65" width="65" src="assets/img/spinner.svg"/>
                     </span>
                  </div>
                  <img style="height: 20; width: 20;" src="assets/img/checked.png"/>
                  
                   <a style="cursor: pointer; margin-right:0px;" id="infoOrganisationDailyStepCountIcon"><i style="font-size:17px; font-weight:bold" class="bi bi-info-circle"></i></a>
                  <a1 style="cursor: pointer;" onclick="downloadDailyStepCount()" data-toggle="popover"  title="Download Underlying Data" >
                    <i class="bi bi-download"></i></a1>
                  <a1 id="refreshButton" style="cursor: pointer;" onclick="Refresh_c11()" title="Refresh Content" >
                    <i class="bi bi-arrow-clockwise bold-icon"></i></a1>
              </div>

               <div id="OrganisationDailyStepCountDiv" class=" dropdown-menu" style="height: 130px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 71%;
                    margin: 11px;
                    overflow-x: hidden;
                    display: none;
                    padding: 10px;
                    font-size: 15px;
                    margin-left: auto;">
                    <span > <img  id="closeOrganisationDailyStepCount" style="margin-left: 95% ; width: auto;
                    height: 25px;" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="OrganisationDailyStepCountInfo"></p>

                    </div>
          </div>`
};

// infoOrganisationDailyStepCountIcon,OrganisationDailyStepCountDiv,closeOrganisationDailyStepCount,OrganisationDailyStepCountInfo

function Refresh_c11() {
  let cardDailyStep = document.getElementById("cardDailyStep");
  let loader = document.getElementById("loader_c11");

  // Function to fetch data with from date - to date condition
  function fetchDataWithDate() {
    loader.style.display = "block"; // Show loader
    cardDailyStep.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    xhr_object.open(
      "GET",
      getDailyStepCount +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );

    xhr_object.onload = function () {
      if (xhr_object.status === 200) {
        let resfunDailyStepCount = JSON.parse(this.responseText);
        console.log("Daily Step Count - ");
        console.log(resfunDailyStepCount);

        // Check if data is available and greater than zero
        if (resfunDailyStepCount && resfunDailyStepCount.response && parseFloat(resfunDailyStepCount.response) > 0) {
          cardDailyStep.innerHTML = resfunDailyStepCount.response + "";
        } else {
          cardDailyStep.innerHTML = "No data available"; // Show "No data available" message if no data or data count is 0 or less than 0
        }

        loader.style.display = "none"; // Hide loader
      } else {
        console.error("Error fetching data:", xhr_object.statusText);
        cardDailyStep.innerHTML = "No data available"; // Show "No data available" message on error
        loader.style.display = "none"; // Hide loader
      }
    };

    xhr_object.send();
  }

  // Initial data fetch with from date - to date condition
  fetchDataWithDate();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchDataWithDate(); // Refresh the data with from date - to date condition
  }
}

let c14 = {
  id: "c14",
  x: c14_x,
  y: c14_y,
  w: c14_w,
  h: c14_h,
  content: `
  <div style="height: 100%; width: 100%;">
  <div style="background-color:#fff;" class="card-header row">
      <div class="row">
    <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Function Employee Particiption</span>
    <div class="parent col-md-3">
     <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoFunctionEmployeeParticiptionIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
     <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_FunctionEmployee" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
        <div class="col-sm-1 child mx-2">
            <a style="cursor: pointer;"  onclick="downloadFunctionEmployee()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
        </div>
    </div>
</div>
  </div>
  
  <center id="loaderDepartmentStats" class="mt-4"><br><br><br>
  <div class="mt-4" role="status">
  <span>
  <img height="100" width="100" src="assets/img/loader.svg"/></span>
</div>
      </center>  
  <center><span class="fw-bold my-4" id="DepartmentStatsNoData"><br><br><br>No Data Available</span></center>

  <div class="tbl-container">
      <table id="tblFunctionEmployeeParticiptioninfo" class="table table-bordered table-reponsive" style="overflow-x:scroll">    
          <tbody id = "tablebodyFunctionEmployeeParticiption">
          <thead>
              <th>Rank</th>
              <th>Function</th>
              <th>No.Of Participants</th>
              <th> Avg Step Count   </th>
          </thead>
          </tbody>  
      </table>
  </div>
   <div class="custom-dropdown" >
                    <div id="FunctionEmployeeParticiptionDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeFunctionEmployeeParticiption" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="FunctionEmployeeParticiptionInfo"></p>

                    </div>
                  </div>
</div>`,


};


// infoFunctionEmployeeParticiptionIcon,FunctionEmployeeParticiptionDiv,closeFunctionEmployeeParticiption,FunctionEmployeeParticiptionInfo

let c19 = {
  id: "c19",
  x: c19_x,
  y: c19_y,
  w: c19_w,
  h: c19_h,
  content: `<div style="height: 100%; width: 100%;">
                      <div style="background-color:#fff;" class="card-header row">
                          <div class="row">
                        <span   align="left" style="color:#5e2750;" class="fw-bold col-md-9 mt-1"><b></b>Cumulative Leaderboard : Top 10 Male</span>
                        <div class="parent col-md-3">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCumulativeLeaderboardTop10MaleIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="refreshIconElement_CumulativeLeaderboard" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                         </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;"  onclick="downloadCumulativeLeaderboardMale()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                        </div>
                    </div>
                      </div>
                      
                      <center id="loaderCommulativeLeaderboard" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                          </center>  
                      <center><span class="fw-bold my-4" id="commulativeLeaderboardNoData"><br><br><br>No Data Available</span></center>
  
                      <div class="tbl-container">
                          <table id="tblCommulativeLeaderboardinfo" class="table table-bordered">    
                              <tbody id = "tablebodyCommulativeLeaderboard">
                              <thead>
                                  <th>Rank</th>
                                  <th>Employee</th>
                                  <th>Cluster</th>
                                  <th>Steps Taken </th>
                              </thead>
                              </tbody>  
                          </table>
                      </div>
                       <div class="custom-dropdown" >
                    <div id="CumulativeLeaderboardTop10MaleDiv" class=" dropdown-menu" style="height: 160px;
                    overflow-y: scroll;
                    inset: 0px;
                    position: absolute;
                    width: 76%;
                    margin: 25px 25px 25px 10%;
                    display: none;
                    padding: 10px;">
                    <span > <img  id="closeCumulativeLeaderboardTop10Male" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
                    <p style="margin-bottom:0px;" id="CumulativeLeaderboardTop10MaleInfo"></p>
                    <p style="margin-bottom:0px;" id="CumulativeLeaderboardTop10MaleInfo2"></p>
                    </div>
                  </div>
                  </div>`,
};
// infoCumulativeLeaderboardTop10MaleIcon,CumulativeLeaderboardTop10MaleDiv,closeCumulativeLeaderboardTop10Male,CumulativeLeaderboardTop10MaleInfo

let d11 = {
  id: "d11",
  x: d11_x,
  y: d11_y,
  w: d11_w,
  h: d11_h,
  content: `<div style="height: 100%; width: 100%;">
                     

                      <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Inventory Consumption</b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoInventoryConsumptionIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                           <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_inventoryConsumption" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadInventoryConsumption()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showInventoryConsumption()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                      <hr class="mt-0" />
                      <center id="loaderInventoryConsumption" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                          </center>  
                      <center><span class="fw-bold my-4" id="inventoryConsumptionNoData"><br><br><br>No Data Available</span></center>
  
                      <div class="tbl-container overflow-scroll">
                          <table id="tblInventoryConsumptioninfo" class="table table-bordered" overflow-y:scroll" style="padding-left:20px;">    
                              <tbody id = "tablebodyInventoryConsumption">
                              <thead>
                                  <th>Date</th>
                                  <th>Product</th>
                                  <th>Unit</th>
                                  <th>Opening</th>
                                  <th>Addition</th>
                                  <th>Consumed</th>
                                  <th>Closing</th>
                                  <th>Cost Per Unit</th>
                                  <th>Consumption Cost</th>
                              </thead>
                              </tbody>  
                          </table>
                      </div>
                      <div class="custom-dropdown" >
      <div id="InventoryConsumptionDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeInventoryConsumption" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="InventoryConsumptionInfo"></p>
      </div>
    </div>
                  </div>`,
};

// infoInventoryConsumptionIcon,InventoryConsumptionDiv,closeInventoryConsumption,InventoryConsumptionInfo


let d12 = {
  id: "d12",
  x: d12_x,
  y: d12_y,
  w: d12_w,
  h: d12_h,
  content: `<div style="height: 100%; width: 100%;">
                   

                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Inventory Consumption Report</b></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoInventoryConsumptionReportIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                        <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_inventoryConsumptionReport" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadInventoryConsumptionReport()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showInventoryConsumptionReport()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div> 

                    <hr class="mt-0" />
                    </br>
                    </br>
                    <center id="loaderInventoryReport" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="inventoryReportNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; height:300px;" class="card-body">
                        <canvas id="inventory_report"></canvas>
                    </div></center>
                                         <div class="custom-dropdown" >
      <div id="InventoryConsumptionReportDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeInventoryConsumptionReport" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="InventoryConsumptionReportInfo"></p>

      </div>
    </div>
                </div>`,
};

// infoInventoryConsumptionReportIcon,InventoryConsumptionReportDiv,closeInventoryConsumptionReport,InventoryConsumptionReportInfo
// bar chart  showCurrentStock(),loaderCurrentStock,CurrentStockNoData,current-Stock
let d13 = {
  id: "d13",
  x: d13_x,
  y: d13_y,
  w: d13_w,
  h: d13_h,
  content: `<div style="height: 100%; width: 100%;">
                      
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                    <div class="row">
                        <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Current Stock </b></span>
                        <div class="parent col-md-4">
                        <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCurrentStockIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                         <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_CurrentStock" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                            <div class="col-sm-1 child mx-2">
                                <a style="cursor: pointer;" onclick="downloadCurrentStock()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                            </div>
                            <div class="col-sm-1 child mx-2">
                                <img height="15" width="15"  onclick="showCurrentStock()" src="assets/img/xmark-solid.svg"/>
                            </div>
                        </div>
                    </div>
                  </div> 

                     <hr class="mt-0" />
                      <center id="loaderCurrentStock" class="mt-4"><br><br><br>
                          <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                      </center>
                      
                     
                     <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                          <canvas id="current-Stock"></canvas>
                      </div></center>
                       <div class="custom-dropdown" >
      <div id="CurrentStockDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeCurrentStock" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="CurrentStockInfo"></p>
      <p id="CurrentStockInfo2"></p>
      <p id="CurrentStockInfo3"></p>
      </div>
    </div>
                  </div>`,
  // <center><span class="fw-bold my-4" id="CurrentStockNoData"><br><br><br>No Data Available</span></center>
};

// infoCurrentStockIcon,CurrentStockDiv,closeCurrentStock,CurrentStockInfo
// loaderInventoryConsumptionGreen,inventoryConsumptionGreenNoData,tblInventoryConsumptionGreeninfo,tablebodyInventoryConsumptionGreen
let d14 = {
  id: "d14",
  x: d14_x,
  y: d14_y,
  w: d14_w,
  h: d14_h,
  content: `<div style="height: 100%; width: 100%;">
                      
                      <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Inventory Consumption Green </b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoInventoryConsumptionGreenIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                           <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_inventoryConsumptionGreen" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadInventoryConsumptionGreen()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showInventoryConsumptionGreen()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                      <hr class="mt-0" />
                      <center id="loaderInventoryConsumptionGreen" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                          </center>  
                      <center><span class="fw-bold my-4" id="inventoryConsumptionGreenNoData"><br><br><br>No Data Available</span></center>
  
                      <div class="tbl-container overflow-scroll">
                          <table id="tblInventoryConsumptionGreeninfo" class="table table-bordered" overflow-y:scroll">    
                              <tbody id = "tablebodyInventoryConsumptionGreen">
                              <thead>
                                  <th>Date</th>
                                  <th>Product</th>
                                  <th>Unit</th>
                                  <th>Opening</th>
                                  <th>Addition</th>
                                  <th>Consumed</th>
                                  <th>Closing</th>
                                  <th>Cost Per Unit</th>
                                  <th>Consumption Cost</th>
                              </thead>
                              </tbody>  
                          </table>
                      </div>
                       <div class="custom-dropdown" >
      <div id="InventoryConsumptionGreenDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeInventoryConsumptionGreen" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="InventoryConsumptionGreenInfo"></p>
      <p id="InventoryConsumptionGreenInfo2"></p>
      </div>
    </div>
                  </div>`,
};

// infoInventoryConsumptionGreenIcon,InventoryConsumptionGreenDiv,closeInventoryConsumptionGreen,InventoryConsumptionGreenInfo
// pie chart // loaderInventoryReportGreen,inventoryReportGreenNoData,inventory_report_green
let d15 = {
  id: "d15",
  x: d15_x,
  y: d15_y,
  w: d15_w,
  h: d15_h,
  content: `<div style="height: 100%; width: 100%;">
                    
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Inventory Report Green </b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoInventoryReportGreenIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                          <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_inventoryReportGreen" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadInventoryConsumptionReportGreen()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showInventoryConsumptionReportGreen()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                    <hr class="mt-0" />
                    <center id="loaderInventoryReportGreen" class="mt-4"><br><br><br>
                    <div class="mt-4" role="status">
                    <span>
                    <img height="100" width="100" src="assets/img/loader.svg"/></span>
                </div>
                    </center>
                    <center><span class="fw-bold my-4" id="inventoryReportGreenNoData"><br><br><br>No Data Available</span></center>
                    <center><div style="background-color:#fff; class="card-body">
                        <canvas id="inventory_report_green"></canvas>
                    </div></center>

                     <div class="custom-dropdown" >
      <div id="InventoryReportGreenDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeInventoryReportGreen" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="InventoryReportGreenInfo"></p>
      <p id="InventoryReportGreenInfo2"></p>
      </div>
    </div>
                </div>`,
};

// infoInventoryReportGreenIcon,InventoryReportGreenDiv,closeInventoryReportGreen,InventoryReportGreenInfo
// bar chart  // loaderCurrentStockGreen,CurrentStockGreenNoData,current-Stock-Green
let d16 = {
  id: "d16",
  x: d16_x,
  y: d16_y,
  w: d16_w,
  h: d16_h,
  content: `<div style="height: 100%; width: 100%;">
                    
                    <div style="width:100%; background-color:#fff; padding: 10px;">
                      <div class="row">
                          <span id="" align="left" style="color:#5e2750;" class="fw-bold col-md-8 mt-1"><b>Current Stock Green </b></span>
                          <div class="parent col-md-4">
                           <div class="col-sm-1 child mx-2">
                        <a style="cursor: pointer;" id="infoCurrentStockGreenIcon"><i style="font-size:20px; font-weight:bold" class="bi bi-info-circle"></i></a>
                        </div>
                           <div class="col-sm-1 child mx-2">
                              <a style="cursor: pointer;" id="refreshIconElement_currentStockGreen" data-toggle="popover" title="Refresh Data"><i style="font-size:20px; font-weight:bold" class="bi bi-arrow-clockwise bold-icon"></i></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <a style="cursor: pointer;" onclick="downloadCurrentStockGreen()" data-toggle="popover" title="Download Underlying Data"><img height="15" width="15" src="assets/img/download.png"/></a>
                              </div>
                              <div class="col-sm-1 child mx-2">
                                  <img height="15" width="15"  onclick="showCurrentStockGreen()" src="assets/img/xmark-solid.svg"/>
                              </div>
                          </div>
                      </div>
                    </div> 
                     <hr class="mt-0" />
                      <center id="loaderCurrentStockGreen" class="mt-4"><br><br><br>
                      <div class="mt-4" role="status">
                      <span>
                      <img height="100" width="100" src="assets/img/loader.svg"/></span>
                  </div>
                      </center>
                       <center><span class="fw-bold my-4" id="CurrentStockGreenNoData"><br><br><br>No Data Available</span></center> 
                     <center><div class="m-4" style="height: 300px;" style="background-color:#fff; class="card-body">
                          <canvas id="current-Stock-Green"></canvas>
                      </div></center>
                      <div class="custom-dropdown" >
      <div id="CurrentStockGreenDiv" class=" dropdown-menu" style="height: 160px;
      overflow-y: scroll;
      inset: 0px;
      position: absolute;
      width: auto;
      margin: 40px;
      display: none;
      padding: 10px;">
      <span > <img  id="closeCurrentStockGreen" height="15" width="15" style="margin-left:90%" src="assets/img/xmark-solid.svg"/></span>
      <p id="CurrentStockGreenInfo"></p>
      <p id="CurrentStockGreenInfo2"></p>
      </div>
    </div>
                  </div>`,
  // <center><span class="fw-bold my-4" id="CurrentStockGreenNoData"><br><br><br>No Data Available</span></center>
};

// infoCurrentStockGreenIcon ,CurrentStockGreenDiv,closeCurrentStockGreen ,CurrentStockGreenInfo

let items = [
  a11,
  a12,
  a13,
  a14,
  a15,
  a16,
  a70,
  a71,
  a72,
  a73,
  a74,
  a75,
  a78,
  a79,
  a18,
  a19,
  a39,
  a40,
  a20,
  a21,
  a22,
  a23,
  a59,
  a60,
  a48,
  a49,
  a25,
  a26,
  a27,
  a63,
  a28,
  a29,
  a30,
  a31,
  a32,
  a33,
  a34,
  a35,
  a36,
  a37,
  a41,
  a38,
  a42,
  a44,
  a46,
  a64,
  a61,
  a67,
  a68,
  a69,
  a80,
  a81,
  a82,
  a83,
  a84,
  a85,
  a100,
  a102,
  a101,
  a103,
  a104,
  a105,
  a106,
  a107,
  a108,
  a109,
  a110,
  a111,
  a112,
  a113,
  a114,
  a115,
  a116,
  a117,
  a118,
  a119,
  a120,
  a121,
  a122,
  a123,
  a124,
  a125,
  a126,
  a127,
  a128,
  a129,
  b34,
  b35,
  b36,
  b61,
  b70,
  b71,
  b72,
  b73,
  b74,
  b76,
  b77,
  b78,
  c11,
  c14,
  c15,
  c19,
  c21,
  d11,
  d12,
  d13,
  d14,
  d15,
  d16
];

let itemsList = [
  'a11',
  'a12',
  'a13',
  'a14',
  'a15',
  'a16',
  'a70',
  'a71',
  'a72',
  'a73',
  'a18',
  'a19',
  'a39',
  'a40',
  'a20',
  'a21',
  'a22',
  'a23',
  'a25',
  'a26',
  'a27',
  'a63',
  'a28',
  'a29',
  'a30',
  'a31',
  'a32',
  'a33',
  'a34',
  'a35',
  'a36',
  'a37',
  'a41',
  'a38',
  'a42',
  'a44',
  'a46',
  'a64',
  'a61',
  'a67',
  'a68',
  'a69',
  'a79',
  'a80',
  'a81',
  'a82',
  'a83',
  'a84',
  'a85',
  'a100',
  'a102',
  'a101',
  'a103',
  'a48',
  'a49',
  'a104',
  'a106',
  'a107',
  'b34',
  'b35',
  'b36',
  'b61',
  'b70',
  'b71',
  'b72',
  'b73',
  'b74',
  'b76',
  'b77',
  'a59',
  'a60',
  "c11",
  "c14",
  "c15",
  "c19",
  "c21",
  "a108",
  "a109",
  "a110",
  "a105",
  "a114",
  "a115",
  "a118",
  "a119",
  "a112",
  "a111",
  "a113",
  'b78',
  "a78",
  "a75",
  "a74",
  "a116",
  "a117",
  "a120",
  "a121",
  "a122",
  "a124",
  "a123",
  "a125",
  "a126",
  "a127",
  "a128",
  "a129",
  "d11",
  "d12",
  "d13",
  "d14",
  "d15",
  "d16"
];


grid.on("added removed change", function (e, items) {
  let str = "";
  items.forEach(function (item) {
    str += " (x,y)=" + item.x + "," + item.y;

    if (item.id == "a11") {
      a11.x = item.x;
      a11.y = item.y;
      a11.h = item.h;
      a11.w = item.w;
    }

    if (item.id == "a12") {
      a12.x = item.x;
      a12.y = item.y;
      a12.h = item.h;
      a12.w = item.w;
    }

    if (item.id == "a13") {
      a13.x = item.x;
      a13.y = item.y;
      a13.h = item.h;
      a13.w = item.w;
    }

    if (item.id == "a14") {
      a14.x = item.x;
      a14.y = item.y;
      a14.h = item.h;
      a14.w = item.w;
    }

    if (item.id == "a15") {
      a15.x = item.x;
      a15.y = item.y;
      a15.h = item.h;
      a15.w = item.w;
    }

    if (item.id == "a70") {
      a70.x = item.x;
      a70.y = item.y;
      a70.h = item.h;
      a70.w = item.w;
    }

    if (item.id == "a71") {
      a71.x = item.x;
      a71.y = item.y;
      a71.h = item.h;
      a71.w = item.w;
    }

    if (item.id == "a72") {
      a72.x = item.x;
      a72.y = item.y;
      a72.h = item.h;
      a72.w = item.w;
    }

    if (item.id == "a73") {
      a73.x = item.x;
      a73.y = item.y;
      a73.h = item.h;
      a73.w = item.w;
    }

    if (item.id == "a16") {
      a16.x = item.x;
      a16.y = item.y;
      a16.h = item.h;
      a16.w = item.w;
    }

    if (item.id == "a18") {
      a18.x = item.x;
      a18.y = item.y;
      a18.h = item.h;
      a18.w = item.w;
    }

    if (item.id == "a19") {
      a19.x = item.x;
      a19.y = item.y;
      a19.h = item.h;
      a19.w = item.w;
    }

    if (item.id == "a20") {
      a20.x = item.x;
      a20.y = item.y;
      a20.h = item.h;
      a20.w = item.w;
    }

    if (item.id == "a21") {
      a21.x = item.x;
      a21.y = item.y;
      a21.h = item.h;
      a21.w = item.w;
    }

    if (item.id == "a22") {
      a22.x = item.x;
      a22.y = item.y;
      a22.h = item.h;
      a22.w = item.w;
    }

    if (item.id == "a79") {
      a79.x = item.x;
      a79.y = item.y;
      a79.h = item.h;
      a79.w = item.w;
    }

    if (item.id == "a23") {
      a23.x = item.x;
      a23.y = item.y;
      a23.h = item.h;
      a23.w = item.w;
    }

    if (item.id == "a50") {
      a50.x = item.x;
      a50.y = item.y;
      a50.h = item.h;
      a50.w = item.w;
    }

    if (item.id == "a51") {
      a51.x = item.x;
      a51.y = item.y;
      a51.h = item.h;
      a51.w = item.w;
    }

    if (item.id == "a55") {
      a55.x = item.x;
      a55.y = item.y;
      a55.h = item.h;
      a55.w = item.w;
    }

    if (item.id == "a56") {
      a56.x = item.x;
      a56.y = item.y;
      a56.h = item.h;
      a56.w = item.w;
    }

    if (item.id == "a57") {
      a57.x = item.x;
      a57.y = item.y;
      a57.h = item.h;
      a57.w = item.w;
    }

    if (item.id == "a58") {
      a58.x = item.x;
      a58.y = item.y;
      a58.h = item.h;
      a58.w = item.w;
    }

    if (item.id == "a59") {
      a59.x = item.x;
      a59.y = item.y;
      a59.h = item.h;
      a59.w = item.w;
    }

    if (item.id == "a60") {
      a60.x = item.x;
      a60.y = item.y;
      a60.h = item.h;
      a60.w = item.w;
    }
    if (item.id == "a61") {
      a61.x = item.x;
      a61.y = item.y;
      a61.h = item.h;
      a61.w = item.w;
    }
    if (item.id == "a67") {
      a67.x = item.x;
      a67.y = item.y;
      a67.h = item.h;
      a67.w = item.w;
    }

    if (item.id == "a48") {
      a48.x = item.x;
      a48.y = item.y;
      a48.h = item.h;
      a48.w = item.w;
    }

    if (item.id == "a49") {
      a49.x = item.x;
      a49.y = item.y;
      a49.h = item.h;
      a49.w = item.w;
    }

    if (item.id == "a25") {
      a25.x = item.x;
      a25.y = item.y;
      a25.h = item.h;
      a25.w = item.w;
    }

    if (item.id == "a26") {
      a26.x = item.x;
      a26.y = item.y;
      a26.h = item.h;
      a26.w = item.w;
    }

    if (item.id == "a27") {
      a27.x = item.x;
      a27.y = item.y;
      a27.h = item.h;
      a27.w = item.w;
    }
    if (item.id == "a63") {
      a63.x = item.x;
      a63.y = item.y;
      a63.h = item.h;
      a63.w = item.w;
    }

    if (item.id == "a28") {
      a28.x = item.x;
      a28.y = item.y;
      a28.h = item.h;
      a28.w = item.w;
    }

    if (item.id == "a29") {
      a29.x = item.x;
      a29.y = item.y;
      a29.h = item.h;
      a29.w = item.w;
    }

    if (item.id == "a30") {
      a30.x = item.x;
      a30.y = item.y;
      a30.h = item.h;
      a30.w = item.w;
    }

    if (item.id == "a31") {
      a31.x = item.x;
      a31.y = item.y;
      a31.h = item.h;
      a31.w = item.w;
    }

    if (item.id == "a32") {
      a32.x = item.x;
      a32.y = item.y;
      a32.h = item.h;
      a32.w = item.w;
    }

    if (item.id == "a33") {
      a33.x = item.x;
      a33.y = item.y;
      a33.h = item.h;
      a33.w = item.w;
    }

    if (item.id == "a34") {
      a34.x = item.x;
      a34.y = item.y;
      a34.h = item.h;
      a34.w = item.w;
    }

    if (item.id == "a35") {
      a35.x = item.x;
      a35.y = item.y;
      a35.h = item.h;
      a35.w = item.w;
    }

    if (item.id == "a36") {
      a36.x = item.x;
      a36.y = item.y;
      a36.h = item.h;
      a36.w = item.w;
    }

    if (item.id == "a37") {
      a37.x = item.x;
      a37.y = item.y;
      a37.h = item.h;
      a37.w = item.w;
    }

    if (item.id == "a38") {
      a38.x = item.x;
      a38.y = item.y;
      a38.h = item.h;
      a38.w = item.w;
    }

    if (item.id == "a39") {
      a39.x = item.x;
      a39.y = item.y;
      a39.h = item.h;
      a39.w = item.w;
    }

    if (item.id == "a40") {
      a40.x = item.x;
      a40.y = item.y;
      a40.h = item.h;
      a40.w = item.w;
    }

    if (item.id == "a41") {
      a41.x = item.x;
      a41.y = item.y;
      a41.h = item.h;
      a41.w = item.w;
    }

    if (item.id == "a42") {
      a42.x = item.x;
      a42.y = item.y;
      a42.h = item.h;
      a42.w = item.w;
    }

    if (item.id == "a44") {
      a44.x = item.x;
      a44.y = item.y;
      a44.h = item.h;
      a44.w = item.w;
    }

    if (item.id == "a46") {
      a46.x = item.x;
      a46.y = item.y;
      a46.h = item.h;
      a46.w = item.w;
    }

    if (item.id == "a64") {
      a64.x = item.x;
      a64.y = item.y;
      a64.h = item.h;
      a64.w = item.w;
    }

    if (item.id == "a68") {
      a68.x = item.x;
      a68.y = item.y;
      a68.h = item.h;
      a68.w = item.w;
    }

    if (item.id == "a69") {
      a69.x = item.x;
      a69.y = item.y;
      a69.h = item.h;
      a69.w = item.w;
    }

    if (item.id == "a80") {
      a80.x = item.x;
      a80.y = item.y;
      a80.h = item.h;
      a80.w = item.w;
    }

    if (item.id == "a81") {
      a81.x = item.x;
      a81.y = item.y;
      a81.h = item.h;
      a81.w = item.w;
    }

    if (item.id == "a82") {
      a82.x = item.x;
      a82.y = item.y;
      a82.h = item.h;
      a82.w = item.w;
    }

    if (item.id == "a83") {
      a83.x = item.x;
      a83.y = item.y;
      a83.h = item.h;
      a83.w = item.w;
    }

    if (item.id == "a84") {
      a84.x = item.x;
      a84.y = item.y;
      a84.h = item.h;
      a84.w = item.w;
    }

    if (item.id == "a85") {
      a85.x = item.x;
      a85.y = item.y;
      a85.h = item.h;
      a85.w = item.w;
    }

    if (item.id == "a100") {
      a100.x = item.x;
      a100.y = item.y;
      a100.h = item.h;
      a100.w = item.w;
    }

    if (item.id == "a101") {
      a101.x = item.x;
      a101.y = item.y;
      a101.h = item.h;
      a101.w = item.w;
    }

    if (item.id == "a102") {
      a102.x = item.x;
      a102.y = item.y;
      a102.h = item.h;
      a102.w = item.w;
    }

    if (item.id == "a103") {
      a103.x = item.x;
      a103.y = item.y;
      a103.h = item.h;
      a103.w = item.w;
    }

    if (item.id == "a104") {
      a104.x = item.x;
      a104.y = item.y;
      a104.h = item.h;
      a104.w = item.w;
    }

    if (item.id == "a105") {
      a105.x = item.x;
      a105.y = item.y;
      a105.h = item.h;
      a105.w = item.w;
    }

    if (item.id == "a106") {
      a106.x = item.x;
      a106.y = item.y;
      a106.h = item.h;
      a106.w = item.w;
    }


    if (item.id == "a107") {
      a107.x = item.x;
      a107.y = item.y;
      a107.h = item.h;
      a107.w = item.w;
    }
    if (item.id == "b34") {
      b34.x = item.x;
      b34.y = item.y;
      b34.h = item.h;
      b34.w = item.w;
    }

    if (item.id == "b35") {
      b35.x = item.x;
      b35.y = item.y;
      b35.h = item.h;
      b35.w = item.w;
    }

    if (item.id == "b36") {
      b36.x = item.x;
      b36.y = item.y;
      b36.h = item.h;
      b36.w = item.w;
    }

    if (item.id == "b61") {
      b61.x = item.x;
      b61.y = item.y;
      b61.h = item.h;
      b61.w = item.w;
    }

    if (item.id == "b70") {
      b70.x = item.x;
      b70.y = item.y;
      b70.h = item.h;
      b70.w = item.w;
    }

    if (item.id == "b71") {
      b71.x = item.x;
      b71.y = item.y;
      b71.h = item.h;
      b71.w = item.w;
    }

    if (item.id == "b72") {
      b72.x = item.x;
      b72.y = item.y;
      b72.h = item.h;
      b72.w = item.w;
    }

    if (item.id == "b73") {
      b73.x = item.x;
      b73.y = item.y;
      b73.h = item.h;
      b73.w = item.w;
    }

    if (item.id == "b74") {
      b74.x = item.x;
      b74.y = item.y;
      b74.h = item.h;
      b74.w = item.w;
    }

    if (item.id == "b76") {
      b76.x = item.x;
      b76.y = item.y;
      b76.h = item.h;
      b76.w = item.w;
    }

    if (item.id == "b77") {
      b77.x = item.x;
      b77.y = item.y;
      b77.h = item.h;
      b77.w = item.w;
    }

    if (item.id == "c11") {
      c11.x = item.x;
      c11.y = item.y;
      c11.h = item.h;
      c11.w = item.w;
    }

    if (item.id == "c14") {
      c14.x = item.x;
      c14.y = item.y;
      c14.h = item.h;
      c14.w = item.w;
    }

    if (item.id == "c15") {
      c15.x = item.x;
      c15.y = item.y;
      c15.h = item.h;
      c15.w = item.w;
    }
    if (item.id == "c19") {
      c19.x = item.x;
      c19.y = item.y;
      c19.h = item.h;
      c19.w = item.w;
    }
    if (item.id == "c21") {
      c21.x = item.x;
      c21.y = item.y;
      c21.h = item.h;
      c21.w = item.w;
    }
    if (item.id == "a108") {
      a108.x = item.x;
      a108.y = item.y;
      a108.h = item.h;
      a108.w = item.w;
    }
    if (item.id == "a109") {
      a109.x = item.x;
      a109.y = item.y;
      a109.h = item.h;
      a109.w = item.w;
    }
    if (item.id == "a110") {
      a110.x = item.x;
      a110.y = item.y;
      a110.h = item.h;
      a110.w = item.w;
    }

    if (item.id == "a114") {
      a114.x = item.x;
      a114.y = item.y;
      a114.h = item.h;
      a114.w = item.w;
    }
    if (item.id == "a115") {
      a115.x = item.x;
      a115.y = item.y;
      a115.h = item.h;
      a115.w = item.w;
    }
    if (item.id == "a118") {
      a118.x = item.x;
      a118.y = item.y;
      a118.h = item.h;
      a118.w = item.w;
    }
    if (item.id == "a119") {
      a119.x = item.x;
      a119.y = item.y;
      a119.h = item.h;
      a119.w = item.w;
    }

    if (item.id == "a120") {
      a120.x = item.x;
      a120.y = item.y;
      a120.h = item.h;
      a120.w = item.w;
    }

    if (item.id == "a121") {
      a121.x = item.x;
      a121.y = item.y;
      a121.h = item.h;
      a121.w = item.w;
    }

    if (item.id == "a122") {
      a122.x = item.x;
      a122.y = item.y;
      a122.h = item.h;
      a122.w = item.w;
    }


    if (item.id == "a123") {
      a123.x = item.x;
      a123.y = item.y;
      a123.h = item.h;
      a123.w = item.w;
    }

    if (item.id == "a124") {
      a124.x = item.x;
      a124.y = item.y;
      a124.h = item.h;
      a124.w = item.w;
    }


    if (item.id == "a125") {
      a125.x = item.x;
      a125.y = item.y;
      a125.h = item.h;
      a125.w = item.w;
    }



    if (item.id == "a126") {
      a126.x = item.x;
      a126.y = item.y;
      a126.h = item.h;
      a126.w = item.w;
    }

    if (item.id == "a127") {
      a127.x = item.x;
      a127.y = item.y;
      a127.h = item.h;
      a127.w = item.w;
    }
    if (item.id == "a128") {
      a128.x = item.x;
      a128.y = item.y;
      a128.h = item.h;
      a128.w = item.w;
    }

    if (item.id == "a129") {
      a129.x = item.x;
      a129.y = item.y;
      a129.h = item.h;
      a129.w = item.w;
    }

    if (item.id == "a112") {
      a112.x = item.x;
      a112.y = item.y;
      a112.h = item.h;
      a112.w = item.w;
    }
    if (item.id == "a111") {
      a111.x = item.x;
      a111.y = item.y;
      a111.h = item.h;
      a111.w = item.w;
    }
    if (item.id == "a113") {
      a113.x = item.x;
      a113.y = item.y;
      a113.h = item.h;
      a113.w = item.w;
    }
    if (item.id == "a117") {
      a117.x = item.x;
      a117.y = item.y;
      a117.h = item.h;
      a117.w = item.w;
    }
    if (item.id == "d11") {
      d11.x = item.x;
      d11.y = item.y;
      d11.h = item.h;
      d11.w = item.w;
    }
    if (item.id == "d12") {
      d12.x = item.x;
      d12.y = item.y;
      d12.h = item.h;
      d12.w = item.w;
    }
    if (item.id == "d13") {
      d13.x = item.x;
      d13.y = item.y;
      d13.h = item.h;
      d13.w = item.w;
    }
    if (item.id == "d14") {
      d14.x = item.x;
      d14.y = item.y;
      d14.h = item.h;
      d14.w = item.w;
    }

    if (item.id == "d15") {
      d15.x = item.x;
      d15.y = item.y;
      d15.h = item.h;
      d15.w = item.w;
    }


    if (item.id == "d16") {
      d16.x = item.x;
      d16.y = item.y;
      d16.h = item.h;
      d16.w = item.w;
    }

  });
});

function reloadPage() {
  window.location.reload();
}

function saveModifiedLayout() {
  const formData = new FormData();
  formData.append('grid_text', JSON.stringify(items));
  formData.append('token', token);
  formData.append('dashboard_name', 'fm_custom');



  fetch('https://reports.lockated.com/api-fm/user-dashboard/save-dashboard/', {
    method: 'POST',
    body: formData,
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      console.log(data);
      console.log(JSON.stringify(items));
      console.log(token);
      alert('Please give 5 second to save Data');
      reloadPage();

    })
    .catch(error => {
      console.error('Error:', error);
    });

}


// --------------------------
let globalVisitorBuildingId = "";

let globalGoodsIn = "";
let globalGoodsOut = "";

let downloadTicketsLink = "";
let downloadEventsFootfallAnalysisLink = "";
let downloadCategoryTicketsLink = "";
let downloadCategoryWiseProactiveTicketsLink = "";
let downloadCACategoryWiseTicketsLink = "";
let downloadCACategoryWiseProactiveTicketsLink = "";
let downloadResolutionTATLink = "";
let downloadResponseTATLink = "";
let downloadIncidentsLink = "";
let downloadCategoryWiseIncidentsLink = "";
let downloadOccupancyLink = "";
let downloadPowerConsumLink = "";
let downloadPowerConsumMonthLink = "";
let downloadWaterConsumBarLink = "";
let downloadDeliveryVisitorLink = "";


let downloadClusterWiseTotalLink = "";
let downloadFunctionWiseTotalLink = "";
let downloadGenderParticipationLink = "";
// ------------------------------------------------------------------------------------------------------------------------
const urlString = window.location.search;
const urlParams = new URLSearchParams(urlString);
const token = urlParams.get("token");
var link_project_name = urlParams.get("site_name");
const link_project_id = urlParams.get("pms_site_id");
const link_society_id = urlParams.get("society_id");
console.log("Token - " + token);

let countSiteDrop = document.getElementById("countSiteDrop");
let countSocietyDrop = document.getElementById("countSocietyDrop");
let numberofRegion = 0;
let numberofSociety = 0;
let idLink;

let xhr_sites = new XMLHttpRequest();
xhr_sites.open("GET", getSites + "?token=" + token, true);
xhr_sites.onload = function () {
  resSites = JSON.parse(this.responseText);
  console.log(resSites);
  updateCompanyDropdown();
};
xhr_sites.send();

let companyDropdown;
function updateCompanyDropdown() {
  companyDropdown = document.getElementById("showCompanies");
  let companyDetails = ``;
  for (let i = 0; i < resSites.mapping.length; i += 1) {
    const companyId = resSites.mapping[i].company_id;
    const companyName = resSites.mapping[i].company_name;
    const checked = i === 0 ? "checked" : "";
    companyDetails +=
      `<li><input type="radio" name="radCompanyDrop" class="dropdown-check-list" value="${companyId}" onclick="updateRegionDropdown(${i})" ${checked}>${companyName}</li><li><hr class="dropdown-divider"></li>`;
  }
  companyDropdown.innerHTML = companyDetails;
  updateRegionDropdown(0);
}
let selectedCompany;
function updateRegionDropdown(selectedCompanyIndex) {
  let regionDropdown = document.getElementById("showRegions");
  let regionDetails = ``;
  selectedCompany = resSites.mapping[selectedCompanyIndex];
  selectedCompanyLogo.src = selectedCompany.logo;
  console.log(selectedCompany);

  regionDetails = `<form id="regionForm">`;

  for (let i = 0; i < Object.keys(selectedCompany.region).length; i++) {
    const regionName = Object.keys(selectedCompany.region)[i];
    const checked = i === 0 ? "checked" : ""; // Check the first region by default
    regionDetails +=
      `<label><input type="checkbox" name="selectedRegions" value="${regionName}" onchange="updateSiteDropdown(${selectedCompanyIndex})" ${checked}> ${regionName}</label><hr class="dropdown-divider">`;
  }

  regionDetails += `</form>`;
  regionDropdown.innerHTML = regionDetails;
  updateSiteDropdown(selectedCompanyIndex);
}
let selectesSites = []
let selectedRegion = [];
let savedLayout;
function updateSiteDropdown(selectedCompanyIndex) {
  let siteDropdown = document.getElementById("showSites");
  let siteDetails = ``;
  const selectedCompany = resSites.mapping[selectedCompanyIndex];
  const selectedRegions = Array.from(document.querySelectorAll('input[name="selectedRegions"]:checked')).map(checkbox => checkbox.value);

  siteDetails = `<li><input id="selectAll" type="checkbox" onclick="getSiteSocietyIdForData(1000)"/>Select All</li><hr class="dropdown-divider">`;

  for (const selectedRegionName of selectedRegions) {
    const selectedRegion = selectedCompany.region[selectedRegionName];
    for (let i = 0; i < selectedRegion.length; i++) {
      const siteId = selectedRegion[i].pms_site_id;
      const societyId = selectedRegion[i].society_id;
      const value = `${siteId}|${societyId}`;
      siteDetails +=
        `<li><input type="checkbox" name="chkSiteDrop" class="dropdown-check-list" value="${value}" onclick="getSiteSocietyIdForData(${i})">` +
        selectedRegion[i].site_name +
        `</input></li><li><hr class="dropdown-divider"></li>`;
    }
  }
  siteDetails += ` <button class="button button2" id="apply" onclick="getResult()" style="background-color: rgb(1, 146, 1); border-radius: 4px; width: 130px; height: 35px; margin-top: 6px; color: white;">Apply</button>`;
  siteDropdown.innerHTML = siteDetails;


  // Select the first site by default
  const firstSiteCheckbox = siteDropdown.querySelector('input[name="chkSiteDrop"]');
  if (firstSiteCheckbox) {
    firstSiteCheckbox.checked = true;
  }

  if (link_project_id == null) {
    getSiteSocietyIdForData(0);
  } else {
    getDetailsIfIdExists(link_project_id, link_project_name, link_society_id);
  }
}


function getSiteSocietyIdForData(i) {

  if (i == 1000) {

    console.log("Hi");
    if (document.getElementById("selectAll").checked) {
      var eleSiteDrop = document.getElementsByName("chkSiteDrop");
      for (var i1 = 0; i1 < eleSiteDrop.length; i1++) {
        if (eleSiteDrop[i1].type == "checkbox") {
          eleSiteDrop[i1].checked = true;

        }
      }
    } else {
      var eleSiteDrop = document.getElementsByName("chkSiteDrop");
      for (var i1 = 0; i1 < eleSiteDrop.length; i1++) {
        if (eleSiteDrop[i1].type == "checkbox") {
          eleSiteDrop[i1].checked = false;
        }
      }
    }

  }

  let markedSiteDrop = "";
  let markedSocietyDrop = "";
  var markedCheckboxSites = document.querySelectorAll(
    'input[name="chkSiteDrop" ]:checked'
  );

  if (markedCheckboxSites.length < numberofRegion) {
    document.getElementById("selectAll").checked = false;
  }
  count = 0
  for (var mChecked of markedCheckboxSites) {
    if (markedSiteDrop == "") {
      var drop_ids = mChecked.value.split("|");

      markedSiteDrop = drop_ids[0];
      markedSocietyDrop = drop_ids[1];
    } else {
      var drop_ids = mChecked.value.split("|");

      markedSiteDrop = markedSiteDrop + "," + drop_ids[0];
      markedSocietyDrop = markedSocietyDrop + "," + drop_ids[1];
      console.log("Select");
      console.log(markedSiteDrop);
      console.log(markedSocietyDrop);
    }

    count = count + 1
  }

  countSiteDrop = markedSiteDrop;
  countSocietyDrop = markedSocietyDrop;
  console.log(markedSiteDrop);
  console.log(markedSocietyDrop);

  // alert(globalSiteId)
  if (markedSiteDrop.split(",").length > 1) {
    console.log("Hiiiiiiiiiiiiii hereeeeeeeeeeeeeee")

    firstSite.innerHTML = "Multiple Sites Selected"

  }
  else {

    console.log(selectedRegion);
    for (let ind = 0; ind < selectedRegion.length; ind += 1) {

      if (markedSiteDrop == selectedRegion[ind].pms_site_id) {
        console.log(selectedRegion[ind].pms_site_id);
        firstSite.innerHTML = selectedRegion[ind].site_name;
      }
      console.log(firstSite.innerHTML);
    }

  }

  var checkList = document.getElementById("list");
  checkList.getElementsByClassName("anchor")[0].onclick = function (evt) {
    if (checkList.classList.contains("visible"))
      checkList.classList.remove("visible");
    else checkList.classList.add("visible");
  };

  console.log(markedSiteDrop.split("|"));

  globalSiteId = countSiteDrop;
  console.log(globalSiteId);

  idLink = "?site_id=" + countSiteDrop + "&society_id=" + countSocietyDrop;
  localStorage.setItem('id_link', idLink);

  console.log(idLink);
  let link_project_names = urlParams.get("site_name");
  if (selectedRegion.length == 20) {
    for (var ind = 0; ind < selectedRegion[ind].length; ind++) {
      if (markedSiteDrop == selectedRegion[ind].pms_site_id) {
        link_project_names = selectedRegion[ind].site_name
        console.log(link_project_names);
      }
    }
  }
  else {
    link_project_names = "Multiple Sites Selected"
  }

  document.getElementById("toggleDaily").href =
    "index.html?token=" +
    token
    // +
    // "&pms_site_id=" +
    // markedSiteDrop +
    // "&site_name=" +
    // link_project_names +
    // "&society_id=" + markedSocietyDrop;
    ;


}


function initLoad() {
  let newIdLink = localStorage.getItem("id_link");
  console.log(newIdLink);
  console.log("hiiii i am hereeeeeeeee");
  let selectedWidgetsList = []
  fetch(`https://reports.lockated.com/api-fm/user-dashboard/get-dashboard/?token=${token}&dashboard_name=fm_custom`)
    .then(response => {
      console.log("hiiii i am hereeeeeeeee nowwwww");
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success === "1" && data.dashboard) {
        console.log(data.dashboard);
        let savedLayout = JSON.parse(data.dashboard);

        if (savedLayout && savedLayout.length > 0) {
          console.log(JSON.parse(data.dashboard));
          for (let widget in savedLayout) {
            selectedWidgetsList.push(savedLayout[widget].id);
            console.log(savedLayout[widget]);
          }
          console.log(savedLayout);
          items = [];
          console.log(items)
          // items = savedLayout;

          // if (selectedWidgetsList.includes("a11")) {
          //   activeTotalAssetsAvailable = 1;
          //   checkTotalAssetsAvailable.style.color = "blue";
          //   items.push(a11);
          // } else {
          //   activeTotalAssetsAvailable = 0;
          //   checkTotalAssetsAvailable.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a11")) {
            activeTotalAssetsAvailable = 1;
            checkTotalAssetsAvailable.checked = true;
            if (!items.includes(a11)) items.push(a11);
          } else {
            activeTotalAssetsAvailable = 0;
            checkTotalAssetsAvailable.checked = false;
            const index = items.indexOf(a11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a12")) {
            activeAssetsInUse = 1;
            checkAssetsInUse.checked = true;
            if (!items.includes(a12)) items.push(a12);
          } else {
            activeAssetsInUse = 0;
            checkAssetsInUse.checked = false;
            const index = items.indexOf(a12);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a13")) {
            activeAssetInBreakdown = 1;
            checkAssetInBreakdown.checked = true;
            if (!items.includes(a13)) items.push(a13);
          } else {
            activeAssetInBreakdown = 0;
            checkAssetInBreakdown.checked = false;
            const index = items.indexOf(a13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a14")) {
            activeCriticalAssetsInBreakdown = 1;
            checkCriticalAssetsInBreakdown.checked = true;
            if (!items.includes(a14)) items.push(a14);
          } else {
            activeCriticalAssetsInBreakdown = 0;
            checkCriticalAssetsInBreakdown.checked = false;
            const index = items.indexOf(a14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a15")) {
            activePPMConductedAssets = 1;
            checkPPMConductedAssets.checked = true;
            if (!items.includes(a15)) items.push(a15);
          } else {
            activePPMConductedAssets = 0;
            checkPPMConductedAssets.checked = false;
            const index = items.indexOf(a15);
            if (index > -1) items.splice(index, 1);
          }


          // if (selectedWidgetsList.includes("a34")) {
          //   activeLTIR = 1;
          //   checkLTIR.style.color = "blue";
          //   items.push(a34);
          // } else {
          //   activeLTIR = 0;
          //   checkLTIR.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a34")) {
            activeLTIR = 1;
            checkLTIR.checked = true;
            if (!items.includes(a34)) items.push(a34);
          } else {
            activeLTIR = 0;
            checkLTIR.checked = false;
            const index = items.indexOf(a34);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a35")) {
          //   activeZeroIncidentDays = 1;
          //   checkZeroIncidentDays.style.color = "blue";
          //   items.push(a35);
          // } else {
          //   activeZeroIncidentDays = 0;
          //   checkZeroIncidentDays.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a35")) {
            activeZeroIncidentDays = 1;
            checkZeroIncidentDays.checked = true;
            if (!items.includes(a35)) items.push(a35);
          } else {
            activeZeroIncidentDays = 0;
            checkZeroIncidentDays.checked = false;
            const index = items.indexOf(a35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a36")) {
            activeIncidentPerSqFt = 1;
            checkIncidentPerSqFt.checked = true;
            if (!items.includes(a36)) items.push(a36);
          } else {
            activeIncidentPerSqFt = 0;
            checkIncidentPerSqFt.checked = false;
            const index = items.indexOf(a36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a37")) {
            activeIncidentNearMissGoodCatch = 1;
            checkIncidentNearMissGoodCatch.checked = true;
            if (!items.includes(a37)) items.push(a37);
          } else {
            activeIncidentNearMissGoodCatch = 0;
            checkIncidentNearMissGoodCatch.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a68")) {
            activeExecutiveEscalation = 1;
            checkExecutiveEscalation.checked = true;
            if (!items.includes(a68)) items.push(a68);
          } else {
            activeExecutiveEscalation = 0;
            checkExecutiveEscalation.checked = false;
            const index = items.indexOf(a68);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a16")) {
            activeTickets = 1;
            checkTickets.checked = true;
            if (!items.includes(a16)) items.push(a16);
          } else {
            activeTickets = 0;
            checkTickets.checked = false;
            const index = items.indexOf(a16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a18")) {
            activeCategoryWiseTickets = 1;
            checkCategoryWiseTickets.checked = true;
            if (!items.includes(a18)) items.push(a18);
          } else {
            activeCategoryWiseTickets = 0;
            checkCategoryWiseTickets.checked = false;
            const index = items.indexOf(a18);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a19")) {
            activeCategoryWiseProactiveTickets = 1;
            checkCategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a19)) items.push(a19);
          } else {
            activeCategoryWiseProactiveTickets = 0;
            checkCategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a69")) {
            activeCustomerSentiments = 1;
            checkCustomerSentiments.checked = true;
            if (!items.includes(a69)) items.push(a69);
          } else {
            activeCustomerSentiments = 0;
            checkCustomerSentiments.checked = false;
            const index = items.indexOf(a69);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a39")) {
            activeCACategoryWiseTickets = 1;
            checkCACategoryWiseTickets.checked = true;
            if (!items.includes(a39)) items.push(a39);
          } else {
            activeCACategoryWiseTickets = 0;
            checkCACategoryWiseTickets.checked = false;
            const index = items.indexOf(a39);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a40")) {
            activeCACategoryWiseProactiveTickets = 1;
            checkCACategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a40)) items.push(a40);
          } else {
            activeCACategoryWiseProactiveTickets = 0;
            checkCACategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a40);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a20")) {
            activeTicketsAgeingMatrix = 1;
            checkTicketsAgeingMatrix.checked = true;
            if (!items.includes(a20)) items.push(a20);
          } else {
            activeTicketsAgeingMatrix = 0;
            checkTicketsAgeingMatrix.checked = false;
            const index = items.indexOf(a20);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a21")) {
            activeResolutionTAT = 1;
            checkResolutionTAT.checked = true;
            if (!items.includes(a21)) items.push(a21);
          } else {
            activeResolutionTAT = 0;
            checkResolutionTAT.checked = false;
            const index = items.indexOf(a21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a22")) {
            activeResponseTAT = 1;
            checkResponseTAT.checked = true;
            if (!items.includes(a22)) items.push(a22);
          } else {
            activeResponseTAT = 0;
            checkResponseTAT.checked = false;
            const index = items.indexOf(a22);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a23")) {
            activeVisitors = 1;
            checkVisitors.checked = true;
            if (!items.includes(a23)) items.push(a23);
          } else {
            activeVisitors = 0;
            checkVisitors.checked = false;
            const index = items.indexOf(a23);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a25")) {
            activePowerConsumption = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a25)) items.push(a25);
          } else {
            activePowerConsumption = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a25);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a118")) {
            activePowerConsumptionTop = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a118)) items.push(a118);
          } else {
            activePowerConsumptionTop = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a118);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a26")) {
            activeWaterConsumption = 1;
            checkWaterConsumption.checked = true;
            if (!items.includes(a26)) items.push(a26);
          } else {
            activeWaterConsumption = 0;
            checkWaterConsumption.checked = false;
            const index = items.indexOf(a26);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a119")) {
            activeWaterConsumptionTop = 1;
            checkWaterConsumptionTop.checked = true;
            if (!items.includes(a119)) items.push(a119);
          } else {
            activeWaterConsumptionTop = 0;
            checkWaterConsumptionTop.checked = false;
            const index = items.indexOf(a119);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a120")) {
            activeTopChecklist = 1;
            checkTopChecklist.checked = true;
            if (!items.includes(a120)) items.push(a120);
          } else {
            activeTopChecklist = 0;
            checkTopChecklist.checked = false;
            const index = items.indexOf(a120);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a121")) {
            activeLTIRTop = 1;
            checkLTIRTop.checked = true;
            if (!items.includes(a121)) items.push(a121);
          } else {
            activeLTIRTop = 0;
            checkLTIRTop.checked = false;
            const index = items.indexOf(a121);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a122")) {
            activeZeroIncidentDaysTop = 1;
            checkZeroIncidentDaysTop.checked = true;
            if (!items.includes(a122)) items.push(a122);
          } else {
            activeZeroIncidentDaysTop = 0;
            checkZeroIncidentDaysTop.checked = false;
            const index = items.indexOf(a122);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a123")) {
            activeIncidentPerSqFtTop = 1;
            checkIncidentPerSqFtTop.checked = true;
            if (!items.includes(a123)) items.push(a123);
          } else {
            activeIncidentPerSqFtTop = 0;
            checkIncidentPerSqFtTop.checked = false;
            const index = items.indexOf(a123);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a124")) {
            activeIncidentNearMissGoodCatchTop = 1;
            checkIncidentNearMissGoodCatchTop.checked = true;
            if (!items.includes(a124)) items.push(a124);
          } else {
            activeIncidentNearMissGoodCatchTop = 0;
            checkIncidentNearMissGoodCatchTop.checked = false;
            const index = items.indexOf(a124);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("d11")) {
            activeInventoryConsumption = 1;
            checkInventoryConsumption.checked = true;
            if (!items.includes(d11)) items.push(d11);
          } else {
            activeInventoryConsumption = 0;
            checkInventoryConsumption.checked = false;
            const index = items.indexOf(d11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d12")) {
            activeInventoryReport = 1;
            checkInventoryReport.checked = true;
            if (!items.includes(d12)) items.push(d12);
          } else {
            activeInventoryReport = 0;
            checkInventoryReport.checked = false;
            const index = items.indexOf(d12);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d13")) {
            activeCurrentStock = 1;
            checkCurrentStock.checked = true;
            if (!items.includes(d13)) items.push(d13);
          } else {
            activeCurrentStock = 0;
            checkCurrentStock.checked = false;
            const index = items.indexOf(d13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d14")) {
            activeInventoryConsumptionGreen = 1;
            checkInventoryConsumptionGreen.checked = true;
            if (!items.includes(d14)) items.push(d14);
          } else {
            activeInventoryConsumptionGreen = 0;
            checkInventoryConsumptionGreen.checked = false;
            const index = items.indexOf(d14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d15")) {
            activeInventoryConsumptionReportGreen = 1;
            checkInventoryConsumptionReportGreen.checked = true;
            if (!items.includes(d15)) items.push(d15);
          } else {
            activeInventoryConsumptionReportGreen = 0;
            checkInventoryConsumptionReportGreen.checked = false;
            const index = items.indexOf(d15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d16")) {
            activeCurrentStockGreen = 1;
            checkCurrentStockGreen.checked = true;
            if (!items.includes(d16)) items.push(d16);
          } else {
            activeCurrentStockGreen = 0;
            checkCurrentStockGreen.checked = false;
            const index = items.indexOf(d16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a27")) {
            activeCarbonEmission = 1;
            checkCarbonEmission.checked = true;
            if (!items.includes(a27)) items.push(a27);
          } else {
            activeCarbonEmission = 0;
            checkCarbonEmission.checked = false;
            const index = items.indexOf(a27);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a63")) {
            activeEnergyIntensity = 1;
            checkEnergyIntensity.checked = true;
            if (!items.includes(a63)) items.push(a63);
          } else {
            activeEnergyIntensity = 0;
            checkEnergyIntensity.checked = false;
            const index = items.indexOf(a63);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a28")) {
            activeFuelConsumption = 1;
            checkFuelConsumption.checked = true;
            items.push(a28);
            if (!items.includes(a28)) items.push(a28);
          } else {
            activeFuelConsumption = 0;
            checkFuelConsumption.checked = false;
            const index = items.indexOf(a28);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a61")) {
            activeFitout = 1;
            checkFitout.checked = true;
            if (!items.includes(a61)) items.push(a61);
          } else {
            activeFitout = 0;
            checkFitout.checked = false;
            const index = items.indexOf(a61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a30")) {
            activeIncidents = 1;
            checkIncidents.checked = true;
            if (!items.includes(a30)) items.push(a30);
          } else {
            activeIncidents = 0;
            checkIncidents.checked = false;
            const index = items.indexOf(a30);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a125")) {
            activeIncidentsTop = 1;
            checkIncidentsTop.checked = true;
            if (!items.includes(a125)) items.push(a125);
          } else {
            activeIncidentsTop = 0;
            checkIncidentsTop.checked = false;
            const index = items.indexOf(a125);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a71")) {
            activeOpenEscalation = 1;
            checkOpenEscalation.checked = true;
            if (!items.includes(a71)) items.push(a71);
          } else {
            activeOpenEscalation = 0;
            checkOpenEscalation.checked = false;
            const index = items.indexOf(a71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a72")) {
            activeCloseEscalation = 1;
            checkCloseEscalation.checked = true;
            if (!items.includes(a72)) items.push(a72);
          } else {
            activeCloseEscalation = 0;
            checkCloseEscalation.checked = false;
            const index = items.indexOf(a72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a73")) {
            activeAvgEscalation = 1;
            checkAvgEscalation.checked = true;
            if (!items.includes(a73)) items.push(a73);
          } else {
            activeAvgEscalation = 0;
            checkAvgEscalation.checked = false;
            const index = items.indexOf(a73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a31")) {
            activeCategoryWiseIncidents = 1;
            checkCategoryWiseIncidents.checked = true;
            if (!items.includes(a31)) items.push(a31);
          } else {
            activeCategoryWiseIncidents = 0;
            checkCategoryWiseIncidents.checked = false;
            const index = items.indexOf(a31);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a128")) {
            activeCategoryWiseIncidentsTop = 1;
            checkCategoryWiseIncidentsTop.checked = true;
            if (!items.includes(a128)) items.push(a128);
          } else {
            activeCategoryWiseIncidentsTop = 0;
            checkCategoryWiseIncidentsTop.checked = false;
            const index = items.indexOf(a128);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a129")) {
            activeEVConsumption = 1;
            checkEVConsumption.checked = true;
            if (!items.includes(a129)) items.push(a129);
          } else {
            activeEVConsumption = 0;
            checkEVConsumption.checked = false;
            const index = items.indexOf(a129);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a32")) {
            activeManPowerAttendance = 1;
            checkManPowerAttendance.checked = true;
            if (!items.includes(a32)) items.push(a32);
          } else {
            activeManPowerAttendance = 0;
            checkManPowerAttendance.checked = false;
            const index = items.indexOf(a32);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a33")) {
            activeEventsFootfallAnalysis = 1;
            checkEventsFootfallAnalysis.checked = true;
            if (!items.includes(a33)) items.push(a33);
          } else {
            activeEventsFootfallAnalysis = 0;
            checkEventsFootfallAnalysis.checked = false;
            const index = items.indexOf(a33);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a38")) {
          //   activeRAC = 1;
          //   checkRAC.style.color = "blue";
          //   items.push(a38);
          // } else {
          //   activeRAC = 0;
          //   checkRAC.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a127")) {
            activeRACTop = 1;
            checkRACTop.checked = true;
            if (!items.includes(a127)) items.push(a127);
          } else {
            activeRACTop = 0;
            checkRACTop.checked = false;
            const index = items.indexOf(a127);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a41")) {
            activeSafeManHours = 1;
            checkSafeManHours.checked = true;
            if (!items.includes(a41)) items.push(a41);
          } else {
            activeSafeManHours = 0;
            checkSafeManHours.checked = false;
            const index = items.indexOf(a41);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a42")) {
            activeAssetsBreakdown = 1;
            checkAssetsBreakdown.checked = true;
            if (!items.includes(a42)) items.push(a42);
          } else {
            activeAssetsBreakdown = 0;
            checkAssetsBreakdown.checked = false;
            const index = items.indexOf(a42);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a44")) {
            activePyramid = 1;
            checkPyramid.checked = true;
            if (!items.includes(a44)) items.push(a44);
          } else {
            activePyramid = 0;
            checkPyramid.checked = false;
            const index = items.indexOf(a44);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a126")) {
            activePyramidTop = 1;
            checkPyramidTop.checked = true;
            if (!items.includes(a126)) items.push(a126);
          } else {
            activePyramidTop = 0;
            checkPyramidTop.checked = false;
            const index = items.indexOf(a126);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a46")) {
            activeRootCause = 1;
            checkRootCause.checked = true;
            if (!items.includes(a46)) items.push(a46);
          } else {
            activeRootCause = 0;
            checkRootCause.checked = false;
            const index = items.indexOf(a46);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a64")) {
            activeBodyInjuryChart = 1;
            checkBodyInjuryChart.checked = true;
            if (!items.includes(a64)) items.push(a64);
          } else {
            activeBodyInjuryChart = 0;
            checkBodyInjuryChart.checked = false;
            const index = items.indexOf(a64);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a67")) {
            activeOccupancy = 1;
            checkOccupancy.checked = true;
            if (!items.includes(a67)) items.push(a67);
          } else {
            activeOccupancy = 0;
            checkOccupancy.checked = false;
            const index = items.indexOf(a67);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a70")) {
            activeCustomAvg = 1;
            checkCustomAvg.checked = true;
            if (!items.includes(a70)) items.push(a70);
          } else {
            activeCustomAvg = 0;
            checkCustomAvg.checked = false;
            const index = items.indexOf(a70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a74")) {
            activeFacilityInfo = 1;
            checkFacilityInfo.checked = true;
            if (!items.includes(a74)) items.push(a74);
          } else {
            activeFacilityInfo = 0;
            checkFacilityInfo.checked = false;
            const index = items.indexOf(a74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a75")) {
            activeCheckList = 1;
            checkCheckList.checked = true;
            if (!items.includes(a75)) items.push(a75);
          } else {
            activeCheckList = 0;
            checkCheckList.checked = false;
            const index = items.indexOf(a75);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a116")) {
          //   activeAssetsBreakdownGraph = 1;
          //   checkAssetsBreakdownGraph.style.color = "blue";
          //   items.push(a116);
          // } else {
          //   activeAssetsBreakdownGraph = 0;
          //   checkAssetsBreakdownGraph.style.color = "black";
          // }


          if (selectedWidgetsList.includes("a117")) {
            activeWaste = 1;
            checkWaste.checked = true;
            if (!items.includes(a117)) items.push(a117);
          } else {
            activeWaste = 0;
            checkWaste.checked = false;
            const index = items.indexOf(a117);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a78")) {
            activeDeliveryVisitors = 1;
            checkDeliveryVisitors.checked = true;
            if (!items.includes(a78)) items.push(a78);
          } else {
            activeDeliveryVisitors = 0;
            checkDeliveryVisitors.checked = false;
            const index = items.indexOf(a78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a79")) {
            activeReactiveProactiveTickets = 1;
            checkReactiveProactiveTickets.checked = true;
            if (!items.includes(a79)) items.push(a79);
          } else {
            activeReactiveProactiveTickets = 0;
            checkReactiveProactiveTickets.checked = false;
            const index = items.indexOf(a79);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a29")) {
            activeFitoutRequest = 1;
            checkFitoutRequest.checked = true;
            if (!items.includes(a29)) items.push(a29);
          } else {
            activeFitoutRequest = 0;
            checkFitoutRequest.checked = false;
            const index = items.indexOf(a29);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a80")) {
            activeRegisterdUser = 1;
            checkRegisterdUser.checked = true;
            if (!items.includes(a80)) items.push(a80);
          } else {
            activeRegisterdUser = 0;
            checkRegisterdUser.checked = false;
            const index = items.indexOf(a80);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a81")) {
            activeTotalDownloads = 1;
            checkTotalDownloads.checked = true;
            if (!items.includes(a81)) items.push(a81);
          } else {
            activeTotalDownloads = 0;
            checkTotalDownloads.checked = false;
            const index = items.indexOf(a81);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a82")) {
            activeZoneWiseEscalation = 1;
            checkZoneWiseEscalation.checked = true;
            if (!items.includes(a82)) items.push(a82);
          } else {
            activeZoneWiseEscalation = 0;
            checkZoneWiseEscalation.checked = false;
            const index = items.indexOf(a82);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a83")) {
            activeOpenAndCloseEscalation = 1;
            checkOpenAndCloseEscalation.checked = true;
            if (!items.includes(a83)) items.push(a83);
          } else {
            activeOpenAndCloseEscalation = 0;
            checkOpenAndCloseEscalation.checked = false;
            const index = items.indexOf(a83);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a84")) {
            activeCategoryWiseEscalation = 1;
            checkCategoryWiseEscalation.checked = true;
            if (!items.includes(a84)) items.push(a84);
          } else {
            activeCategoryWiseEscalation = 0;
            checkCategoryWiseEscalation.checked = false;
            const index = items.indexOf(a84);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a85")) {
            activeServicePartnerEvaluation = 1;
            checkServicePartnerEvaluation.checked = true;
            if (!items.includes(a85)) items.push(a85);
          } else {
            activeServicePartnerEvaluation = 0;
            checkServicePartnerEvaluation.checked = false;
            const index = items.indexOf(a85);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a100")) {
            activeClusterStats = 1;
            checkClusterStats.checked = true;
            if (!items.includes(a100)) items.push(a100);
          } else {
            activeClusterStats = 0;
            checkClusterStats.checked = false;
            const index = items.indexOf(a100);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a101")) {
            activeFunctionWise = 1;
            checkFunctionWise.checked = true;
            if (!items.includes(a101)) items.push(a101);
          } else {
            activeFunctionWise = 0;
            checkFunctionWise.checked = false;
            const index = items.indexOf(a101);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a102")) {
            activeGenderParticipation = 1;
            checkGenderParticipation.checked = true;
            if (!items.includes(a102)) items.push(a102);
          } else {
            activeGenderParticipation = 0;
            checkGenderParticipation.checked = false;
            const index = items.indexOf(a102);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a103")) {
            activeTrendsOverMonthSites = 1;
            checkTrendsOverMonthSites.checked = true;
            if (!items.includes(a103)) items.push(a103);
          } else {
            activeTrendsOverMonthSites = 0;
            checkTrendsOverMonthSites.checked = false;
            const index = items.indexOf(a103);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a48")) {
            activeGoodsIn = 1;
            checkGoodsIn.checked = true;
            if (!items.includes(a48)) items.push(a48);
          } else {
            activeGoodsIn = 0;
            checkGoodsIn.checked = false;
            const index = items.indexOf(a48);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a49")) {
            activeGoodsOut = 1;
            checkGoodsOut.checked = true;
            if (!items.includes(a49)) items.push(a49);
          } else {
            activeGoodsOut = 0;
            checkGoodsOut.checked = false;
            const index = items.indexOf(a49);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a59")) {
            activeGoodsInwards = 1;
            checkGoodsInwards.checked = true;
            if (!items.includes(a59)) items.push(a59);
          } else {
            activeGoodsInwards = 0;
            checkGoodsInwards.checked = false;
            const index = items.indexOf(a59);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a60")) {
            activeGoodsOutwards = 1;
            checkGoodsOutwards.checked = true;
            if (!items.includes(a60)) items.push(a60);
          } else {
            activeGoodsOutwards = 0;
            checkGoodsOutwards.checked = false;
            const index = items.indexOf(a60);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a104")) {
            activeTotalVisitorsII = 1;
            checkTotalVisitorsII.checked = true;
            if (!items.includes(a104)) items.push(a104);
          } else {
            activeTotalVisitorsII = 0;
            checkTotalVisitorsII.checked = false;
            const index = items.indexOf(a104);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a111")) {
            activeTotalStaff = 1;
            checkTotalStaff.checked = true;
            if (!items.includes(a111)) items.push(a111);
          } else {
            activeTotalStaff = 0;
            checkTotalStaff.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a112")) {
            activeStaffIn = 1;
            checkStaffIn.checked = true;
            if (!items.includes(a112)) items.push(a112);
          } else {
            activeStaffIn = 0;
            checkStaffIn.checked = false;
            const index = items.indexOf(a112);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a113")) {
            activeStaffOut = 1;
            checkStaffOut.checked = true;
            if (!items.includes(a113)) items.push(a113);
          } else {
            activeStaffOut = 0;
            checkStaffOut.checked = false;
            const index = items.indexOf(a113);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a106")) {
            activeExpectedVisitors = 1;
            checkExpectedVisitors.checked = true;
            if (!items.includes(a106)) items.push(a106);
          } else {
            activeExpectedVisitors = 0;
            checkExpectedVisitors.checked = false;
            const index = items.indexOf(a106);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a107")) {
            activeUnExpectedVisitors = 1;
            checkUnExpectedVisitors.checked = true;
            if (!items.includes(a107)) items.push(a107);
          } else {
            activeUnExpectedVisitors = 0;
            checkUnExpectedVisitors.checked = false;
            const index = items.indexOf(a107);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a105")) {
            activeTotalVisitors = 1;
            checkTotalVisitors.checked = true;
            if (!items.includes(a105)) items.push(a105);
          } else {
            activeTotalVisitors = 0;
            checkTotalVisitors.checked = false;
            const index = items.indexOf(a105);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b70")) {
            activeTotalParking = 1;
            checkTotalParking.checked = true;
            if (!items.includes(b70)) items.push(b70);
          } else {
            activeTotalParking = 0;
            checkTotalParking.checked = false;
            const index = items.indexOf(b70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b71")) {
            activeFreeParking = 1;
            checkFreeParking.checked = true;
            if (!items.includes(b71)) items.push(b71);
          } else {
            activeFreeParking = 0;
            checkFreeParking.checked = false;
            const index = items.indexOf(b71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b72")) {
            activePaidParking = 1;
            checkPaidParking.checked = true;
            if (!items.includes(b72)) items.push(b72);
          } else {
            activePaidParking = 0;
            checkPaidParking.checked = false;
            const index = items.indexOf(b72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b73")) {
            activeOccupiedParking = 1;
            checkOccupiedParking.checked = true;
            if (!items.includes(b73)) items.push(b73);
          } else {
            activeOccupiedParking = 0;
            checkOccupiedParking.checked = false;
            const index = items.indexOf(b73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b74")) {
            activeVacantParking = 1;
            checkVacantParking.checked = true;
            if (!items.includes(b74)) items.push(b74);
          } else {
            activeVacantParking = 0;
            checkVacantParking.checked = false;
            const index = items.indexOf(b74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b76")) {
            activePermitSite = 1;
            checkPermitSite.checked = true;
            if (!items.includes(b76)) items.push(b76);

          } else {
            activePermitSite = 0;
            checkPermitSite.checked = false;
            const index = items.indexOf(b76);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("b77")) {
            activePermits = 1;
            checkPermits.checked = true;
            if (!items.includes(b77)) items.push(b77);

          } else {
            activePermits = 0;
            checkPermits.checked = false;
            const index = items.indexOf(b77);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b61")) {
            activeInventory = 1;
            checkInventory.checked = true;
            if (!items.includes(b61)) items.push(b61);

          } else {
            activeInventory = 0;
            checkInventory.checked = false;
            const index = items.indexOf(b61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b34")) {
            activeTotalAmount = 1;
            checkTotalAmount.checked = true;
            if (!items.includes(b34)) items.push(b34);
          } else {
            activeTotalAmount = 0;
            checkTotalAmount.checked = false;
            const index = items.indexOf(b34);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b35")) {
            activeTotalReceived = 1;
            checkTotalReceived.checked = true;
            if (!items.includes(b35)) items.push(b35);
          } else {
            activeTotalReceived = 0;
            checkTotalReceived.checked = false;
            const index = items.indexOf(b35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b36")) {
            activeTotalOutstanding = 1;
            checkTotalOutstanding.checked = true;
            if (!items.includes(b36)) items.push(b36);
          } else {
            activeTotalOutstanding = 0;
            checkTotalOutstanding.checked = false;
            const index = items.indexOf(b36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b78")) {
            activeTotalOutStandingAmount = 1;
            checkTotalOutstandingAmount.checked = true;
            if (!items.includes(b78)) items.push(b78);
          } else {
            activeTotalOutStandingAmount = 0;
            checkTotalOutstandingAmount.checked = false;
            const index = items.indexOf(b78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c11")) {
            activeDailyStepCount = 1;
            checkDailyStepCount.checked = true;
            if (!items.includes(c11)) items.push(c11);
          } else {
            activeDailyStepCount = 0;
            checkDailyStepCount.checked = false;
            const index = items.indexOf(c11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c14")) {
            activeDepartmentStats = 1;
            checkDepartmentStats.checked = true;
            if (!items.includes(c14)) items.push(c14);
          } else {
            activeDepartmentStats = 0;
            checkDepartmentStats.checked = false;
            const index = items.indexOf(c14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c15")) {
            activeEmpParticipationStats = 1;
            checkEmpParticipationStats.checked = true;
            if (!items.includes(c15)) items.push(c15);
          } else {
            activeEmpParticipationStats = 0;
            checkEmpParticipationStats.checked = false;
            const index = items.indexOf(c15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c19")) {
            activeCommLeaderboard = 1;
            checkCommLeaderboard.checked = true;
            if (!items.includes(c19)) items.push(c19);
          } else {
            activeCommLeaderboard = 0;
            checkCommLeaderboard.checked = false;
            const index = items.indexOf(c19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c21")) {
            activeCommLeaderboardFemale = 1;
            checkCommLeaderboardFemale.checked = true;
            if (!items.includes(c21)) items.push(c21);
          } else {
            activeCommLeaderboardFemale = 0;
            checkCommLeaderboardFemale.checked = false;
            const index = items.indexOf(c21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a108")) {
            activeTotalGatePass = 1;
            checkTotalGatePass.checked = true;
            if (!items.includes(a108)) items.push(a108);
          } else {
            activeTotalGatePass = 0;
            checkTotalGatePass.checked = false;
            const index = items.indexOf(a108);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a109")) {
            activeReturnablePass = 1;
            checkReturnablePass.checked = true;
            if (!items.includes(a109)) items.push(a109);
          } else {
            activeReturnablePass = 0;
            checkReturnablePass.checked = false;
            const index = items.indexOf(a109);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a110")) {
            activeNonReturnablePass = 1;
            checkNonReturnablePass.checked = true;
            if (!items.includes(a110)) items.push(a110);
          } else {
            activeNonReturnablePass = 0;
            checkNonReturnablePass.checked = false;
            const index = items.indexOf(a110);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a114")) {
            activeTechnicalChecklist = 1;
            checkTechnicalChecklist.checked = true;
            if (!items.includes(a114)) items.push(a114);
          } else {
            activeTechnicalChecklist = 0;
            checkTechnicalChecklist.checked = false;
            const index = items.indexOf(a114);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a115")) {
            activeNonTechnicalChecklist = 1;
            checkNonTechnicalChecklist.checked = true;
            if (!items.includes(a115)) items.push(a115);
          } else {
            activeNonTechnicalChecklist = 0;
            checkNonTechnicalChecklist.checked = false;
            const index = items.indexOf(a115);
            if (index > -1) items.splice(index, 1);
          }
          console.log("hiiii i am hereeeeeeeee nowwww again");
          idLink = newIdLink;
          grid.load(savedLayout);
          loadDashboardData("custom", startDate.value, endDate.value);

        } else {
          grid.load(items);
          loadDashboardData("custom", startDate.value, endDate.value);
        }
      } else {
        grid.load(items);
        loadDashboardData("custom", startDate.value, endDate.value);
      }
    })
    .catch(error => {
      console.error('Error:', error);

    });
}

initLoad();



// // site Apply Filter
function applySites() {
  let selectedWidgetsList = []
  fetch(`https://reports.lockated.com/api-fm/user-dashboard/get-dashboard/?token=${token}&dashboard_name=fm_custom`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success === "1" && data.dashboard) {
        console.log(data.dashboard);
        let savedLayout = JSON.parse(data.dashboard);

        if (savedLayout && savedLayout.length > 0) {
          console.log(JSON.parse(data.dashboard));
          for (let widget in savedLayout) {
            selectedWidgetsList.push(savedLayout[widget].id);
            console.log(savedLayout[widget]);
          }
          console.log(savedLayout);
          items = [];
          console.log(items)
          // items = savedLayout;

          // if (selectedWidgetsList.includes("a11")) {
          //   activeTotalAssetsAvailable = 1;
          //   checkTotalAssetsAvailable.style.color = "blue";
          //   items.push(a11);
          // } else {
          //   activeTotalAssetsAvailable = 0;
          //   checkTotalAssetsAvailable.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a11")) {
            activeTotalAssetsAvailable = 1;
            checkTotalAssetsAvailable.checked = true;
            if (!items.includes(a11)) items.push(a11);
          } else {
            activeTotalAssetsAvailable = 0;
            checkTotalAssetsAvailable.checked = false;
            const index = items.indexOf(a11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a12")) {
            activeAssetsInUse = 1;
            checkAssetsInUse.checked = true;
            if (!items.includes(a12)) items.push(a12);
          } else {
            activeAssetsInUse = 0;
            checkAssetsInUse.checked = false;
            const index = items.indexOf(a12);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a13")) {
            activeAssetInBreakdown = 1;
            checkAssetInBreakdown.checked = true;
            if (!items.includes(a13)) items.push(a13);
          } else {
            activeAssetInBreakdown = 0;
            checkAssetInBreakdown.checked = false;
            const index = items.indexOf(a13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a14")) {
            activeCriticalAssetsInBreakdown = 1;
            checkCriticalAssetsInBreakdown.checked = true;
            if (!items.includes(a14)) items.push(a14);
          } else {
            activeCriticalAssetsInBreakdown = 0;
            checkCriticalAssetsInBreakdown.checked = false;
            const index = items.indexOf(a14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a15")) {
            activePPMConductedAssets = 1;
            checkPPMConductedAssets.checked = true;
            if (!items.includes(a15)) items.push(a15);
          } else {
            activePPMConductedAssets = 0;
            checkPPMConductedAssets.checked = false;
            const index = items.indexOf(a15);
            if (index > -1) items.splice(index, 1);
          }


          // if (selectedWidgetsList.includes("a34")) {
          //   activeLTIR = 1;
          //   checkLTIR.style.color = "blue";
          //   items.push(a34);
          // } else {
          //   activeLTIR = 0;
          //   checkLTIR.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a34")) {
            activeLTIR = 1;
            checkLTIR.checked = true;
            if (!items.includes(a34)) items.push(a34);
          } else {
            activeLTIR = 0;
            checkLTIR.checked = false;
            const index = items.indexOf(a34);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a35")) {
          //   activeZeroIncidentDays = 1;
          //   checkZeroIncidentDays.style.color = "blue";
          //   items.push(a35);
          // } else {
          //   activeZeroIncidentDays = 0;
          //   checkZeroIncidentDays.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a35")) {
            activeZeroIncidentDays = 1;
            checkZeroIncidentDays.checked = true;
            if (!items.includes(a35)) items.push(a35);
          } else {
            activeZeroIncidentDays = 0;
            checkZeroIncidentDays.checked = false;
            const index = items.indexOf(a35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a36")) {
            activeIncidentPerSqFt = 1;
            checkIncidentPerSqFt.checked = true;
            if (!items.includes(a36)) items.push(a36);
          } else {
            activeIncidentPerSqFt = 0;
            checkIncidentPerSqFt.checked = false;
            const index = items.indexOf(a36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a37")) {
            activeIncidentNearMissGoodCatch = 1;
            checkIncidentNearMissGoodCatch.checked = true;
            if (!items.includes(a37)) items.push(a37);
          } else {
            activeIncidentNearMissGoodCatch = 0;
            checkIncidentNearMissGoodCatch.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a68")) {
            activeExecutiveEscalation = 1;
            checkExecutiveEscalation.checked = true;
            if (!items.includes(a68)) items.push(a68);
          } else {
            activeExecutiveEscalation = 0;
            checkExecutiveEscalation.checked = false;
            const index = items.indexOf(a68);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a16")) {
            activeTickets = 1;
            checkTickets.checked = true;
            if (!items.includes(a16)) items.push(a16);
          } else {
            activeTickets = 0;
            checkTickets.checked = false;
            const index = items.indexOf(a16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a18")) {
            activeCategoryWiseTickets = 1;
            checkCategoryWiseTickets.checked = true;
            if (!items.includes(a18)) items.push(a18);
          } else {
            activeCategoryWiseTickets = 0;
            checkCategoryWiseTickets.checked = false;
            const index = items.indexOf(a18);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a19")) {
            activeCategoryWiseProactiveTickets = 1;
            checkCategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a19)) items.push(a19);
          } else {
            activeCategoryWiseProactiveTickets = 0;
            checkCategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a69")) {
            activeCustomerSentiments = 1;
            checkCustomerSentiments.checked = true;
            if (!items.includes(a69)) items.push(a69);
          } else {
            activeCustomerSentiments = 0;
            checkCustomerSentiments.checked = false;
            const index = items.indexOf(a69);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a39")) {
            activeCACategoryWiseTickets = 1;
            checkCACategoryWiseTickets.checked = true;
            if (!items.includes(a39)) items.push(a39);
          } else {
            activeCACategoryWiseTickets = 0;
            checkCACategoryWiseTickets.checked = false;
            const index = items.indexOf(a39);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a40")) {
            activeCACategoryWiseProactiveTickets = 1;
            checkCACategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a40)) items.push(a40);
          } else {
            activeCACategoryWiseProactiveTickets = 0;
            checkCACategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a40);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a20")) {
            activeTicketsAgeingMatrix = 1;
            checkTicketsAgeingMatrix.checked = true;
            if (!items.includes(a20)) items.push(a20);
          } else {
            activeTicketsAgeingMatrix = 0;
            checkTicketsAgeingMatrix.checked = false;
            const index = items.indexOf(a20);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a21")) {
            activeResolutionTAT = 1;
            checkResolutionTAT.checked = true;
            if (!items.includes(a21)) items.push(a21);
          } else {
            activeResolutionTAT = 0;
            checkResolutionTAT.checked = false;
            const index = items.indexOf(a21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a22")) {
            activeResponseTAT = 1;
            checkResponseTAT.checked = true;
            if (!items.includes(a22)) items.push(a22);
          } else {
            activeResponseTAT = 0;
            checkResponseTAT.checked = false;
            const index = items.indexOf(a22);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a23")) {
            activeVisitors = 1;
            checkVisitors.checked = true;
            if (!items.includes(a23)) items.push(a23);
          } else {
            activeVisitors = 0;
            checkVisitors.checked = false;
            const index = items.indexOf(a23);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a25")) {
            activePowerConsumption = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a25)) items.push(a25);
          } else {
            activePowerConsumption = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a25);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a118")) {
            activePowerConsumptionTop = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a118)) items.push(a118);
          } else {
            activePowerConsumptionTop = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a118);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a26")) {
            activeWaterConsumption = 1;
            checkWaterConsumption.checked = true;
            if (!items.includes(a26)) items.push(a26);
          } else {
            activeWaterConsumption = 0;
            checkWaterConsumption.checked = false;
            const index = items.indexOf(a26);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a119")) {
            activeWaterConsumptionTop = 1;
            checkWaterConsumptionTop.checked = true;
            if (!items.includes(a119)) items.push(a119);
          } else {
            activeWaterConsumptionTop = 0;
            checkWaterConsumptionTop.checked = false;
            const index = items.indexOf(a119);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a120")) {
            activeTopChecklist = 1;
            checkTopChecklist.checked = true;
            if (!items.includes(a120)) items.push(a120);
          } else {
            activeTopChecklist = 0;
            checkTopChecklist.checked = false;
            const index = items.indexOf(a120);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a121")) {
            activeLTIRTop = 1;
            checkLTIRTop.checked = true;
            if (!items.includes(a121)) items.push(a121);
          } else {
            activeLTIRTop = 0;
            checkLTIRTop.checked = false;
            const index = items.indexOf(a121);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a122")) {
            activeZeroIncidentDaysTop = 1;
            checkZeroIncidentDaysTop.checked = true;
            if (!items.includes(a122)) items.push(a122);
          } else {
            activeZeroIncidentDaysTop = 0;
            checkZeroIncidentDaysTop.checked = false;
            const index = items.indexOf(a122);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a123")) {
            activeIncidentPerSqFtTop = 1;
            checkIncidentPerSqFtTop.checked = true;
            if (!items.includes(a123)) items.push(a123);
          } else {
            activeIncidentPerSqFtTop = 0;
            checkIncidentPerSqFtTop.checked = false;
            const index = items.indexOf(a123);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a124")) {
            activeIncidentNearMissGoodCatchTop = 1;
            checkIncidentNearMissGoodCatchTop.checked = true;
            if (!items.includes(a124)) items.push(a124);
          } else {
            activeIncidentNearMissGoodCatchTop = 0;
            checkIncidentNearMissGoodCatchTop.checked = false;
            const index = items.indexOf(a124);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("d11")) {
            activeInventoryConsumption = 1;
            checkInventoryConsumption.checked = true;
            if (!items.includes(d11)) items.push(d11);
          } else {
            activeInventoryConsumption = 0;
            checkInventoryConsumption.checked = false;
            const index = items.indexOf(d11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d12")) {
            activeInventoryReport = 1;
            checkInventoryReport.checked = true;
            if (!items.includes(d12)) items.push(d12);
          } else {
            activeInventoryReport = 0;
            checkInventoryReport.checked = false;
            const index = items.indexOf(d12);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d13")) {
            activeCurrentStock = 1;
            checkCurrentStock.checked = true;
            if (!items.includes(d13)) items.push(d13);
          } else {
            activeCurrentStock = 0;
            checkCurrentStock.checked = false;
            const index = items.indexOf(d13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d14")) {
            activeInventoryConsumptionGreen = 1;
            checkInventoryConsumptionGreen.checked = true;
            if (!items.includes(d14)) items.push(d14);
          } else {
            activeInventoryConsumptionGreen = 0;
            checkInventoryConsumptionGreen.checked = false;
            const index = items.indexOf(d14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d15")) {
            activeInventoryConsumptionReportGreen = 1;
            checkInventoryConsumptionReportGreen.checked = true;
            if (!items.includes(d15)) items.push(d15);
          } else {
            activeInventoryConsumptionReportGreen = 0;
            checkInventoryConsumptionReportGreen.checked = false;
            const index = items.indexOf(d15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d16")) {
            activeCurrentStockGreen = 1;
            checkCurrentStockGreen.checked = true;
            if (!items.includes(d16)) items.push(d16);
          } else {
            activeCurrentStockGreen = 0;
            checkCurrentStockGreen.checked = false;
            const index = items.indexOf(d16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a27")) {
            activeCarbonEmission = 1;
            checkCarbonEmission.checked = true;
            if (!items.includes(a27)) items.push(a27);
          } else {
            activeCarbonEmission = 0;
            checkCarbonEmission.checked = false;
            const index = items.indexOf(a27);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a63")) {
            activeEnergyIntensity = 1;
            checkEnergyIntensity.checked = true;
            if (!items.includes(a63)) items.push(a63);
          } else {
            activeEnergyIntensity = 0;
            checkEnergyIntensity.checked = false;
            const index = items.indexOf(a63);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a28")) {
            activeFuelConsumption = 1;
            checkFuelConsumption.checked = true;
            items.push(a28);
            if (!items.includes(a28)) items.push(a28);
          } else {
            activeFuelConsumption = 0;
            checkFuelConsumption.checked = false;
            const index = items.indexOf(a28);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a61")) {
            activeFitout = 1;
            checkFitout.checked = true;
            if (!items.includes(a61)) items.push(a61);
          } else {
            activeFitout = 0;
            checkFitout.checked = false;
            const index = items.indexOf(a61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a30")) {
            activeIncidents = 1;
            checkIncidents.checked = true;
            if (!items.includes(a30)) items.push(a30);
          } else {
            activeIncidents = 0;
            checkIncidents.checked = false;
            const index = items.indexOf(a30);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a125")) {
            activeIncidentsTop = 1;
            checkIncidentsTop.checked = true;
            if (!items.includes(a125)) items.push(a125);
          } else {
            activeIncidentsTop = 0;
            checkIncidentsTop.checked = false;
            const index = items.indexOf(a125);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a71")) {
            activeOpenEscalation = 1;
            checkOpenEscalation.checked = true;
            if (!items.includes(a71)) items.push(a71);
          } else {
            activeOpenEscalation = 0;
            checkOpenEscalation.checked = false;
            const index = items.indexOf(a71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a72")) {
            activeCloseEscalation = 1;
            checkCloseEscalation.checked = true;
            if (!items.includes(a72)) items.push(a72);
          } else {
            activeCloseEscalation = 0;
            checkCloseEscalation.checked = false;
            const index = items.indexOf(a72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a73")) {
            activeAvgEscalation = 1;
            checkAvgEscalation.checked = true;
            if (!items.includes(a73)) items.push(a73);
          } else {
            activeAvgEscalation = 0;
            checkAvgEscalation.checked = false;
            const index = items.indexOf(a73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a31")) {
            activeCategoryWiseIncidents = 1;
            checkCategoryWiseIncidents.checked = true;
            if (!items.includes(a31)) items.push(a31);
          } else {
            activeCategoryWiseIncidents = 0;
            checkCategoryWiseIncidents.checked = false;
            const index = items.indexOf(a31);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a128")) {
            activeCategoryWiseIncidentsTop = 1;
            checkCategoryWiseIncidentsTop.checked = true;
            if (!items.includes(a128)) items.push(a128);
          } else {
            activeCategoryWiseIncidentsTop = 0;
            checkCategoryWiseIncidentsTop.checked = false;
            const index = items.indexOf(a128);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a129")) {
            activeEVConsumption = 1;
            checkEVConsumption.checked = true;
            if (!items.includes(a129)) items.push(a129);
          } else {
            activeEVConsumption = 0;
            checkEVConsumption.checked = false;
            const index = items.indexOf(a129);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a32")) {
            activeManPowerAttendance = 1;
            checkManPowerAttendance.checked = true;
            if (!items.includes(a32)) items.push(a32);
          } else {
            activeManPowerAttendance = 0;
            checkManPowerAttendance.checked = false;
            const index = items.indexOf(a32);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a33")) {
            activeEventsFootfallAnalysis = 1;
            checkEventsFootfallAnalysis.checked = true;
            if (!items.includes(a33)) items.push(a33);
          } else {
            activeEventsFootfallAnalysis = 0;
            checkEventsFootfallAnalysis.checked = false;
            const index = items.indexOf(a33);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a38")) {
          //   activeRAC = 1;
          //   checkRAC.style.color = "blue";
          //   items.push(a38);
          // } else {
          //   activeRAC = 0;
          //   checkRAC.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a127")) {
            activeRACTop = 1;
            checkRACTop.checked = true;
            if (!items.includes(a127)) items.push(a127);
          } else {
            activeRACTop = 0;
            checkRACTop.checked = false;
            const index = items.indexOf(a127);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a41")) {
            activeSafeManHours = 1;
            checkSafeManHours.checked = true;
            if (!items.includes(a41)) items.push(a41);
          } else {
            activeSafeManHours = 0;
            checkSafeManHours.checked = false;
            const index = items.indexOf(a41);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a42")) {
            activeAssetsBreakdown = 1;
            checkAssetsBreakdown.checked = true;
            if (!items.includes(a42)) items.push(a42);
          } else {
            activeAssetsBreakdown = 0;
            checkAssetsBreakdown.checked = false;
            const index = items.indexOf(a42);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a44")) {
            activePyramid = 1;
            checkPyramid.checked = true;
            if (!items.includes(a44)) items.push(a44);
          } else {
            activePyramid = 0;
            checkPyramid.checked = false;
            const index = items.indexOf(a44);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a126")) {
            activePyramidTop = 1;
            checkPyramidTop.checked = true;
            if (!items.includes(a126)) items.push(a126);
          } else {
            activePyramidTop = 0;
            checkPyramidTop.checked = false;
            const index = items.indexOf(a126);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a46")) {
            activeRootCause = 1;
            checkRootCause.checked = true;
            if (!items.includes(a46)) items.push(a46);
          } else {
            activeRootCause = 0;
            checkRootCause.checked = false;
            const index = items.indexOf(a46);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a64")) {
            activeBodyInjuryChart = 1;
            checkBodyInjuryChart.checked = true;
            if (!items.includes(a64)) items.push(a64);
          } else {
            activeBodyInjuryChart = 0;
            checkBodyInjuryChart.checked = false;
            const index = items.indexOf(a64);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a67")) {
            activeOccupancy = 1;
            checkOccupancy.checked = true;
            if (!items.includes(a67)) items.push(a67);
          } else {
            activeOccupancy = 0;
            checkOccupancy.checked = false;
            const index = items.indexOf(a67);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a70")) {
            activeCustomAvg = 1;
            checkCustomAvg.checked = true;
            if (!items.includes(a70)) items.push(a70);
          } else {
            activeCustomAvg = 0;
            checkCustomAvg.checked = false;
            const index = items.indexOf(a70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a74")) {
            activeFacilityInfo = 1;
            checkFacilityInfo.checked = true;
            if (!items.includes(a74)) items.push(a74);
          } else {
            activeFacilityInfo = 0;
            checkFacilityInfo.checked = false;
            const index = items.indexOf(a74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a75")) {
            activeCheckList = 1;
            checkCheckList.checked = true;
            if (!items.includes(a75)) items.push(a75);
          } else {
            activeCheckList = 0;
            checkCheckList.checked = false;
            const index = items.indexOf(a75);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a116")) {
          //   activeAssetsBreakdownGraph = 1;
          //   checkAssetsBreakdownGraph.style.color = "blue";
          //   items.push(a116);
          // } else {
          //   activeAssetsBreakdownGraph = 0;
          //   checkAssetsBreakdownGraph.style.color = "black";
          // }


          if (selectedWidgetsList.includes("a117")) {
            activeWaste = 1;
            checkWaste.checked = true;
            if (!items.includes(a117)) items.push(a117);
          } else {
            activeWaste = 0;
            checkWaste.checked = false;
            const index = items.indexOf(a117);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a78")) {
            activeDeliveryVisitors = 1;
            checkDeliveryVisitors.checked = true;
            if (!items.includes(a78)) items.push(a78);
          } else {
            activeDeliveryVisitors = 0;
            checkDeliveryVisitors.checked = false;
            const index = items.indexOf(a78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a79")) {
            activeReactiveProactiveTickets = 1;
            checkReactiveProactiveTickets.checked = true;
            if (!items.includes(a79)) items.push(a79);
          } else {
            activeReactiveProactiveTickets = 0;
            checkReactiveProactiveTickets.checked = false;
            const index = items.indexOf(a79);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a29")) {
            activeFitoutRequest = 1;
            checkFitoutRequest.checked = true;
            if (!items.includes(a29)) items.push(a29);
          } else {
            activeFitoutRequest = 0;
            checkFitoutRequest.checked = false;
            const index = items.indexOf(a29);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a80")) {
            activeRegisterdUser = 1;
            checkRegisterdUser.checked = true;
            if (!items.includes(a80)) items.push(a80);
          } else {
            activeRegisterdUser = 0;
            checkRegisterdUser.checked = false;
            const index = items.indexOf(a80);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a81")) {
            activeTotalDownloads = 1;
            checkTotalDownloads.checked = true;
            if (!items.includes(a81)) items.push(a81);
          } else {
            activeTotalDownloads = 0;
            checkTotalDownloads.checked = false;
            const index = items.indexOf(a81);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a82")) {
            activeZoneWiseEscalation = 1;
            checkZoneWiseEscalation.checked = true;
            if (!items.includes(a82)) items.push(a82);
          } else {
            activeZoneWiseEscalation = 0;
            checkZoneWiseEscalation.checked = false;
            const index = items.indexOf(a82);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a83")) {
            activeOpenAndCloseEscalation = 1;
            checkOpenAndCloseEscalation.checked = true;
            if (!items.includes(a83)) items.push(a83);
          } else {
            activeOpenAndCloseEscalation = 0;
            checkOpenAndCloseEscalation.checked = false;
            const index = items.indexOf(a83);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a84")) {
            activeCategoryWiseEscalation = 1;
            checkCategoryWiseEscalation.checked = true;
            if (!items.includes(a84)) items.push(a84);
          } else {
            activeCategoryWiseEscalation = 0;
            checkCategoryWiseEscalation.checked = false;
            const index = items.indexOf(a84);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a85")) {
            activeServicePartnerEvaluation = 1;
            checkServicePartnerEvaluation.checked = true;
            if (!items.includes(a85)) items.push(a85);
          } else {
            activeServicePartnerEvaluation = 0;
            checkServicePartnerEvaluation.checked = false;
            const index = items.indexOf(a85);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a100")) {
            activeClusterStats = 1;
            checkClusterStats.checked = true;
            if (!items.includes(a100)) items.push(a100);
          } else {
            activeClusterStats = 0;
            checkClusterStats.checked = false;
            const index = items.indexOf(a100);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a101")) {
            activeFunctionWise = 1;
            checkFunctionWise.checked = true;
            if (!items.includes(a101)) items.push(a101);
          } else {
            activeFunctionWise = 0;
            checkFunctionWise.checked = false;
            const index = items.indexOf(a101);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a102")) {
            activeGenderParticipation = 1;
            checkGenderParticipation.checked = true;
            if (!items.includes(a102)) items.push(a102);
          } else {
            activeGenderParticipation = 0;
            checkGenderParticipation.checked = false;
            const index = items.indexOf(a102);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a103")) {
            activeTrendsOverMonthSites = 1;
            checkTrendsOverMonthSites.checked = true;
            if (!items.includes(a103)) items.push(a103);
          } else {
            activeTrendsOverMonthSites = 0;
            checkTrendsOverMonthSites.checked = false;
            const index = items.indexOf(a103);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a48")) {
            activeGoodsIn = 1;
            checkGoodsIn.checked = true;
            if (!items.includes(a48)) items.push(a48);
          } else {
            activeGoodsIn = 0;
            checkGoodsIn.checked = false;
            const index = items.indexOf(a48);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a49")) {
            activeGoodsOut = 1;
            checkGoodsOut.checked = true;
            if (!items.includes(a49)) items.push(a49);
          } else {
            activeGoodsOut = 0;
            checkGoodsOut.checked = false;
            const index = items.indexOf(a49);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a59")) {
            activeGoodsInwards = 1;
            checkGoodsInwards.checked = true;
            if (!items.includes(a59)) items.push(a59);
          } else {
            activeGoodsInwards = 0;
            checkGoodsInwards.checked = false;
            const index = items.indexOf(a59);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a60")) {
            activeGoodsOutwards = 1;
            checkGoodsOutwards.checked = true;
            if (!items.includes(a60)) items.push(a60);
          } else {
            activeGoodsOutwards = 0;
            checkGoodsOutwards.checked = false;
            const index = items.indexOf(a60);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a104")) {
            activeTotalVisitorsII = 1;
            checkTotalVisitorsII.checked = true;
            if (!items.includes(a104)) items.push(a104);
          } else {
            activeTotalVisitorsII = 0;
            checkTotalVisitorsII.checked = false;
            const index = items.indexOf(a104);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a111")) {
            activeTotalStaff = 1;
            checkTotalStaff.checked = true;
            if (!items.includes(a111)) items.push(a111);
          } else {
            activeTotalStaff = 0;
            checkTotalStaff.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a112")) {
            activeStaffIn = 1;
            checkStaffIn.checked = true;
            if (!items.includes(a112)) items.push(a112);
          } else {
            activeStaffIn = 0;
            checkStaffIn.checked = false;
            const index = items.indexOf(a112);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a113")) {
            activeStaffOut = 1;
            checkStaffOut.checked = true;
            if (!items.includes(a113)) items.push(a113);
          } else {
            activeStaffOut = 0;
            checkStaffOut.checked = false;
            const index = items.indexOf(a113);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a106")) {
            activeExpectedVisitors = 1;
            checkExpectedVisitors.checked = true;
            if (!items.includes(a106)) items.push(a106);
          } else {
            activeExpectedVisitors = 0;
            checkExpectedVisitors.checked = false;
            const index = items.indexOf(a106);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a107")) {
            activeUnExpectedVisitors = 1;
            checkUnExpectedVisitors.checked = true;
            if (!items.includes(a107)) items.push(a107);
          } else {
            activeUnExpectedVisitors = 0;
            checkUnExpectedVisitors.checked = false;
            const index = items.indexOf(a107);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a105")) {
            activeTotalVisitors = 1;
            checkTotalVisitors.checked = true;
            if (!items.includes(a105)) items.push(a105);
          } else {
            activeTotalVisitors = 0;
            checkTotalVisitors.checked = false;
            const index = items.indexOf(a105);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b70")) {
            activeTotalParking = 1;
            checkTotalParking.checked = true;
            if (!items.includes(b70)) items.push(b70);
          } else {
            activeTotalParking = 0;
            checkTotalParking.checked = false;
            const index = items.indexOf(b70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b71")) {
            activeFreeParking = 1;
            checkFreeParking.checked = true;
            if (!items.includes(b71)) items.push(b71);
          } else {
            activeFreeParking = 0;
            checkFreeParking.checked = false;
            const index = items.indexOf(b71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b72")) {
            activePaidParking = 1;
            checkPaidParking.checked = true;
            if (!items.includes(b72)) items.push(b72);
          } else {
            activePaidParking = 0;
            checkPaidParking.checked = false;
            const index = items.indexOf(b72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b73")) {
            activeOccupiedParking = 1;
            checkOccupiedParking.checked = true;
            if (!items.includes(b73)) items.push(b73);
          } else {
            activeOccupiedParking = 0;
            checkOccupiedParking.checked = false;
            const index = items.indexOf(b73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b74")) {
            activeVacantParking = 1;
            checkVacantParking.checked = true;
            if (!items.includes(b74)) items.push(b74);
          } else {
            activeVacantParking = 0;
            checkVacantParking.checked = false;
            const index = items.indexOf(b74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b76")) {
            activePermitSite = 1;
            checkPermitSite.checked = true;
            if (!items.includes(b76)) items.push(b76);

          } else {
            activePermitSite = 0;
            checkPermitSite.checked = false;
            const index = items.indexOf(b76);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("b77")) {
            activePermits = 1;
            checkPermits.checked = true;
            if (!items.includes(b77)) items.push(b77);

          } else {
            activePermits = 0;
            checkPermits.checked = false;
            const index = items.indexOf(b77);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b61")) {
            activeInventory = 1;
            checkInventory.checked = true;
            if (!items.includes(b61)) items.push(b61);

          } else {
            activeInventory = 0;
            checkInventory.checked = false;
            const index = items.indexOf(b61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b34")) {
            activeTotalAmount = 1;
            checkTotalAmount.checked = true;
            if (!items.includes(b34)) items.push(b34);
          } else {
            activeTotalAmount = 0;
            checkTotalAmount.checked = false;
            const index = items.indexOf(b34);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b35")) {
            activeTotalReceived = 1;
            checkTotalReceived.checked = true;
            if (!items.includes(b35)) items.push(b35);
          } else {
            activeTotalReceived = 0;
            checkTotalReceived.checked = false;
            const index = items.indexOf(b35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b36")) {
            activeTotalOutstanding = 1;
            checkTotalOutstanding.checked = true;
            if (!items.includes(b36)) items.push(b36);
          } else {
            activeTotalOutstanding = 0;
            checkTotalOutstanding.checked = false;
            const index = items.indexOf(b36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b78")) {
            activeTotalOutStandingAmount = 1;
            checkTotalOutstandingAmount.checked = true;
            if (!items.includes(b78)) items.push(b78);
          } else {
            activeTotalOutStandingAmount = 0;
            checkTotalOutstandingAmount.checked = false;
            const index = items.indexOf(b78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c11")) {
            activeDailyStepCount = 1;
            checkDailyStepCount.checked = true;
            if (!items.includes(c11)) items.push(c11);
          } else {
            activeDailyStepCount = 0;
            checkDailyStepCount.checked = false;
            const index = items.indexOf(c11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c14")) {
            activeDepartmentStats = 1;
            checkDepartmentStats.checked = true;
            if (!items.includes(c14)) items.push(c14);
          } else {
            activeDepartmentStats = 0;
            checkDepartmentStats.checked = false;
            const index = items.indexOf(c14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c15")) {
            activeEmpParticipationStats = 1;
            checkEmpParticipationStats.checked = true;
            if (!items.includes(c15)) items.push(c15);
          } else {
            activeEmpParticipationStats = 0;
            checkEmpParticipationStats.checked = false;
            const index = items.indexOf(c15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c19")) {
            activeCommLeaderboard = 1;
            checkCommLeaderboard.checked = true;
            if (!items.includes(c19)) items.push(c19);
          } else {
            activeCommLeaderboard = 0;
            checkCommLeaderboard.checked = false;
            const index = items.indexOf(c19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c21")) {
            activeCommLeaderboardFemale = 1;
            checkCommLeaderboardFemale.checked = true;
            if (!items.includes(c21)) items.push(c21);
          } else {
            activeCommLeaderboardFemale = 0;
            checkCommLeaderboardFemale.checked = false;
            const index = items.indexOf(c21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a108")) {
            activeTotalGatePass = 1;
            checkTotalGatePass.checked = true;
            if (!items.includes(a108)) items.push(a108);
          } else {
            activeTotalGatePass = 0;
            checkTotalGatePass.checked = false;
            const index = items.indexOf(a108);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a109")) {
            activeReturnablePass = 1;
            checkReturnablePass.checked = true;
            if (!items.includes(a109)) items.push(a109);
          } else {
            activeReturnablePass = 0;
            checkReturnablePass.checked = false;
            const index = items.indexOf(a109);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a110")) {
            activeNonReturnablePass = 1;
            checkNonReturnablePass.checked = true;
            if (!items.includes(a110)) items.push(a110);
          } else {
            activeNonReturnablePass = 0;
            checkNonReturnablePass.checked = false;
            const index = items.indexOf(a110);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a114")) {
            activeTechnicalChecklist = 1;
            checkTechnicalChecklist.checked = true;
            if (!items.includes(a114)) items.push(a114);
          } else {
            activeTechnicalChecklist = 0;
            checkTechnicalChecklist.checked = false;
            const index = items.indexOf(a114);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a115")) {
            activeNonTechnicalChecklist = 1;
            checkNonTechnicalChecklist.checked = true;
            if (!items.includes(a115)) items.push(a115);
          } else {
            activeNonTechnicalChecklist = 0;
            checkNonTechnicalChecklist.checked = false;
            const index = items.indexOf(a115);
            if (index > -1) items.splice(index, 1);
          }
          console.log("hiiii i am hereeeeeeeee nowwww again");
          idLink = newIdLink;
          grid.load(savedLayout);
          loadDashboardData("custom", startDate.value, endDate.value);

        } else {
          grid.load(items);
          loadDashboardData("custom", startDate.value, endDate.value);
        }
      } else {
        grid.load(items);
        loadDashboardData("custom", startDate.value, endDate.value);
      }
    })
    .catch(error => {
      console.error('Error:', error);

    });
}

// let savedLayout;
let multipleSites;
function getDetailsIfIdExists(pro_id, pro_name, link_society_id) {
  markedSiteDrop = pro_id;
  firstSite.innerHTML = pro_name;
  let globalSiteName = firstSite.innerHTML;
  console.log(pro_id)
  idLink = "?site_id=" + pro_id + "&society_id=" + link_society_id;

  document.getElementById("toggleDaily").href =
    "index.html?token=" +
    token
    +
    "&pms_site_id=" +
    pro_id +
    "&site_name=" +
    globalSiteName +
    "&society_id=" + link_society_id;
  ;
  document.getElementById("toggleInventory").href =
    "inventory.html?token=" + token;


  let selectedWidgetsList = []
  fetch(`https://reports.lockated.com/api-fm/user-dashboard/get-dashboard/?token=${token}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success === "1" && data.dashboard) {

        savedLayout = JSON.parse(data.dashboard);

        if (savedLayout && savedLayout.length > 0) {
          console.log(JSON.parse(data.dashboard));
          for (let widget in savedLayout) {
            selectedWidgetsList.push(savedLayout[widget].id);
            console.log(savedLayout[widget]);
          }
          console.log(savedLayout);
          items = [];
          console.log(items)
          // items = savedLayout;

          // if (selectedWidgetsList.includes("a11")) {
          //   activeTotalAssetsAvailable = 1;
          //   checkTotalAssetsAvailable.style.color = "blue";
          //   items.push(a11);
          // } else {
          //   activeTotalAssetsAvailable = 0;
          //   checkTotalAssetsAvailable.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a11")) {
            activeTotalAssetsAvailable = 1;
            checkTotalAssetsAvailable.checked = true;
            if (!items.includes(a11)) items.push(a11);
          } else {
            activeTotalAssetsAvailable = 0;
            checkTotalAssetsAvailable.checked = false;
            const index = items.indexOf(a11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a12")) {
            activeAssetsInUse = 1;
            checkAssetsInUse.checked = true;
            if (!items.includes(a12)) items.push(a12);
          } else {
            activeAssetsInUse = 0;
            checkAssetsInUse.checked = false;
            const index = items.indexOf(a12);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a13")) {
            activeAssetInBreakdown = 1;
            checkAssetInBreakdown.checked = true;
            if (!items.includes(a13)) items.push(a13);
          } else {
            activeAssetInBreakdown = 0;
            checkAssetInBreakdown.checked = false;
            const index = items.indexOf(a13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a14")) {
            activeCriticalAssetsInBreakdown = 1;
            checkCriticalAssetsInBreakdown.checked = true;
            if (!items.includes(a14)) items.push(a14);
          } else {
            activeCriticalAssetsInBreakdown = 0;
            checkCriticalAssetsInBreakdown.checked = false;
            const index = items.indexOf(a14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a15")) {
            activePPMConductedAssets = 1;
            checkPPMConductedAssets.checked = true;
            if (!items.includes(a15)) items.push(a15);
          } else {
            activePPMConductedAssets = 0;
            checkPPMConductedAssets.checked = false;
            const index = items.indexOf(a15);
            if (index > -1) items.splice(index, 1);
          }


          // if (selectedWidgetsList.includes("a34")) {
          //   activeLTIR = 1;
          //   checkLTIR.style.color = "blue";
          //   items.push(a34);
          // } else {
          //   activeLTIR = 0;
          //   checkLTIR.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a34")) {
            activeLTIR = 1;
            checkLTIR.checked = true;
            if (!items.includes(a34)) items.push(a34);
          } else {
            activeLTIR = 0;
            checkLTIR.checked = false;
            const index = items.indexOf(a34);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a35")) {
          //   activeZeroIncidentDays = 1;
          //   checkZeroIncidentDays.style.color = "blue";
          //   items.push(a35);
          // } else {
          //   activeZeroIncidentDays = 0;
          //   checkZeroIncidentDays.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a35")) {
            activeZeroIncidentDays = 1;
            checkZeroIncidentDays.checked = true;
            if (!items.includes(a35)) items.push(a35);
          } else {
            activeZeroIncidentDays = 0;
            checkZeroIncidentDays.checked = false;
            const index = items.indexOf(a35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a36")) {
            activeIncidentPerSqFt = 1;
            checkIncidentPerSqFt.checked = true;
            if (!items.includes(a36)) items.push(a36);
          } else {
            activeIncidentPerSqFt = 0;
            checkIncidentPerSqFt.checked = false;
            const index = items.indexOf(a36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a37")) {
            activeIncidentNearMissGoodCatch = 1;
            checkIncidentNearMissGoodCatch.checked = true;
            if (!items.includes(a37)) items.push(a37);
          } else {
            activeIncidentNearMissGoodCatch = 0;
            checkIncidentNearMissGoodCatch.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a68")) {
            activeExecutiveEscalation = 1;
            checkExecutiveEscalation.checked = true;
            if (!items.includes(a68)) items.push(a68);
          } else {
            activeExecutiveEscalation = 0;
            checkExecutiveEscalation.checked = false;
            const index = items.indexOf(a68);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a16")) {
            activeTickets = 1;
            checkTickets.checked = true;
            if (!items.includes(a16)) items.push(a16);
          } else {
            activeTickets = 0;
            checkTickets.checked = false;
            const index = items.indexOf(a16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a18")) {
            activeCategoryWiseTickets = 1;
            checkCategoryWiseTickets.checked = true;
            if (!items.includes(a18)) items.push(a18);
          } else {
            activeCategoryWiseTickets = 0;
            checkCategoryWiseTickets.checked = false;
            const index = items.indexOf(a18);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a19")) {
            activeCategoryWiseProactiveTickets = 1;
            checkCategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a19)) items.push(a19);
          } else {
            activeCategoryWiseProactiveTickets = 0;
            checkCategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a69")) {
            activeCustomerSentiments = 1;
            checkCustomerSentiments.checked = true;
            if (!items.includes(a69)) items.push(a69);
          } else {
            activeCustomerSentiments = 0;
            checkCustomerSentiments.checked = false;
            const index = items.indexOf(a69);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a39")) {
            activeCACategoryWiseTickets = 1;
            checkCACategoryWiseTickets.checked = true;
            if (!items.includes(a39)) items.push(a39);
          } else {
            activeCACategoryWiseTickets = 0;
            checkCACategoryWiseTickets.checked = false;
            const index = items.indexOf(a39);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a40")) {
            activeCACategoryWiseProactiveTickets = 1;
            checkCACategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a40)) items.push(a40);
          } else {
            activeCACategoryWiseProactiveTickets = 0;
            checkCACategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a40);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a20")) {
            activeTicketsAgeingMatrix = 1;
            checkTicketsAgeingMatrix.checked = true;
            if (!items.includes(a20)) items.push(a20);
          } else {
            activeTicketsAgeingMatrix = 0;
            checkTicketsAgeingMatrix.checked = false;
            const index = items.indexOf(a20);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a21")) {
            activeResolutionTAT = 1;
            checkResolutionTAT.checked = true;
            if (!items.includes(a21)) items.push(a21);
          } else {
            activeResolutionTAT = 0;
            checkResolutionTAT.checked = false;
            const index = items.indexOf(a21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a22")) {
            activeResponseTAT = 1;
            checkResponseTAT.checked = true;
            if (!items.includes(a22)) items.push(a22);
          } else {
            activeResponseTAT = 0;
            checkResponseTAT.checked = false;
            const index = items.indexOf(a22);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a23")) {
            activeVisitors = 1;
            checkVisitors.checked = true;
            if (!items.includes(a23)) items.push(a23);
          } else {
            activeVisitors = 0;
            checkVisitors.checked = false;
            const index = items.indexOf(a23);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a25")) {
            activePowerConsumption = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a25)) items.push(a25);
          } else {
            activePowerConsumption = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a25);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a118")) {
            activePowerConsumptionTop = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a118)) items.push(a118);
          } else {
            activePowerConsumptionTop = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a118);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a26")) {
            activeWaterConsumption = 1;
            checkWaterConsumption.checked = true;
            if (!items.includes(a26)) items.push(a26);
          } else {
            activeWaterConsumption = 0;
            checkWaterConsumption.checked = false;
            const index = items.indexOf(a26);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a119")) {
            activeWaterConsumptionTop = 1;
            checkWaterConsumptionTop.checked = true;
            if (!items.includes(a119)) items.push(a119);
          } else {
            activeWaterConsumptionTop = 0;
            checkWaterConsumptionTop.checked = false;
            const index = items.indexOf(a119);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a120")) {
            activeTopChecklist = 1;
            checkTopChecklist.checked = true;
            if (!items.includes(a120)) items.push(a120);
          } else {
            activeTopChecklist = 0;
            checkTopChecklist.checked = false;
            const index = items.indexOf(a120);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a121")) {
            activeLTIRTop = 1;
            checkLTIRTop.checked = true;
            if (!items.includes(a121)) items.push(a121);
          } else {
            activeLTIRTop = 0;
            checkLTIRTop.checked = false;
            const index = items.indexOf(a121);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a122")) {
            activeZeroIncidentDaysTop = 1;
            checkZeroIncidentDaysTop.checked = true;
            if (!items.includes(a122)) items.push(a122);
          } else {
            activeZeroIncidentDaysTop = 0;
            checkZeroIncidentDaysTop.checked = false;
            const index = items.indexOf(a122);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a123")) {
            activeIncidentPerSqFtTop = 1;
            checkIncidentPerSqFtTop.checked = true;
            if (!items.includes(a123)) items.push(a123);
          } else {
            activeIncidentPerSqFtTop = 0;
            checkIncidentPerSqFtTop.checked = false;
            const index = items.indexOf(a123);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a124")) {
            activeIncidentNearMissGoodCatchTop = 1;
            checkIncidentNearMissGoodCatchTop.checked = true;
            if (!items.includes(a124)) items.push(a124);
          } else {
            activeIncidentNearMissGoodCatchTop = 0;
            checkIncidentNearMissGoodCatchTop.checked = false;
            const index = items.indexOf(a124);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("d11")) {
            activeInventoryConsumption = 1;
            checkInventoryConsumption.checked = true;
            if (!items.includes(d11)) items.push(d11);
          } else {
            activeInventoryConsumption = 0;
            checkInventoryConsumption.checked = false;
            const index = items.indexOf(d11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d12")) {
            activeInventoryReport = 1;
            checkInventoryReport.checked = true;
            if (!items.includes(d12)) items.push(d12);
          } else {
            activeInventoryReport = 0;
            checkInventoryReport.checked = false;
            const index = items.indexOf(d12);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d13")) {
            activeCurrentStock = 1;
            checkCurrentStock.checked = true;
            if (!items.includes(d13)) items.push(d13);
          } else {
            activeCurrentStock = 0;
            checkCurrentStock.checked = false;
            const index = items.indexOf(d13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d14")) {
            activeInventoryConsumptionGreen = 1;
            checkInventoryConsumptionGreen.checked = true;
            if (!items.includes(d14)) items.push(d14);
          } else {
            activeInventoryConsumptionGreen = 0;
            checkInventoryConsumptionGreen.checked = false;
            const index = items.indexOf(d14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d15")) {
            activeInventoryConsumptionReportGreen = 1;
            checkInventoryConsumptionReportGreen.checked = true;
            if (!items.includes(d15)) items.push(d15);
          } else {
            activeInventoryConsumptionReportGreen = 0;
            checkInventoryConsumptionReportGreen.checked = false;
            const index = items.indexOf(d15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d16")) {
            activeCurrentStockGreen = 1;
            checkCurrentStockGreen.checked = true;
            if (!items.includes(d16)) items.push(d16);
          } else {
            activeCurrentStockGreen = 0;
            checkCurrentStockGreen.checked = false;
            const index = items.indexOf(d16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a27")) {
            activeCarbonEmission = 1;
            checkCarbonEmission.checked = true;
            if (!items.includes(a27)) items.push(a27);
          } else {
            activeCarbonEmission = 0;
            checkCarbonEmission.checked = false;
            const index = items.indexOf(a27);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a63")) {
            activeEnergyIntensity = 1;
            checkEnergyIntensity.checked = true;
            if (!items.includes(a63)) items.push(a63);
          } else {
            activeEnergyIntensity = 0;
            checkEnergyIntensity.checked = false;
            const index = items.indexOf(a63);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a28")) {
            activeFuelConsumption = 1;
            checkFuelConsumption.checked = true;
            items.push(a28);
            if (!items.includes(a28)) items.push(a28);
          } else {
            activeFuelConsumption = 0;
            checkFuelConsumption.checked = false;
            const index = items.indexOf(a28);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a61")) {
            activeFitout = 1;
            checkFitout.checked = true;
            if (!items.includes(a61)) items.push(a61);
          } else {
            activeFitout = 0;
            checkFitout.checked = false;
            const index = items.indexOf(a61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a30")) {
            activeIncidents = 1;
            checkIncidents.checked = true;
            if (!items.includes(a30)) items.push(a30);
          } else {
            activeIncidents = 0;
            checkIncidents.checked = false;
            const index = items.indexOf(a30);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a125")) {
            activeIncidentsTop = 1;
            checkIncidentsTop.checked = true;
            if (!items.includes(a125)) items.push(a125);
          } else {
            activeIncidentsTop = 0;
            checkIncidentsTop.checked = false;
            const index = items.indexOf(a125);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a71")) {
            activeOpenEscalation = 1;
            checkOpenEscalation.checked = true;
            if (!items.includes(a71)) items.push(a71);
          } else {
            activeOpenEscalation = 0;
            checkOpenEscalation.checked = false;
            const index = items.indexOf(a71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a72")) {
            activeCloseEscalation = 1;
            checkCloseEscalation.checked = true;
            if (!items.includes(a72)) items.push(a72);
          } else {
            activeCloseEscalation = 0;
            checkCloseEscalation.checked = false;
            const index = items.indexOf(a72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a73")) {
            activeAvgEscalation = 1;
            checkAvgEscalation.checked = true;
            if (!items.includes(a73)) items.push(a73);
          } else {
            activeAvgEscalation = 0;
            checkAvgEscalation.checked = false;
            const index = items.indexOf(a73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a31")) {
            activeCategoryWiseIncidents = 1;
            checkCategoryWiseIncidents.checked = true;
            if (!items.includes(a31)) items.push(a31);
          } else {
            activeCategoryWiseIncidents = 0;
            checkCategoryWiseIncidents.checked = false;
            const index = items.indexOf(a31);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a128")) {
            activeCategoryWiseIncidentsTop = 1;
            checkCategoryWiseIncidentsTop.checked = true;
            if (!items.includes(a128)) items.push(a128);
          } else {
            activeCategoryWiseIncidentsTop = 0;
            checkCategoryWiseIncidentsTop.checked = false;
            const index = items.indexOf(a128);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a129")) {
            activeEVConsumption = 1;
            checkEVConsumption.checked = true;
            if (!items.includes(a129)) items.push(a129);
          } else {
            activeEVConsumption = 0;
            checkEVConsumption.checked = false;
            const index = items.indexOf(a129);
            if (index > -1) items.splice(index, 1);
          }
          if (selectedWidgetsList.includes("a32")) {
            activeManPowerAttendance = 1;
            checkManPowerAttendance.checked = true;
            if (!items.includes(a32)) items.push(a32);
          } else {
            activeManPowerAttendance = 0;
            checkManPowerAttendance.checked = false;
            const index = items.indexOf(a32);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a33")) {
            activeEventsFootfallAnalysis = 1;
            checkEventsFootfallAnalysis.checked = true;
            if (!items.includes(a33)) items.push(a33);
          } else {
            activeEventsFootfallAnalysis = 0;
            checkEventsFootfallAnalysis.checked = false;
            const index = items.indexOf(a33);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a38")) {
          //   activeRAC = 1;
          //   checkRAC.style.color = "blue";
          //   items.push(a38);
          // } else {
          //   activeRAC = 0;
          //   checkRAC.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a127")) {
            activeRACTop = 1;
            checkRACTop.checked = true;
            if (!items.includes(a127)) items.push(a127);
          } else {
            activeRACTop = 0;
            checkRACTop.checked = false;
            const index = items.indexOf(a127);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a41")) {
            activeSafeManHours = 1;
            checkSafeManHours.checked = true;
            if (!items.includes(a41)) items.push(a41);
          } else {
            activeSafeManHours = 0;
            checkSafeManHours.checked = false;
            const index = items.indexOf(a41);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a42")) {
            activeAssetsBreakdown = 1;
            checkAssetsBreakdown.checked = true;
            if (!items.includes(a42)) items.push(a42);
          } else {
            activeAssetsBreakdown = 0;
            checkAssetsBreakdown.checked = false;
            const index = items.indexOf(a42);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a44")) {
            activePyramid = 1;
            checkPyramid.checked = true;
            if (!items.includes(a44)) items.push(a44);
          } else {
            activePyramid = 0;
            checkPyramid.checked = false;
            const index = items.indexOf(a44);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a126")) {
            activePyramidTop = 1;
            checkPyramidTop.checked = true;
            if (!items.includes(a126)) items.push(a126);
          } else {
            activePyramidTop = 0;
            checkPyramidTop.checked = false;
            const index = items.indexOf(a126);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a46")) {
            activeRootCause = 1;
            checkRootCause.checked = true;
            if (!items.includes(a46)) items.push(a46);
          } else {
            activeRootCause = 0;
            checkRootCause.checked = false;
            const index = items.indexOf(a46);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a64")) {
            activeBodyInjuryChart = 1;
            checkBodyInjuryChart.checked = true;
            if (!items.includes(a64)) items.push(a64);
          } else {
            activeBodyInjuryChart = 0;
            checkBodyInjuryChart.checked = false;
            const index = items.indexOf(a64);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a67")) {
            activeOccupancy = 1;
            checkOccupancy.checked = true;
            if (!items.includes(a67)) items.push(a67);
          } else {
            activeOccupancy = 0;
            checkOccupancy.checked = false;
            const index = items.indexOf(a67);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a70")) {
            activeCustomAvg = 1;
            checkCustomAvg.checked = true;
            if (!items.includes(a70)) items.push(a70);
          } else {
            activeCustomAvg = 0;
            checkCustomAvg.checked = false;
            const index = items.indexOf(a70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a74")) {
            activeFacilityInfo = 1;
            checkFacilityInfo.checked = true;
            if (!items.includes(a74)) items.push(a74);
          } else {
            activeFacilityInfo = 0;
            checkFacilityInfo.checked = false;
            const index = items.indexOf(a74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a75")) {
            activeCheckList = 1;
            checkCheckList.checked = true;
            if (!items.includes(a75)) items.push(a75);
          } else {
            activeCheckList = 0;
            checkCheckList.checked = false;
            const index = items.indexOf(a75);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a116")) {
          //   activeAssetsBreakdownGraph = 1;
          //   checkAssetsBreakdownGraph.style.color = "blue";
          //   items.push(a116);
          // } else {
          //   activeAssetsBreakdownGraph = 0;
          //   checkAssetsBreakdownGraph.style.color = "black";
          // }


          if (selectedWidgetsList.includes("a117")) {
            activeWaste = 1;
            checkWaste.checked = true;
            if (!items.includes(a117)) items.push(a117);
          } else {
            activeWaste = 0;
            checkWaste.checked = false;
            const index = items.indexOf(a117);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a78")) {
            activeDeliveryVisitors = 1;
            checkDeliveryVisitors.checked = true;
            if (!items.includes(a78)) items.push(a78);
          } else {
            activeDeliveryVisitors = 0;
            checkDeliveryVisitors.checked = false;
            const index = items.indexOf(a78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a79")) {
            activeReactiveProactiveTickets = 1;
            checkReactiveProactiveTickets.checked = true;
            if (!items.includes(a79)) items.push(a79);
          } else {
            activeReactiveProactiveTickets = 0;
            checkReactiveProactiveTickets.checked = false;
            const index = items.indexOf(a79);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a29")) {
            activeFitoutRequest = 1;
            checkFitoutRequest.checked = true;
            if (!items.includes(a29)) items.push(a29);
          } else {
            activeFitoutRequest = 0;
            checkFitoutRequest.checked = false;
            const index = items.indexOf(a29);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a80")) {
            activeRegisterdUser = 1;
            checkRegisterdUser.checked = true;
            if (!items.includes(a80)) items.push(a80);
          } else {
            activeRegisterdUser = 0;
            checkRegisterdUser.checked = false;
            const index = items.indexOf(a80);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a81")) {
            activeTotalDownloads = 1;
            checkTotalDownloads.checked = true;
            if (!items.includes(a81)) items.push(a81);
          } else {
            activeTotalDownloads = 0;
            checkTotalDownloads.checked = false;
            const index = items.indexOf(a81);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a82")) {
            activeZoneWiseEscalation = 1;
            checkZoneWiseEscalation.checked = true;
            if (!items.includes(a82)) items.push(a82);
          } else {
            activeZoneWiseEscalation = 0;
            checkZoneWiseEscalation.checked = false;
            const index = items.indexOf(a82);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a83")) {
            activeOpenAndCloseEscalation = 1;
            checkOpenAndCloseEscalation.checked = true;
            if (!items.includes(a83)) items.push(a83);
          } else {
            activeOpenAndCloseEscalation = 0;
            checkOpenAndCloseEscalation.checked = false;
            const index = items.indexOf(a83);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a84")) {
            activeCategoryWiseEscalation = 1;
            checkCategoryWiseEscalation.checked = true;
            if (!items.includes(a84)) items.push(a84);
          } else {
            activeCategoryWiseEscalation = 0;
            checkCategoryWiseEscalation.checked = false;
            const index = items.indexOf(a84);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a85")) {
            activeServicePartnerEvaluation = 1;
            checkServicePartnerEvaluation.checked = true;
            if (!items.includes(a85)) items.push(a85);
          } else {
            activeServicePartnerEvaluation = 0;
            checkServicePartnerEvaluation.checked = false;
            const index = items.indexOf(a85);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a100")) {
            activeClusterStats = 1;
            checkClusterStats.checked = true;
            if (!items.includes(a100)) items.push(a100);
          } else {
            activeClusterStats = 0;
            checkClusterStats.checked = false;
            const index = items.indexOf(a100);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a101")) {
            activeFunctionWise = 1;
            checkFunctionWise.checked = true;
            if (!items.includes(a101)) items.push(a101);
          } else {
            activeFunctionWise = 0;
            checkFunctionWise.checked = false;
            const index = items.indexOf(a101);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a102")) {
            activeGenderParticipation = 1;
            checkGenderParticipation.checked = true;
            if (!items.includes(a102)) items.push(a102);
          } else {
            activeGenderParticipation = 0;
            checkGenderParticipation.checked = false;
            const index = items.indexOf(a102);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a103")) {
            activeTrendsOverMonthSites = 1;
            checkTrendsOverMonthSites.checked = true;
            if (!items.includes(a103)) items.push(a103);
          } else {
            activeTrendsOverMonthSites = 0;
            checkTrendsOverMonthSites.checked = false;
            const index = items.indexOf(a103);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a48")) {
            activeGoodsIn = 1;
            checkGoodsIn.checked = true;
            if (!items.includes(a48)) items.push(a48);
          } else {
            activeGoodsIn = 0;
            checkGoodsIn.checked = false;
            const index = items.indexOf(a48);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a49")) {
            activeGoodsOut = 1;
            checkGoodsOut.checked = true;
            if (!items.includes(a49)) items.push(a49);
          } else {
            activeGoodsOut = 0;
            checkGoodsOut.checked = false;
            const index = items.indexOf(a49);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a59")) {
            activeGoodsInwards = 1;
            checkGoodsInwards.checked = true;
            if (!items.includes(a59)) items.push(a59);
          } else {
            activeGoodsInwards = 0;
            checkGoodsInwards.checked = false;
            const index = items.indexOf(a59);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a60")) {
            activeGoodsOutwards = 1;
            checkGoodsOutwards.checked = true;
            if (!items.includes(a60)) items.push(a60);
          } else {
            activeGoodsOutwards = 0;
            checkGoodsOutwards.checked = false;
            const index = items.indexOf(a60);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a104")) {
            activeTotalVisitorsII = 1;
            checkTotalVisitorsII.checked = true;
            if (!items.includes(a104)) items.push(a104);
          } else {
            activeTotalVisitorsII = 0;
            checkTotalVisitorsII.checked = false;
            const index = items.indexOf(a104);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a111")) {
            activeTotalStaff = 1;
            checkTotalStaff.checked = true;
            if (!items.includes(a111)) items.push(a111);
          } else {
            activeTotalStaff = 0;
            checkTotalStaff.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a112")) {
            activeStaffIn = 1;
            checkStaffIn.checked = true;
            if (!items.includes(a112)) items.push(a112);
          } else {
            activeStaffIn = 0;
            checkStaffIn.checked = false;
            const index = items.indexOf(a112);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a113")) {
            activeStaffOut = 1;
            checkStaffOut.checked = true;
            if (!items.includes(a113)) items.push(a113);
          } else {
            activeStaffOut = 0;
            checkStaffOut.checked = false;
            const index = items.indexOf(a113);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a106")) {
            activeExpectedVisitors = 1;
            checkExpectedVisitors.checked = true;
            if (!items.includes(a106)) items.push(a106);
          } else {
            activeExpectedVisitors = 0;
            checkExpectedVisitors.checked = false;
            const index = items.indexOf(a106);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a107")) {
            activeUnExpectedVisitors = 1;
            checkUnExpectedVisitors.checked = true;
            if (!items.includes(a107)) items.push(a107);
          } else {
            activeUnExpectedVisitors = 0;
            checkUnExpectedVisitors.checked = false;
            const index = items.indexOf(a107);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a105")) {
            activeTotalVisitors = 1;
            checkTotalVisitors.checked = true;
            if (!items.includes(a105)) items.push(a105);
          } else {
            activeTotalVisitors = 0;
            checkTotalVisitors.checked = false;
            const index = items.indexOf(a105);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b70")) {
            activeTotalParking = 1;
            checkTotalParking.checked = true;
            if (!items.includes(b70)) items.push(b70);
          } else {
            activeTotalParking = 0;
            checkTotalParking.checked = false;
            const index = items.indexOf(b70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b71")) {
            activeFreeParking = 1;
            checkFreeParking.checked = true;
            if (!items.includes(b71)) items.push(b71);
          } else {
            activeFreeParking = 0;
            checkFreeParking.checked = false;
            const index = items.indexOf(b71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b72")) {
            activePaidParking = 1;
            checkPaidParking.checked = true;
            if (!items.includes(b72)) items.push(b72);
          } else {
            activePaidParking = 0;
            checkPaidParking.checked = false;
            const index = items.indexOf(b72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b73")) {
            activeOccupiedParking = 1;
            checkOccupiedParking.checked = true;
            if (!items.includes(b73)) items.push(b73);
          } else {
            activeOccupiedParking = 0;
            checkOccupiedParking.checked = false;
            const index = items.indexOf(b73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b74")) {
            activeVacantParking = 1;
            checkVacantParking.checked = true;
            if (!items.includes(b74)) items.push(b74);
          } else {
            activeVacantParking = 0;
            checkVacantParking.checked = false;
            const index = items.indexOf(b74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b76")) {
            activePermitSite = 1;
            checkPermitSite.checked = true;
            if (!items.includes(b76)) items.push(b76);

          } else {
            activePermitSite = 0;
            checkPermitSite.checked = false;
            const index = items.indexOf(b76);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("b77")) {
            activePermits = 1;
            checkPermits.checked = true;
            if (!items.includes(b77)) items.push(b77);

          } else {
            activePermits = 0;
            checkPermits.checked = false;
            const index = items.indexOf(b77);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b61")) {
            activeInventory = 1;
            checkInventory.checked = true;
            if (!items.includes(b61)) items.push(b61);

          } else {
            activeInventory = 0;
            checkInventory.checked = false;
            const index = items.indexOf(b61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b34")) {
            activeTotalAmount = 1;
            checkTotalAmount.checked = true;
            if (!items.includes(b34)) items.push(b34);
          } else {
            activeTotalAmount = 0;
            checkTotalAmount.checked = false;
            const index = items.indexOf(b34);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b35")) {
            activeTotalReceived = 1;
            checkTotalReceived.checked = true;
            if (!items.includes(b35)) items.push(b35);
          } else {
            activeTotalReceived = 0;
            checkTotalReceived.checked = false;
            const index = items.indexOf(b35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b36")) {
            activeTotalOutstanding = 1;
            checkTotalOutstanding.checked = true;
            if (!items.includes(b36)) items.push(b36);
          } else {
            activeTotalOutstanding = 0;
            checkTotalOutstanding.checked = false;
            const index = items.indexOf(b36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b78")) {
            activeTotalOutStandingAmount = 1;
            checkTotalOutstandingAmount.checked = true;
            if (!items.includes(b78)) items.push(b78);
          } else {
            activeTotalOutStandingAmount = 0;
            checkTotalOutstandingAmount.checked = false;
            const index = items.indexOf(b78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c11")) {
            activeDailyStepCount = 1;
            checkDailyStepCount.checked = true;
            if (!items.includes(c11)) items.push(c11);
          } else {
            activeDailyStepCount = 0;
            checkDailyStepCount.checked = false;
            const index = items.indexOf(c11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c14")) {
            activeDepartmentStats = 1;
            checkDepartmentStats.checked = true;
            if (!items.includes(c14)) items.push(c14);
          } else {
            activeDepartmentStats = 0;
            checkDepartmentStats.checked = false;
            const index = items.indexOf(c14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c15")) {
            activeEmpParticipationStats = 1;
            checkEmpParticipationStats.checked = true;
            if (!items.includes(c15)) items.push(c15);
          } else {
            activeEmpParticipationStats = 0;
            checkEmpParticipationStats.checked = false;
            const index = items.indexOf(c15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c19")) {
            activeCommLeaderboard = 1;
            checkCommLeaderboard.checked = true;
            if (!items.includes(c19)) items.push(c19);
          } else {
            activeCommLeaderboard = 0;
            checkCommLeaderboard.checked = false;
            const index = items.indexOf(c19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c21")) {
            activeCommLeaderboardFemale = 1;
            checkCommLeaderboardFemale.checked = true;
            if (!items.includes(c21)) items.push(c21);
          } else {
            activeCommLeaderboardFemale = 0;
            checkCommLeaderboardFemale.checked = false;
            const index = items.indexOf(c21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a108")) {
            activeTotalGatePass = 1;
            checkTotalGatePass.checked = true;
            if (!items.includes(a108)) items.push(a108);
          } else {
            activeTotalGatePass = 0;
            checkTotalGatePass.checked = false;
            const index = items.indexOf(a108);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a109")) {
            activeReturnablePass = 1;
            checkReturnablePass.checked = true;
            if (!items.includes(a109)) items.push(a109);
          } else {
            activeReturnablePass = 0;
            checkReturnablePass.checked = false;
            const index = items.indexOf(a109);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a110")) {
            activeNonReturnablePass = 1;
            checkNonReturnablePass.checked = true;
            if (!items.includes(a110)) items.push(a110);
          } else {
            activeNonReturnablePass = 0;
            checkNonReturnablePass.checked = false;
            const index = items.indexOf(a110);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a114")) {
            activeTechnicalChecklist = 1;
            checkTechnicalChecklist.checked = true;
            if (!items.includes(a114)) items.push(a114);
          } else {
            activeTechnicalChecklist = 0;
            checkTechnicalChecklist.checked = false;
            const index = items.indexOf(a114);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a115")) {
            activeNonTechnicalChecklist = 1;
            checkNonTechnicalChecklist.checked = true;
            if (!items.includes(a115)) items.push(a115);
          } else {
            activeNonTechnicalChecklist = 0;
            checkNonTechnicalChecklist.checked = false;
            const index = items.indexOf(a115);
            if (index > -1) items.splice(index, 1);
          }
          console.log("hiiii i am hereeeeeeeee nowwww again");
          idLink = newIdLink;
          grid.load(savedLayout);
          loadDashboardData("custom", startDate.value, endDate.value);

        } else {
          grid.load(items);
          loadDashboardData("custom", startDate.value, endDate.value);
        }
      } else {
        grid.load(items);
        loadDashboardData("custom", startDate.value, endDate.value);
      }
    })
    .catch(error => {
      console.error('Error:', error);

    });

}


// ------------------------------------------------------------------------------------------------------------------------

const date = new Date();


year = date.getFullYear();
month = ("0" + (date.getMonth() + 1)).slice(-2);
day = ("0" + date.getDate()).slice(-2);

let todaysDate = `${year}-${month}-${day}`;

endDate.value = year + "-" + month + "-" + day;


let thirtyDaysAgo = new Date(date.getTime() - 30 * 24 * 60 * 60 * 1000);
console.log(thirtyDaysAgo.toISOString().slice(0, 10));
let newDate = thirtyDaysAgo.toISOString().slice(0, 10);



startDate.value = newDate;
callLinks("custom");
grid.load(savedLayout);
loadDashboardData("custom", startDate.value, endDate.value);

function showToggleDaily() {
  showDaily.style.display = "block";
  showCustom.style.display = "none";

  toggleDaily.className = "l px-4 l-active";
  toggleCustom.className = "l px-4";
  toggleInventory.className = "l px-4";

  const date = new Date();

  let day = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();


  let todaysDate = `${year}-${month}-${day}`;

  callLinks("daily");
  document.getElementById("toggleDaily").href = "index.html?token=" + token;

  grid.load(savedLayout);
  loadDashboardData("daily", todaysDate, 0);
}


function showToggleCustom() {
  showDaily.style.display = "none";
  showCustom.style.display = "block";
  showInventory.style.display = "none";

  toggleDaily.className = "l px-4";
  toggleCustom.className = "l px-4 l-active";
  toggleInventory.className = "l px-4";

  const date = new Date();

  let day = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();

  let todaysDate = `${year}-${month}-${day}`;


  endDate.value = todaysDate;
  callLinks("custom");

  document.getElementById("toggleCustom").href = "custom.html?token=" + token;

  grid.load(savedLayout);
  loadDashboardData("custom", startDate.value, todaysDate);
}

function showToggleInventory() {
  showDaily.style.display = "none";
  showCustom.style.display = "none";
  showInventory.style.display = "block";

  toggleDaily.className = "l px-4";
  toggleCustom.className = "l px-4";
  toggleInventory.className = "l px-4 l-active";

  const date = new Date();

  let day = date.getDate();
  let month = date.getMonth() + 1;
  let year = date.getFullYear();

  let todaysDate = `${year}-${month}-${day}`;

  callLinks("inventory");
  document.getElementById("toggleInventory").href = "inventory.html?token=" + token + "&site_id=" + globalSiteId;

  grid.load(savedLayout);
  loadDashboardData(todaysDate, todaysDate);
}


function showDate() {
  callLinks("daily");
  if (savedLayout && savedLayout.length > 0) {
    console.log(JSON.parse(data.dashboard));
    grid.load(savedLayout);
    loadDashboardData("daily", currentDate.value, 0);

  } else {
    grid.load(items);
    loadDashboardData("daily", currentDate.value, 0);
  }
}

function showDateCustom() {
  if (startDate.value != "" && endDate.value != "") {
    console.log("Start Date - " + startDate.value);
    console.log("End Date - " + endDate.value);
    // callLinks("custom");
    // // if (savedLayout && savedLayout.length > 0) {
    // // console.log(JSON.parse(data.dashboard));
    // grid.load(items);
    // loadDashboardData("custom", startDate.value, endDate.value);

    // } else {
    //   grid.load(items);
    //   loadDashboardData("custom", startDate.value, endDate.value);
    // }

  }
}

function getResult() {

  let selectedWidgetsList = []
  fetch(`https://reports.lockated.com/api-fm/user-dashboard/get-dashboard/?token=${token}`)
    .then(response => {
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      if (data.success === "1" && data.dashboard) {

        savedLayout = JSON.parse(data.dashboard);

        if (savedLayout && savedLayout.length > 0) {
          console.log(JSON.parse(data.dashboard));
          for (let widget in savedLayout) {
            selectedWidgetsList.push(savedLayout[widget].id);
            console.log(savedLayout[widget]);
          }
          console.log(savedLayout);
          items = [];
          console.log(items)
          // items = savedLayout;

          // if (selectedWidgetsList.includes("a11")) {
          //   activeTotalAssetsAvailable = 1;
          //   checkTotalAssetsAvailable.style.color = "blue";
          //   items.push(a11);
          // } else {
          //   activeTotalAssetsAvailable = 0;
          //   checkTotalAssetsAvailable.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a11")) {
            activeTotalAssetsAvailable = 1;
            checkTotalAssetsAvailable.checked = true;
            if (!items.includes(a11)) items.push(a11);
          } else {
            activeTotalAssetsAvailable = 0;
            checkTotalAssetsAvailable.checked = false;
            const index = items.indexOf(a11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a12")) {
            activeAssetsInUse = 1;
            checkAssetsInUse.checked = true;
            if (!items.includes(a12)) items.push(a12);
          } else {
            activeAssetsInUse = 0;
            checkAssetsInUse.checked = false;
            const index = items.indexOf(a12);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a13")) {
            activeAssetInBreakdown = 1;
            checkAssetInBreakdown.checked = true;
            if (!items.includes(a13)) items.push(a13);
          } else {
            activeAssetInBreakdown = 0;
            checkAssetInBreakdown.checked = false;
            const index = items.indexOf(a13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a14")) {
            activeCriticalAssetsInBreakdown = 1;
            checkCriticalAssetsInBreakdown.checked = true;
            if (!items.includes(a14)) items.push(a14);
          } else {
            activeCriticalAssetsInBreakdown = 0;
            checkCriticalAssetsInBreakdown.checked = false;
            const index = items.indexOf(a14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a15")) {
            activePPMConductedAssets = 1;
            checkPPMConductedAssets.checked = true;
            if (!items.includes(a15)) items.push(a15);
          } else {
            activePPMConductedAssets = 0;
            checkPPMConductedAssets.checked = false;
            const index = items.indexOf(a15);
            if (index > -1) items.splice(index, 1);
          }


          // if (selectedWidgetsList.includes("a34")) {
          //   activeLTIR = 1;
          //   checkLTIR.style.color = "blue";
          //   items.push(a34);
          // } else {
          //   activeLTIR = 0;
          //   checkLTIR.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a34")) {
            activeLTIR = 1;
            checkLTIR.checked = true;
            if (!items.includes(a34)) items.push(a34);
          } else {
            activeLTIR = 0;
            checkLTIR.checked = false;
            const index = items.indexOf(a34);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a35")) {
          //   activeZeroIncidentDays = 1;
          //   checkZeroIncidentDays.style.color = "blue";
          //   items.push(a35);
          // } else {
          //   activeZeroIncidentDays = 0;
          //   checkZeroIncidentDays.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a35")) {
            activeZeroIncidentDays = 1;
            checkZeroIncidentDays.checked = true;
            if (!items.includes(a35)) items.push(a35);
          } else {
            activeZeroIncidentDays = 0;
            checkZeroIncidentDays.checked = false;
            const index = items.indexOf(a35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a36")) {
            activeIncidentPerSqFt = 1;
            checkIncidentPerSqFt.checked = true;
            if (!items.includes(a36)) items.push(a36);
          } else {
            activeIncidentPerSqFt = 0;
            checkIncidentPerSqFt.checked = false;
            const index = items.indexOf(a36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a37")) {
            activeIncidentNearMissGoodCatch = 1;
            checkIncidentNearMissGoodCatch.checked = true;
            if (!items.includes(a37)) items.push(a37);
          } else {
            activeIncidentNearMissGoodCatch = 0;
            checkIncidentNearMissGoodCatch.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a68")) {
            activeExecutiveEscalation = 1;
            checkExecutiveEscalation.checked = true;
            if (!items.includes(a68)) items.push(a68);
          } else {
            activeExecutiveEscalation = 0;
            checkExecutiveEscalation.checked = false;
            const index = items.indexOf(a68);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a16")) {
            activeTickets = 1;
            checkTickets.checked = true;
            if (!items.includes(a16)) items.push(a16);
          } else {
            activeTickets = 0;
            checkTickets.checked = false;
            const index = items.indexOf(a16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a18")) {
            activeCategoryWiseTickets = 1;
            checkCategoryWiseTickets.checked = true;
            if (!items.includes(a18)) items.push(a18);
          } else {
            activeCategoryWiseTickets = 0;
            checkCategoryWiseTickets.checked = false;
            const index = items.indexOf(a18);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a19")) {
            activeCategoryWiseProactiveTickets = 1;
            checkCategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a19)) items.push(a19);
          } else {
            activeCategoryWiseProactiveTickets = 0;
            checkCategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a69")) {
            activeCustomerSentiments = 1;
            checkCustomerSentiments.checked = true;
            if (!items.includes(a69)) items.push(a69);
          } else {
            activeCustomerSentiments = 0;
            checkCustomerSentiments.checked = false;
            const index = items.indexOf(a69);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a39")) {
            activeCACategoryWiseTickets = 1;
            checkCACategoryWiseTickets.checked = true;
            if (!items.includes(a39)) items.push(a39);
          } else {
            activeCACategoryWiseTickets = 0;
            checkCACategoryWiseTickets.checked = false;
            const index = items.indexOf(a39);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a40")) {
            activeCACategoryWiseProactiveTickets = 1;
            checkCACategoryWiseProactiveTickets.checked = true;
            if (!items.includes(a40)) items.push(a40);
          } else {
            activeCACategoryWiseProactiveTickets = 0;
            checkCACategoryWiseProactiveTickets.checked = false;
            const index = items.indexOf(a40);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a20")) {
            activeTicketsAgeingMatrix = 1;
            checkTicketsAgeingMatrix.checked = true;
            if (!items.includes(a20)) items.push(a20);
          } else {
            activeTicketsAgeingMatrix = 0;
            checkTicketsAgeingMatrix.checked = false;
            const index = items.indexOf(a20);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a21")) {
            activeResolutionTAT = 1;
            checkResolutionTAT.checked = true;
            if (!items.includes(a21)) items.push(a21);
          } else {
            activeResolutionTAT = 0;
            checkResolutionTAT.checked = false;
            const index = items.indexOf(a21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a22")) {
            activeResponseTAT = 1;
            checkResponseTAT.checked = true;
            if (!items.includes(a22)) items.push(a22);
          } else {
            activeResponseTAT = 0;
            checkResponseTAT.checked = false;
            const index = items.indexOf(a22);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a23")) {
            activeVisitors = 1;
            checkVisitors.checked = true;
            if (!items.includes(a23)) items.push(a23);
          } else {
            activeVisitors = 0;
            checkVisitors.checked = false;
            const index = items.indexOf(a23);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a25")) {
            activePowerConsumption = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a25)) items.push(a25);
          } else {
            activePowerConsumption = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a25);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a118")) {
            activePowerConsumptionTop = 1;
            checkPowerConsumption.checked = true;
            if (!items.includes(a118)) items.push(a118);
          } else {
            activePowerConsumptionTop = 0;
            checkPowerConsumption.checked = false;
            const index = items.indexOf(a118);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a26")) {
            activeWaterConsumption = 1;
            checkWaterConsumption.checked = true;
            if (!items.includes(a26)) items.push(a26);
          } else {
            activeWaterConsumption = 0;
            checkWaterConsumption.checked = false;
            const index = items.indexOf(a26);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a119")) {
            activeWaterConsumptionTop = 1;
            checkWaterConsumptionTop.checked = true;
            if (!items.includes(a119)) items.push(a119);
          } else {
            activeWaterConsumptionTop = 0;
            checkWaterConsumptionTop.checked = false;
            const index = items.indexOf(a119);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a120")) {
            activeTopChecklist = 1;
            checkTopChecklist.checked = true;
            if (!items.includes(a120)) items.push(a120);
          } else {
            activeTopChecklist = 0;
            checkTopChecklist.checked = false;
            const index = items.indexOf(a120);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a121")) {
            activeLTIRTop = 1;
            checkLTIRTop.checked = true;
            if (!items.includes(a121)) items.push(a121);
          } else {
            activeLTIRTop = 0;
            checkLTIRTop.checked = false;
            const index = items.indexOf(a121);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a122")) {
            activeZeroIncidentDaysTop = 1;
            checkZeroIncidentDaysTop.checked = true;
            if (!items.includes(a122)) items.push(a122);
          } else {
            activeZeroIncidentDaysTop = 0;
            checkZeroIncidentDaysTop.checked = false;
            const index = items.indexOf(a122);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a123")) {
            activeIncidentPerSqFtTop = 1;
            checkIncidentPerSqFtTop.checked = true;
            if (!items.includes(a123)) items.push(a123);
          } else {
            activeIncidentPerSqFtTop = 0;
            checkIncidentPerSqFtTop.checked = false;
            const index = items.indexOf(a123);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a124")) {
            activeIncidentNearMissGoodCatchTop = 1;
            checkIncidentNearMissGoodCatchTop.checked = true;
            if (!items.includes(a124)) items.push(a124);
          } else {
            activeIncidentNearMissGoodCatchTop = 0;
            checkIncidentNearMissGoodCatchTop.checked = false;
            const index = items.indexOf(a124);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("d11")) {
            activeInventoryConsumption = 1;
            checkInventoryConsumption.checked = true;
            if (!items.includes(d11)) items.push(d11);
          } else {
            activeInventoryConsumption = 0;
            checkInventoryConsumption.checked = false;
            const index = items.indexOf(d11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d12")) {
            activeInventoryReport = 1;
            checkInventoryReport.checked = true;
            if (!items.includes(d12)) items.push(d12);
          } else {
            activeInventoryReport = 0;
            checkInventoryReport.checked = false;
            const index = items.indexOf(d12);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d13")) {
            activeCurrentStock = 1;
            checkCurrentStock.checked = true;
            if (!items.includes(d13)) items.push(d13);
          } else {
            activeCurrentStock = 0;
            checkCurrentStock.checked = false;
            const index = items.indexOf(d13);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d14")) {
            activeInventoryConsumptionGreen = 1;
            checkInventoryConsumptionGreen.checked = true;
            if (!items.includes(d14)) items.push(d14);
          } else {
            activeInventoryConsumptionGreen = 0;
            checkInventoryConsumptionGreen.checked = false;
            const index = items.indexOf(d14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d15")) {
            activeInventoryConsumptionReportGreen = 1;
            checkInventoryConsumptionReportGreen.checked = true;
            if (!items.includes(d15)) items.push(d15);
          } else {
            activeInventoryConsumptionReportGreen = 0;
            checkInventoryConsumptionReportGreen.checked = false;
            const index = items.indexOf(d15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("d16")) {
            activeCurrentStockGreen = 1;
            checkCurrentStockGreen.checked = true;
            if (!items.includes(d16)) items.push(d16);
          } else {
            activeCurrentStockGreen = 0;
            checkCurrentStockGreen.checked = false;
            const index = items.indexOf(d16);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a27")) {
            activeCarbonEmission = 1;
            checkCarbonEmission.checked = true;
            if (!items.includes(a27)) items.push(a27);
          } else {
            activeCarbonEmission = 0;
            checkCarbonEmission.checked = false;
            const index = items.indexOf(a27);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a63")) {
            activeEnergyIntensity = 1;
            checkEnergyIntensity.checked = true;
            if (!items.includes(a63)) items.push(a63);
          } else {
            activeEnergyIntensity = 0;
            checkEnergyIntensity.checked = false;
            const index = items.indexOf(a63);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a28")) {
            activeFuelConsumption = 1;
            checkFuelConsumption.checked = true;
            items.push(a28);
            if (!items.includes(a28)) items.push(a28);
          } else {
            activeFuelConsumption = 0;
            checkFuelConsumption.checked = false;
            const index = items.indexOf(a28);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a61")) {
            activeFitout = 1;
            checkFitout.checked = true;
            if (!items.includes(a61)) items.push(a61);
          } else {
            activeFitout = 0;
            checkFitout.checked = false;
            const index = items.indexOf(a61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a30")) {
            activeIncidents = 1;
            checkIncidents.checked = true;
            if (!items.includes(a30)) items.push(a30);
          } else {
            activeIncidents = 0;
            checkIncidents.checked = false;
            const index = items.indexOf(a30);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a125")) {
            activeIncidentsTop = 1;
            checkIncidentsTop.checked = true;
            if (!items.includes(a125)) items.push(a125);
          } else {
            activeIncidentsTop = 0;
            checkIncidentsTop.checked = false;
            const index = items.indexOf(a125);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a71")) {
            activeOpenEscalation = 1;
            checkOpenEscalation.checked = true;
            if (!items.includes(a71)) items.push(a71);
          } else {
            activeOpenEscalation = 0;
            checkOpenEscalation.checked = false;
            const index = items.indexOf(a71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a72")) {
            activeCloseEscalation = 1;
            checkCloseEscalation.checked = true;
            if (!items.includes(a72)) items.push(a72);
          } else {
            activeCloseEscalation = 0;
            checkCloseEscalation.checked = false;
            const index = items.indexOf(a72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a73")) {
            activeAvgEscalation = 1;
            checkAvgEscalation.checked = true;
            if (!items.includes(a73)) items.push(a73);
          } else {
            activeAvgEscalation = 0;
            checkAvgEscalation.checked = false;
            const index = items.indexOf(a73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a31")) {
            activeCategoryWiseIncidents = 1;
            checkCategoryWiseIncidents.checked = true;
            if (!items.includes(a31)) items.push(a31);
          } else {
            activeCategoryWiseIncidents = 0;
            checkCategoryWiseIncidents.checked = false;
            const index = items.indexOf(a31);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a128")) {
            activeCategoryWiseIncidentsTop = 1;
            checkCategoryWiseIncidentsTop.checked = true;
            if (!items.includes(a128)) items.push(a128);
          } else {
            activeCategoryWiseIncidentsTop = 0;
            checkCategoryWiseIncidentsTop.checked = false;
            const index = items.indexOf(a128);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a129")) {
            activeEVConsumption = 1;
            checkEVConsumption.checked = true;
            if (!items.includes(a129)) items.push(a129);
          } else {
            activeEVConsumption = 0;
            checkEVConsumption.checked = false;
            const index = items.indexOf(a129);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a32")) {
            activeManPowerAttendance = 1;
            checkManPowerAttendance.checked = true;
            if (!items.includes(a32)) items.push(a32);
          } else {
            activeManPowerAttendance = 0;
            checkManPowerAttendance.checked = false;
            const index = items.indexOf(a32);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a33")) {
            activeEventsFootfallAnalysis = 1;
            checkEventsFootfallAnalysis.checked = true;
            if (!items.includes(a33)) items.push(a33);
          } else {
            activeEventsFootfallAnalysis = 0;
            checkEventsFootfallAnalysis.checked = false;
            const index = items.indexOf(a33);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a38")) {
          //   activeRAC = 1;
          //   checkRAC.style.color = "blue";
          //   items.push(a38);
          // } else {
          //   activeRAC = 0;
          //   checkRAC.style.color = "black";
          // }

          if (selectedWidgetsList.includes("a127")) {
            activeRACTop = 1;
            checkRACTop.checked = true;
            if (!items.includes(a127)) items.push(a127);
          } else {
            activeRACTop = 0;
            checkRACTop.checked = false;
            const index = items.indexOf(a127);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a41")) {
            activeSafeManHours = 1;
            checkSafeManHours.checked = true;
            if (!items.includes(a41)) items.push(a41);
          } else {
            activeSafeManHours = 0;
            checkSafeManHours.checked = false;
            const index = items.indexOf(a41);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a42")) {
            activeAssetsBreakdown = 1;
            checkAssetsBreakdown.checked = true;
            if (!items.includes(a42)) items.push(a42);
          } else {
            activeAssetsBreakdown = 0;
            checkAssetsBreakdown.checked = false;
            const index = items.indexOf(a42);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a44")) {
            activePyramid = 1;
            checkPyramid.checked = true;
            if (!items.includes(a44)) items.push(a44);
          } else {
            activePyramid = 0;
            checkPyramid.checked = false;
            const index = items.indexOf(a44);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a126")) {
            activePyramidTop = 1;
            checkPyramidTop.checked = true;
            if (!items.includes(a126)) items.push(a126);
          } else {
            activePyramidTop = 0;
            checkPyramidTop.checked = false;
            const index = items.indexOf(a126);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a46")) {
            activeRootCause = 1;
            checkRootCause.checked = true;
            if (!items.includes(a46)) items.push(a46);
          } else {
            activeRootCause = 0;
            checkRootCause.checked = false;
            const index = items.indexOf(a46);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a64")) {
            activeBodyInjuryChart = 1;
            checkBodyInjuryChart.checked = true;
            if (!items.includes(a64)) items.push(a64);
          } else {
            activeBodyInjuryChart = 0;
            checkBodyInjuryChart.checked = false;
            const index = items.indexOf(a64);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a67")) {
            activeOccupancy = 1;
            checkOccupancy.checked = true;
            if (!items.includes(a67)) items.push(a67);
          } else {
            activeOccupancy = 0;
            checkOccupancy.checked = false;
            const index = items.indexOf(a67);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a70")) {
            activeCustomAvg = 1;
            checkCustomAvg.checked = true;
            if (!items.includes(a70)) items.push(a70);
          } else {
            activeCustomAvg = 0;
            checkCustomAvg.checked = false;
            const index = items.indexOf(a70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a74")) {
            activeFacilityInfo = 1;
            checkFacilityInfo.checked = true;
            if (!items.includes(a74)) items.push(a74);
          } else {
            activeFacilityInfo = 0;
            checkFacilityInfo.checked = false;
            const index = items.indexOf(a74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a75")) {
            activeCheckList = 1;
            checkCheckList.checked = true;
            if (!items.includes(a75)) items.push(a75);
          } else {
            activeCheckList = 0;
            checkCheckList.checked = false;
            const index = items.indexOf(a75);
            if (index > -1) items.splice(index, 1);
          }

          // if (selectedWidgetsList.includes("a116")) {
          //   activeAssetsBreakdownGraph = 1;
          //   checkAssetsBreakdownGraph.style.color = "blue";
          //   items.push(a116);
          // } else {
          //   activeAssetsBreakdownGraph = 0;
          //   checkAssetsBreakdownGraph.style.color = "black";
          // }


          if (selectedWidgetsList.includes("a117")) {
            activeWaste = 1;
            checkWaste.checked = true;
            if (!items.includes(a117)) items.push(a117);
          } else {
            activeWaste = 0;
            checkWaste.checked = false;
            const index = items.indexOf(a117);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a78")) {
            activeDeliveryVisitors = 1;
            checkDeliveryVisitors.checked = true;
            if (!items.includes(a78)) items.push(a78);
          } else {
            activeDeliveryVisitors = 0;
            checkDeliveryVisitors.checked = false;
            const index = items.indexOf(a78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a79")) {
            activeReactiveProactiveTickets = 1;
            checkReactiveProactiveTickets.checked = true;
            if (!items.includes(a79)) items.push(a79);
          } else {
            activeReactiveProactiveTickets = 0;
            checkReactiveProactiveTickets.checked = false;
            const index = items.indexOf(a79);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a29")) {
            activeFitoutRequest = 1;
            checkFitoutRequest.checked = true;
            if (!items.includes(a29)) items.push(a29);
          } else {
            activeFitoutRequest = 0;
            checkFitoutRequest.checked = false;
            const index = items.indexOf(a29);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a80")) {
            activeRegisterdUser = 1;
            checkRegisterdUser.checked = true;
            if (!items.includes(a80)) items.push(a80);
          } else {
            activeRegisterdUser = 0;
            checkRegisterdUser.checked = false;
            const index = items.indexOf(a80);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a81")) {
            activeTotalDownloads = 1;
            checkTotalDownloads.checked = true;
            if (!items.includes(a81)) items.push(a81);
          } else {
            activeTotalDownloads = 0;
            checkTotalDownloads.checked = false;
            const index = items.indexOf(a81);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a82")) {
            activeZoneWiseEscalation = 1;
            checkZoneWiseEscalation.checked = true;
            if (!items.includes(a82)) items.push(a82);
          } else {
            activeZoneWiseEscalation = 0;
            checkZoneWiseEscalation.checked = false;
            const index = items.indexOf(a82);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a83")) {
            activeOpenAndCloseEscalation = 1;
            checkOpenAndCloseEscalation.checked = true;
            if (!items.includes(a83)) items.push(a83);
          } else {
            activeOpenAndCloseEscalation = 0;
            checkOpenAndCloseEscalation.checked = false;
            const index = items.indexOf(a83);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a84")) {
            activeCategoryWiseEscalation = 1;
            checkCategoryWiseEscalation.checked = true;
            if (!items.includes(a84)) items.push(a84);
          } else {
            activeCategoryWiseEscalation = 0;
            checkCategoryWiseEscalation.checked = false;
            const index = items.indexOf(a84);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a85")) {
            activeServicePartnerEvaluation = 1;
            checkServicePartnerEvaluation.checked = true;
            if (!items.includes(a85)) items.push(a85);
          } else {
            activeServicePartnerEvaluation = 0;
            checkServicePartnerEvaluation.checked = false;
            const index = items.indexOf(a85);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a100")) {
            activeClusterStats = 1;
            checkClusterStats.checked = true;
            if (!items.includes(a100)) items.push(a100);
          } else {
            activeClusterStats = 0;
            checkClusterStats.checked = false;
            const index = items.indexOf(a100);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a101")) {
            activeFunctionWise = 1;
            checkFunctionWise.checked = true;
            if (!items.includes(a101)) items.push(a101);
          } else {
            activeFunctionWise = 0;
            checkFunctionWise.checked = false;
            const index = items.indexOf(a101);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a102")) {
            activeGenderParticipation = 1;
            checkGenderParticipation.checked = true;
            if (!items.includes(a102)) items.push(a102);
          } else {
            activeGenderParticipation = 0;
            checkGenderParticipation.checked = false;
            const index = items.indexOf(a102);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a103")) {
            activeTrendsOverMonthSites = 1;
            checkTrendsOverMonthSites.checked = true;
            if (!items.includes(a103)) items.push(a103);
          } else {
            activeTrendsOverMonthSites = 0;
            checkTrendsOverMonthSites.checked = false;
            const index = items.indexOf(a103);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a48")) {
            activeGoodsIn = 1;
            checkGoodsIn.checked = true;
            if (!items.includes(a48)) items.push(a48);
          } else {
            activeGoodsIn = 0;
            checkGoodsIn.checked = false;
            const index = items.indexOf(a48);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a49")) {
            activeGoodsOut = 1;
            checkGoodsOut.checked = true;
            if (!items.includes(a49)) items.push(a49);
          } else {
            activeGoodsOut = 0;
            checkGoodsOut.checked = false;
            const index = items.indexOf(a49);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a59")) {
            activeGoodsInwards = 1;
            checkGoodsInwards.checked = true;
            if (!items.includes(a59)) items.push(a59);
          } else {
            activeGoodsInwards = 0;
            checkGoodsInwards.checked = false;
            const index = items.indexOf(a59);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a60")) {
            activeGoodsOutwards = 1;
            checkGoodsOutwards.checked = true;
            if (!items.includes(a60)) items.push(a60);
          } else {
            activeGoodsOutwards = 0;
            checkGoodsOutwards.checked = false;
            const index = items.indexOf(a60);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a104")) {
            activeTotalVisitorsII = 1;
            checkTotalVisitorsII.checked = true;
            if (!items.includes(a104)) items.push(a104);
          } else {
            activeTotalVisitorsII = 0;
            checkTotalVisitorsII.checked = false;
            const index = items.indexOf(a104);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a111")) {
            activeTotalStaff = 1;
            checkTotalStaff.checked = true;
            if (!items.includes(a111)) items.push(a111);
          } else {
            activeTotalStaff = 0;
            checkTotalStaff.checked = false;
            const index = items.indexOf(a111);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a112")) {
            activeStaffIn = 1;
            checkStaffIn.checked = true;
            if (!items.includes(a112)) items.push(a112);
          } else {
            activeStaffIn = 0;
            checkStaffIn.checked = false;
            const index = items.indexOf(a112);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a113")) {
            activeStaffOut = 1;
            checkStaffOut.checked = true;
            if (!items.includes(a113)) items.push(a113);
          } else {
            activeStaffOut = 0;
            checkStaffOut.checked = false;
            const index = items.indexOf(a113);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a106")) {
            activeExpectedVisitors = 1;
            checkExpectedVisitors.checked = true;
            if (!items.includes(a106)) items.push(a106);
          } else {
            activeExpectedVisitors = 0;
            checkExpectedVisitors.checked = false;
            const index = items.indexOf(a106);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a107")) {
            activeUnExpectedVisitors = 1;
            checkUnExpectedVisitors.checked = true;
            if (!items.includes(a107)) items.push(a107);
          } else {
            activeUnExpectedVisitors = 0;
            checkUnExpectedVisitors.checked = false;
            const index = items.indexOf(a107);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a105")) {
            activeTotalVisitors = 1;
            checkTotalVisitors.checked = true;
            if (!items.includes(a105)) items.push(a105);
          } else {
            activeTotalVisitors = 0;
            checkTotalVisitors.checked = false;
            const index = items.indexOf(a105);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b70")) {
            activeTotalParking = 1;
            checkTotalParking.checked = true;
            if (!items.includes(b70)) items.push(b70);
          } else {
            activeTotalParking = 0;
            checkTotalParking.checked = false;
            const index = items.indexOf(b70);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b71")) {
            activeFreeParking = 1;
            checkFreeParking.checked = true;
            if (!items.includes(b71)) items.push(b71);
          } else {
            activeFreeParking = 0;
            checkFreeParking.checked = false;
            const index = items.indexOf(b71);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b72")) {
            activePaidParking = 1;
            checkPaidParking.checked = true;
            if (!items.includes(b72)) items.push(b72);
          } else {
            activePaidParking = 0;
            checkPaidParking.checked = false;
            const index = items.indexOf(b72);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b73")) {
            activeOccupiedParking = 1;
            checkOccupiedParking.checked = true;
            if (!items.includes(b73)) items.push(b73);
          } else {
            activeOccupiedParking = 0;
            checkOccupiedParking.checked = false;
            const index = items.indexOf(b73);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b74")) {
            activeVacantParking = 1;
            checkVacantParking.checked = true;
            if (!items.includes(b74)) items.push(b74);
          } else {
            activeVacantParking = 0;
            checkVacantParking.checked = false;
            const index = items.indexOf(b74);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b76")) {
            activePermitSite = 1;
            checkPermitSite.checked = true;
            if (!items.includes(b76)) items.push(b76);

          } else {
            activePermitSite = 0;
            checkPermitSite.checked = false;
            const index = items.indexOf(b76);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("b77")) {
            activePermits = 1;
            checkPermits.checked = true;
            if (!items.includes(b77)) items.push(b77);

          } else {
            activePermits = 0;
            checkPermits.checked = false;
            const index = items.indexOf(b77);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b61")) {
            activeInventory = 1;
            checkInventory.checked = true;
            if (!items.includes(b61)) items.push(b61);

          } else {
            activeInventory = 0;
            checkInventory.checked = false;
            const index = items.indexOf(b61);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b34")) {
            activeTotalAmount = 1;
            checkTotalAmount.checked = true;
            if (!items.includes(b34)) items.push(b34);
          } else {
            activeTotalAmount = 0;
            checkTotalAmount.checked = false;
            const index = items.indexOf(b34);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b35")) {
            activeTotalReceived = 1;
            checkTotalReceived.checked = true;
            if (!items.includes(b35)) items.push(b35);
          } else {
            activeTotalReceived = 0;
            checkTotalReceived.checked = false;
            const index = items.indexOf(b35);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b36")) {
            activeTotalOutstanding = 1;
            checkTotalOutstanding.checked = true;
            if (!items.includes(b36)) items.push(b36);
          } else {
            activeTotalOutstanding = 0;
            checkTotalOutstanding.checked = false;
            const index = items.indexOf(b36);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("b78")) {
            activeTotalOutStandingAmount = 1;
            checkTotalOutstandingAmount.checked = true;
            if (!items.includes(b78)) items.push(b78);
          } else {
            activeTotalOutStandingAmount = 0;
            checkTotalOutstandingAmount.checked = false;
            const index = items.indexOf(b78);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c11")) {
            activeDailyStepCount = 1;
            checkDailyStepCount.checked = true;
            if (!items.includes(c11)) items.push(c11);
          } else {
            activeDailyStepCount = 0;
            checkDailyStepCount.checked = false;
            const index = items.indexOf(c11);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c14")) {
            activeDepartmentStats = 1;
            checkDepartmentStats.checked = true;
            if (!items.includes(c14)) items.push(c14);
          } else {
            activeDepartmentStats = 0;
            checkDepartmentStats.checked = false;
            const index = items.indexOf(c14);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c15")) {
            activeEmpParticipationStats = 1;
            checkEmpParticipationStats.checked = true;
            if (!items.includes(c15)) items.push(c15);
          } else {
            activeEmpParticipationStats = 0;
            checkEmpParticipationStats.checked = false;
            const index = items.indexOf(c15);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c19")) {
            activeCommLeaderboard = 1;
            checkCommLeaderboard.checked = true;
            if (!items.includes(c19)) items.push(c19);
          } else {
            activeCommLeaderboard = 0;
            checkCommLeaderboard.checked = false;
            const index = items.indexOf(c19);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("c21")) {
            activeCommLeaderboardFemale = 1;
            checkCommLeaderboardFemale.checked = true;
            if (!items.includes(c21)) items.push(c21);
          } else {
            activeCommLeaderboardFemale = 0;
            checkCommLeaderboardFemale.checked = false;
            const index = items.indexOf(c21);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a108")) {
            activeTotalGatePass = 1;
            checkTotalGatePass.checked = true;
            if (!items.includes(a108)) items.push(a108);
          } else {
            activeTotalGatePass = 0;
            checkTotalGatePass.checked = false;
            const index = items.indexOf(a108);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a109")) {
            activeReturnablePass = 1;
            checkReturnablePass.checked = true;
            if (!items.includes(a109)) items.push(a109);
          } else {
            activeReturnablePass = 0;
            checkReturnablePass.checked = false;
            const index = items.indexOf(a109);
            if (index > -1) items.splice(index, 1);
          }


          if (selectedWidgetsList.includes("a110")) {
            activeNonReturnablePass = 1;
            checkNonReturnablePass.checked = true;
            if (!items.includes(a110)) items.push(a110);
          } else {
            activeNonReturnablePass = 0;
            checkNonReturnablePass.checked = false;
            const index = items.indexOf(a110);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a114")) {
            activeTechnicalChecklist = 1;
            checkTechnicalChecklist.checked = true;
            if (!items.includes(a114)) items.push(a114);
          } else {
            activeTechnicalChecklist = 0;
            checkTechnicalChecklist.checked = false;
            const index = items.indexOf(a114);
            if (index > -1) items.splice(index, 1);
          }

          if (selectedWidgetsList.includes("a115")) {
            activeNonTechnicalChecklist = 1;
            checkNonTechnicalChecklist.checked = true;
            if (!items.includes(a115)) items.push(a115);
          } else {
            activeNonTechnicalChecklist = 0;
            checkNonTechnicalChecklist.checked = false;
            const index = items.indexOf(a115);
            if (index > -1) items.splice(index, 1);
          }
          console.log("hiiii i am hereeeeeeeee nowwww again");
          idLink = newIdLink;
          grid.load(savedLayout);
          loadDashboardData("custom", startDate.value, endDate.value);

        } else {
          grid.load(items);
          loadDashboardData("custom", startDate.value, endDate.value);
        }
      } else {
        grid.load(items);
        loadDashboardData("custom", startDate.value, endDate.value);
      }
    })
    .catch(error => {
      console.error('Error:', error);

    });
}

function showInventDate() {
  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getInventDate + idLink, true);

  xhr_object.onload = function () {
    resfunInventDate = JSON.parse(this.responseText);
    inventDate = resfunInventDate.response;

    if ((resfunInventDate.check) != "NA") {
      console.log("Invent Date - " + inventDate);
      console.log("Todays Date - " + todaysDate);

      var date = new Date(todaysDate);

      var year = date.getFullYear();
      var month = ("0" + (date.getMonth() + 1)).slice(-2);
      var day = ("0" + date.getDate()).slice(-2);

      startDate.value = inventDate;
      endDate.value = year + "-" + month + "-" + day;

      callLinks("custom");

      if (savedLayout && savedLayout.length > 0) {
        console.log(JSON.parse(data.dashboard));
        grid.load(savedLayout);
        loadDashboardData("custom", inventDate, todaysDate);

      } else {
        grid.load(items);
        loadDashboardData("custom", inventDate, todaysDate);
      }
    }
    else {
      alert("Multiple site selected or Start date not set!!");
    }

  }
  xhr_object.send();
}

// Load all the Dashboard One Time
function loadDashboardData(type, firstDate, secondDate) {


  globalType = type;
  globalDateFirst = firstDate;
  globalDateSecond = secondDate;

  downloadTicketsLink = ip + "fm-excel-download/get-tickets-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond;
  downloadCategoryTicketsLink = ip + "fm-excel-download/get-category-wise-ticket-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadCategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-category-wise-proactive-ticket-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadCACategoryWiseTicketsLink = ip + "fm-excel-download/get-commonArea-category-wiseticket-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadCACategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-commonArea-category-wise-proactiveticket-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadResolutionTATLink = ip + "fm-excel-download/get-resolution-TAT-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadResponseTATLink = ip + "fm-excel-download/get-response-TAT-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadIncidentsLink = ip + "fm-excel-download/get-incident-chart-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadCategoryWiseIncidentsLink = ip + "fm-excel-download/get-incident-category-chart-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadPyramidLink = ip + "fm-excel-download/get-level-wise-incidents-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadOccupancyLink = ip + "fm-excel-download/get-occupancy-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadPowerConsumLink = ip + "fm-excel-download/get-power-consumption-Stacked-bargraph-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadPowerConsumMonthLink = ip + "fm-excel-download/get-power-consumption-Stacked-bargraph-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadWaterConsumBarLink = ip + "fm-excel-download/get-water-consumption-stacked-bargraph-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadDeliveryVisitorLink = ip + "charts-monthly/get-delivery-visitor-download/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,
    downloadEventsFootfallAnalysisLink = ip + "fm-excel-download/get-attendance-excel-data/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond,

    downloadClusterWiseTotalLink = ip +
    "stepathon/get-cluster-wise-total-steps-taken-download/" + idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;
  downloadFunctionWiseTotalLink = ip +
    "stepathon/get-function-wise-step-count-download/" + idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;
  downloadGenderParticipationLink = ip +
    "stepathon/get-gender-participation-download/" + idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;

  downloadTrendsMonthsLink = ip +
    "fm-excel-download/get-month-wise-inventory-consumption-excelexcel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;
  downloadTrendsSitesLink = ip +
    "charts-monthly/get-inventory-consumption-over-site-excel/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;

  downloadTotalVisitorIILink = ip +
    "quick-gate-monthly/get-total-visitors-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;

  downloadGoodInLink = ip +
    "charts-monthly/get-day-wise-goods-inward-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;

  downloadGoodOutLink = ip +
    "charts-monthly/get-day-wise-goods-outward-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond;

  funCardTotalAsset(type, firstDate, secondDate);
  funCardTotalAssetInUseAndBreakDown(type, firstDate, secondDate);
  funCardConduct();
  funCardTotalCriticalAssetInBreakdown(type, firstDate, secondDate);
  funCardOpenCloseEscalation(type, firstDate, secondDate);
  funCardAvgEscalation(type, firstDate, secondDate);
  funCardDieselNot(type, firstDate, secondDate);
  funCardWaterNot(type, firstDate, secondDate);
  funCardCustomerAverage(type, firstDate, secondDate);
  funGetLTIR(type, firstDate, secondDate);
  funGetLTIRTop(type, firstDate, secondDate);
  funGetZeroIncidentDaysTop(type, firstDate, secondDate);
  funGetZeroIncidentDays(type, firstDate, secondDate);
  funGetIncidentPerSqFt(type, firstDate, secondDate);
  funGetIncidentPerSqFtTop(type, firstDate, secondDate);

  funGetIncidentNearMissGoodCatch(type, firstDate, secondDate);
  funGetIncidentNearMissGoodCatchTop(type, firstDate, secondDate);
  funChartTicket(type, firstDate, secondDate);
  funReactiveTicket(type, firstDate, secondDate);
  funChecklist(type, firstDate, secondDate);
  funChecklistTop(type, firstDate, secondDate);
  funCategoryTicket(type, firstDate, secondDate);
  funCategoryProactiveTicket(type, firstDate, secondDate);
  funChartCustomerSentiments(type, firstDate, secondDate);
  funCommonAreaCategoryTicket(type, firstDate, secondDate);
  funCommonAreaCategoryProactiveTicket(type, firstDate, secondDate);
  funAgeingMatrix(type, firstDate, secondDate);
  funTATResolution(type, firstDate, secondDate);
  funTATResponse(type, firstDate, secondDate);
  funVisitors(type, firstDate, secondDate);
  funVisitorsCards(type, firstDate, secondDate);

  funStaff(type, firstDate, secondDate);
  funStaffIn(type, firstDate, secondDate);
  funStaffOut(type, firstDate, secondDate);
  funGoodsInward(type, firstDate, secondDate);
  funOutwards(type, firstDate, secondDate);

  funTotalVisitors(type, firstDate, secondDate);
  funTotalVisitors2(type, firstDate, secondDate);
  funGoodsIn(type, firstDate, secondDate);
  funGoodsOut(type, firstDate, secondDate);
  funFootfall(type, firstDate, secondDate);

  funPowerConsumption(type, firstDate, secondDate);
  funWaterConsumptionTop(type, firstDate, secondDate);
  funPowerConsumptionTop(type, firstDate, secondDate);
  funWaterConsumption(type, firstDate, secondDate);
  funCarbonEmissionScope1(type, firstDate, secondDate);
  funCarbonEmissionScope2(type, firstDate, secondDate);
  funEnergyIntensity(type, firstDate, secondDate);
  funFuelConsumption(type, firstDate, secondDate);

  funFitOutRequest(type, firstDate, secondDate);
  funIncidents(type, firstDate, secondDate);
  funIncidentsTop(type, firstDate, secondDate);
  funIncidentsCategory(type, firstDate, secondDate);
  funIncidentsCategoryTop(type, firstDate, secondDate);
  EvConsumptionTop(type, firstDate, secondDate);
  funManPower(type, firstDate, secondDate);
  funRCA(type, firstDate, secondDate);
  funGetSafeManHours(type, firstDate, secondDate);
  funAssetsBreakdown(type, firstDate, secondDate);
  funExecutiveEscalation(type, firstDate, secondDate);
  funFacilityInfo(type, firstDate, secondDate);
  funPyramid(type, firstDate, secondDate);
  funPyramidTop(type, firstDate, secondDate);
  funRootCause(type, firstDate, secondDate);
  funBodyInjuryChart(type, firstDate, secondDate);
  funOccupancy(type, firstDate, secondDate);

  funTechnicalChecklist(type, firstDate, secondDate);
  funNonTechnicalChecklist(type, firstDate, secondDate);
  funDryWasteSegregation(type, firstDate, secondDate);
  funAssetBreakDown(type, firstDate, secondDate);

  funFitout(type, firstDate, secondDate);
  funFitoutOccupancy(type, firstDate, secondDate);
  funDeliveryVisitor(type, firstDate, secondDate);

  funCardTotalRegisteredUsers(type, firstDate, secondDate);
  funCardTotalDownloads(type, firstDate, secondDate);

  funSiteWiseEscalation(type, firstDate, secondDate);
  funOpenCloseEscalation(type, firstDate, secondDate);
  funCategoryWiseEscalation(type, firstDate, secondDate);
  funAuditScore(type, firstDate, secondDate);

  fungenderParticipation(type, firstDate, secondDate);
  funClusterStats(type, firstDate, secondDate);
  funDailyStepStats(type, firstDate, secondDate);

  funInventoryOverMonthSites(type, firstDate, secondDate);
  funTotalAmount(type, firstDate, secondDate);

  funInventoryOverSites(type, firstDate, secondDate);
  funSitePermit(type, firstDate, secondDate);  //moved
  funPermitStatus(type, firstDate, secondDate);   //moved
  funOutstanding(type, firstDate, secondDate);
  funInventory(type, firstDate, secondDate);   //moved
  funIncidentSummary(type, firstDate, secondDate); //moved
  funIncidentSummaryTop(type, firstDate, secondDate); //moved
  funCardParking(type, firstDate, secondDate);  //moved

  funCommLeaderboard(firstDate, secondDate);
  funCommLeaderboardFemale(firstDate, secondDate);
  funClusterEmployeeParticiption(firstDate, secondDate);
  funDepartmentStats(firstDate, secondDate);
  funDailyStepCount(type, firstDate, secondDate);


  funInventoryConsumption(type, firstDate, secondDate);
  funInventoryReport(type, firstDate, secondDate);
  funCurrentStock(type, firstDate, secondDate);

  funInventoryConsumptionGreen(type, firstDate, secondDate);
  funInventoryReportGreen(type, firstDate, secondDate);
  funCurrentStockGreen(type, firstDate, secondDate);

}

function convertDateFormat(dateString) {
  var dateParts = dateString.split("-");
  var year = dateParts[0];
  var month = dateParts[1];
  var day = dateParts[2];

  return day + "/" + month + "/" + year;
}




// --------------------------------------------------------------------------------------------------------------------------------
// Load Data First Time
// --------------------------------------------------------------------------------------------------------------------------------
function funCardTotalAsset() {
  let cardTotalAsset = document.getElementById("cardTotalAsset");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getTotalAssetCard + idLink, true);

  xhr_object.onload = function () {
    resfunCardTotalAsset = JSON.parse(this.responseText);
    console.log("Asset Total - ");
    console.log(resfunCardTotalAsset);
    cardTotalAsset.innerHTML = resfunCardTotalAsset.response + "";
  };
  let infoTotalAssetsAvailableIcon = document.getElementById("infoTotalAssetsAvailableIcon");
  // infoTotalAssetsAvailableIcon,TotalAssetsAvailableDiv,closeTotalAssetsAvailable,TotalAssetsAvailableInfo
  if (infoTotalAssetsAvailableIcon) {
    infoTotalAssetsAvailableIcon.addEventListener("click", InfoModal1);
  }

  let TotalAssetsAvailableDiv = document.getElementById('TotalAssetsAvailableDiv');
  let closeTotalAssetsAvailable = document.getElementById('closeTotalAssetsAvailable');
  function InfoModal1(event) {
    event.stopPropagation();
    TotalAssetsAvailableDiv.style.display = "block";
    if (resfunCardTotalAsset.info_total_assets) {
      // showInfoModal(resfunCarbonEmissionScope2.info.formula);
      // console.log(resfunGetLTIR.info.formula);
      let TotalAssetsAvailableInfo = document.getElementById("TotalAssetsAvailableInfo");
      let TotalAssetsAvailableInfo2 = document.getElementById("TotalAssetsAvailableInfo2");
      let TotalAssetsAvailableInfo3 = document.getElementById("TotalAssetsAvailableInfo3");


      TotalAssetsAvailableInfo.innerHTML = "<b>Formula :</b> " + resfunCardTotalAsset.info_total_assets.formula;
      TotalAssetsAvailableInfo2.innerHTML = "<b>Info :</b> " + resfunCardTotalAsset.info_total_assets.info;
      TotalAssetsAvailableInfo3.innerHTML = "<b>Total assets :</b> " + resfunCardTotalAsset.info_total_assets.total_assets;


      // $('#infoModal').modal('show');
    } else {
      console.error("Formula not found in response info.");
    }
  }

  document.addEventListener("click", function (event) {
    if (!TotalAssetsAvailableDiv.contains(event.target) && event.target.id !== 'infoTotalAssetsAvailableIcon') {
      closeTotalAssetsAvailableDiv();
    }
  });
  if (closeTotalAssetsAvailable) {
    closeTotalAssetsAvailable.addEventListener("click", closeTotalAssetsAvailableDiv);
  }

  function closeTotalAssetsAvailableDiv() {
    TotalAssetsAvailableDiv.style.display = "none";
  }
  if (TotalAssetsAvailableDiv) {
    TotalAssetsAvailableDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  } // Stop propagation to prevent the document click event from firing when clicking inside the dropdown

  xhr_object.send();
}

function funCardTotalAssetInUseAndBreakDown() {
  let cardUseAsset = document.getElementById("cardUseAsset");
  let cardBreakdownAsset = document.getElementById("cardBreakdownAsset");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getTotalAssetInUseAndBreakDownCard + idLink, true);

  xhr_object.onload = function () {
    resfunCardTotalAssetInUseAndBreakDown = JSON.parse(this.responseText);
    console.log("Asset In Use/Breakdown - ");
    console.log(resfunCardTotalAssetInUseAndBreakDown);
    cardUseAsset.innerHTML =
      resfunCardTotalAssetInUseAndBreakDown.response.InUse + "";
    cardBreakdownAsset.innerHTML =
      resfunCardTotalAssetInUseAndBreakDown.response.InBreakdown + "";

    // infoAssetInUseIcon,AssetInUseDiv,closeAssetInUse,AssetInUseInfo

    infoAssetInUseIcon.addEventListener("click", InfoModal1);
    let AssetInUseDiv = document.getElementById('AssetInUseDiv');
    let closeAssetInUse = document.getElementById('closeAssetInUse');
    function InfoModal1(event) {
      event.stopPropagation();
      AssetInUseDiv.style.display = "block";
      if (resfunCardTotalAssetInUseAndBreakDown.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let AssetInUseInfo = document.getElementById("AssetInUseInfo");
        let AssetInUseInfo2 = document.getElementById("AssetInUseInfo2");


        AssetInUseInfo.innerHTML = "<b>Info :</b> " + resfunCardTotalAssetInUseAndBreakDown.info.info;
        AssetInUseInfo2.innerHTML = "<b>Assets in Use :</b> " + resfunCardTotalAssetInUseAndBreakDown.info["Assets in Use"];


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!AssetInUseDiv.contains(event.target) && event.target.id !== 'infoAssetInUseIcon') {
        closeAssetInUseDiv();
      }
    });
    closeAssetInUse.addEventListener("click", closeAssetInUseDiv);
    function closeAssetInUseDiv() {
      AssetInUseDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    AssetInUseDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // infoAssetInBreakdownIcon,AssetInBreakdownDiv,closeAssetInBreakdown,AssetInBreakdownInfo


    infoAssetInBreakdownIcon.addEventListener("click", InfoModal2);
    let AssetInBreakdownDiv = document.getElementById('AssetInBreakdownDiv');
    let closeAssetInBreakdown = document.getElementById('closeAssetInBreakdown');
    function InfoModal2(event) {
      event.stopPropagation();
      AssetInBreakdownDiv.style.display = "block";
      if (resfunCardTotalAssetInUseAndBreakDown.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let AssetInBreakdownInfo = document.getElementById("AssetInBreakdownInfo");
        let AssetInBreakdownInfo2 = document.getElementById("AssetInBreakdownInfo2");


        AssetInBreakdownInfo.innerHTML = "<b>Info :</b> " + resfunCardTotalAssetInUseAndBreakDown.info.info;
        AssetInBreakdownInfo2.innerHTML = "<b>Assets in Breakdown :</b> " + resfunCardTotalAssetInUseAndBreakDown.info["Assets in Breakdown"];


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!AssetInBreakdownDiv.contains(event.target) && event.target.id !== 'infoAssetInBreakdownIcon') {
        closeAssetInBreakdownDiv();
      }
    });
    closeAssetInBreakdown.addEventListener("click", closeAssetInBreakdownDiv);
    function closeAssetInBreakdownDiv() {
      AssetInBreakdownDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    AssetInBreakdownDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}
// resfunPpmConducted
function funCardConduct() {
  let cardConductedAssets = document.getElementById("cardConductedAssets");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getConducted + idLink, true);

  xhr_object.onload = function () {
    resfunPpmConducted = JSON.parse(this.responseText);
    console.log("Ppm Conducted - ");
    console.log(resfunPpmConducted);
    cardConductedAssets.innerHTML = resfunPpmConducted.response + "";

    // infoPPMOverdueAssetsIcon,PPMOverdueAssetsDiv,closePPMOverdueAssets,PPMOverdueAssetsInfo

    infoPPMOverdueAssetsIcon.addEventListener("click", InfoModal1);
    let PPMOverdueAssetsDiv = document.getElementById('PPMOverdueAssetsDiv');
    let closePPMOverdueAssets = document.getElementById('closePPMOverdueAssets');
    function InfoModal1(event) {
      event.stopPropagation();
      PPMOverdueAssetsDiv.style.display = "block";
      if (resfunPpmConducted.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let PPMOverdueAssetsInfo = document.getElementById("PPMOverdueAssetsInfo");
        let PPMOverdueAssetsInfo2 = document.getElementById("PPMOverdueAssetsInfo2");



        PPMOverdueAssetsInfo.innerHTML = "<b>Info :</b> " + resfunPpmConducted.info.info;
        PPMOverdueAssetsInfo2.innerHTML = "<b>Overdue Assets :</b> " + resfunPpmConducted.info["Overdue Assets"];



        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!PPMOverdueAssetsDiv.contains(event.target) && event.target.id !== 'infoPPMOverdueAssetsIcon') {
        closePPMOverdueAssetsDiv();
      }
    });
    closePPMOverdueAssets.addEventListener("click", closePPMOverdueAssetsDiv);
    function closePPMOverdueAssetsDiv() {
      PPMOverdueAssetsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PPMOverdueAssetsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funCardTotalCriticalAssetInBreakdown() {
  let cardCriticalAsset = document.getElementById("cardCriticalAsset");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getTotalCriticalAssetInBreakdownCard + idLink, true);

  xhr_object.onload = function () {
    resfunCardTotalCriticalAssetInBreakdown = JSON.parse(this.responseText);
    console.log("Critical Asset In Breakdown - ");
    console.log(resfunCardTotalCriticalAssetInBreakdown);
    cardCriticalAsset.innerHTML =
      resfunCardTotalCriticalAssetInBreakdown.response + "";
  };

  // infoCriticalAssetsInBreakdownIcon,CriticalAssetsInBreakdownDiv,closeCriticalAssetsInBreakdown,CriticalAssetsInBreakdownInfo
  let infoCriticalAssetsInBreakdownIcon = document.getElementById("infoCriticalAssetsInBreakdownIcon");
  if (infoCriticalAssetsInBreakdownIcon) {
    infoCriticalAssetsInBreakdownIcon.addEventListener("click", InfoModal1);
  }

  let CriticalAssetsInBreakdownDiv = document.getElementById('CriticalAssetsInBreakdownDiv');
  let closeCriticalAssetsInBreakdown = document.getElementById('closeCriticalAssetsInBreakdown');
  function InfoModal1(event) {
    event.stopPropagation();
    CriticalAssetsInBreakdownDiv.style.display = "block";
    if (resfunCardTotalCriticalAssetInBreakdown.info) {
      // showInfoModal(resfunCarbonEmissionScope2.info.formula);
      // console.log(resfunGetLTIR.info.formula);
      let CriticalAssetsInBreakdownInfo = document.getElementById("CriticalAssetsInBreakdownInfo");
      let CriticalAssetsInBreakdownInfo2 = document.getElementById("CriticalAssetsInBreakdownInfo2");
      let CriticalAssetsInBreakdownInfo3 = document.getElementById("CriticalAssetsInBreakdownInfo3");


      CriticalAssetsInBreakdownInfo.innerHTML = "<b>Formula :</b> " + resfunCardTotalCriticalAssetInBreakdown.info.formula;
      CriticalAssetsInBreakdownInfo2.innerHTML = "<b>Info :</b> " + resfunCardTotalCriticalAssetInBreakdown.info.info;
      CriticalAssetsInBreakdownInfo3.innerHTML = "<b>Total assets in breakdown :</b> " + resfunCardTotalCriticalAssetInBreakdown.info.total_assets_in_breakdown;


      // $('#infoModal').modal('show');
    } else {
      console.error("Formula not found in response info.");
    }
  }

  document.addEventListener("click", function (event) {
    if (!CriticalAssetsInBreakdownDiv.contains(event.target) && event.target.id !== 'infoCriticalAssetsInBreakdownIcon') {
      closeCriticalAssetsInBreakdownDiv();
    }
  });
  if (closeCriticalAssetsInBreakdown) {
    closeCriticalAssetsInBreakdown.addEventListener("click", closeCriticalAssetsInBreakdownDiv);
  }

  function closeCriticalAssetsInBreakdownDiv() {
    CriticalAssetsInBreakdownDiv.style.display = "none";
  }
  if (CriticalAssetsInBreakdownDiv) {
    CriticalAssetsInBreakdownDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  }
  // Stop propagation to prevent the document click event from firing when clicking inside the dropdown

  xhr_object.send();
}

// cardOpenEscalation,cardCloseEscalation,cardAvgEscalation  &drilldown_by

function funCardOpenCloseEscalation() {
  let cardOpenEscalation = document.getElementById("cardOpenEscalation");
  let cardCloseEscalation = document.getElementById("cardCloseEscalation");

  let xhr_object = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object.open("GET", getOpenCloseEscalation + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getOpenCloseEscalation + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }
  console.log(getOpenCloseEscalation);

  xhr_object.onload = function () {
    resfunCardOpenCloseEscalation = JSON.parse(this.responseText);
    console.log("Open Escalation - ");
    console.log(resfunCardOpenCloseEscalation);
    cardOpenEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Open + "";


    infoOpenEscalationIcon.addEventListener("click", InfoModal1);
    let OpenEscalationDiv = document.getElementById('OpenEscalationDiv');
    let closeOpenEscalation = document.getElementById('closeOpenEscalation');
    function InfoModal1(event) {
      event.stopPropagation();
      OpenEscalationDiv.style.display = "block";
      if (resfunCardOpenCloseEscalation.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let OpenEscalationInfo = document.getElementById("OpenEscalationInfo");
        let OpenEscalationInfo2 = document.getElementById("OpenEscalationInfo2");


        OpenEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunCardOpenCloseEscalation.info.formula;
        OpenEscalationInfo2.innerHTML = "<b>Info :</b> " + resfunCardOpenCloseEscalation.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!OpenEscalationDiv.contains(event.target) && event.target.id !== 'infoOpenEscalationIcon') {
        closeOpenEscalationDiv();
      }
    });
    closeOpenEscalation.addEventListener("click", closeOpenEscalationDiv);
    function closeOpenEscalationDiv() {
      OpenEscalationDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OpenEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    xhr_object_close.send();
  };
  xhr_object.send();

  // ----------------------------------------------

  let xhr_object_close = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object_close.open("GET", getOpenCloseEscalation + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object_close.open("GET", getOpenCloseEscalation + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object_close.onload = function () {
    resfunCardOpenCloseEscalation = JSON.parse(this.responseText);
    console.log("Close Escalation - ");
    console.log(resfunCardOpenCloseEscalation);
    cardCloseEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Closed + "";

    infoClosedEscalationIcon.addEventListener("click", InfoModal2);
    let ClosedEscalationDiv = document.getElementById('ClosedEscalationDiv');
    let closeClosedEscalation = document.getElementById('closeClosedEscalation');
    function InfoModal2(event) {
      event.stopPropagation();
      ClosedEscalationDiv.style.display = "block";
      if (resfunCardOpenCloseEscalation.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let ClosedEscalationInfo = document.getElementById("ClosedEscalationInfo");
        let ClosedEscalationInfo2 = document.getElementById("ClosedEscalationInfo2");


        ClosedEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunCardOpenCloseEscalation.info.formula;
        ClosedEscalationInfo2.innerHTML = "<b>Info :</b> " + resfunCardOpenCloseEscalation.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ClosedEscalationDiv.contains(event.target) && event.target.id !== 'infoClosedEscalationIcon') {
        closeClosedEscalationDiv();
      }
    });
    closeClosedEscalation.addEventListener("click", closeClosedEscalationDiv);
    function closeClosedEscalationDiv() {
      ClosedEscalationDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ClosedEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object_close.send();
}


function funCardAvgEscalation() {
  let cardAvgEscalation = document.getElementById("cardAvgEscalation");
  let xhr_object = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object.open("GET", getAvgEscalation + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getAvgEscalation + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunCardAvgEscalation = JSON.parse(this.responseText);
    console.log("Customer Average Rating - ");
    console.log(resfunCardAvgEscalation);
    cardAvgEscalation.innerHTML = resfunCardAvgEscalation.response + "";
    cardAvgEscalation.style.fontSize = "30px";

    infoAverageEscalationIcon.addEventListener("click", InfoModal1);
    let AverageEscalationDiv = document.getElementById('AverageEscalationDiv');
    let closeAverageEscalation = document.getElementById('closeAverageEscalation');
    function InfoModal1(event) {
      event.stopPropagation();
      AverageEscalationDiv.style.display = "block";
      if (resfunCardAvgEscalation.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let AverageEscalationInfo = document.getElementById("AverageEscalationInfo");
        let AverageEscalationInfo2 = document.getElementById("AverageEscalationInfo2");


        AverageEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunCardAvgEscalation.info.formula;
        AverageEscalationInfo2.innerHTML = "<b>Info :</b> " + resfunCardAvgEscalation.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!AverageEscalationDiv.contains(event.target) && event.target.id !== 'infoAverageEscalationIcon') {
        closeAverageEscalationsDiv();
      }
    });
    closeAverageEscalation.addEventListener("click", closeAverageEscalationsDiv);
    function closeAverageEscalationsDiv() {
      AverageEscalationDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    AverageEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}




function funCardDieselNot() {
  let cardDieselNot = document.getElementById("cardDieselNot");
  let xhr_object = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object.open("GET", getcardDieselNot + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getcardDieselNot + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunCardDieselNot = JSON.parse(this.responseText);
    console.log("Total Diesel Non Cosumption - ");
    console.log(resfunCardDieselNot);
    cardDieselNot.innerHTML = resfunCardDieselNot.response + "";
  };
  xhr_object.send();
}



function funCardWaterNot() {
  let cardWaterNot = document.getElementById("cardWaterNot");
  let xhr_object = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object.open("GET", getcardWaterNot + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getcardWaterNot + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunCardWaterNot = JSON.parse(this.responseText);
    console.log("Total Diesel Non Cosumption - ");
    console.log(resfunCardWaterNot);
    cardWaterNot.innerHTML = resfunCardWaterNot.response + "";
  };
  xhr_object.send();
}

function funCardCustomerAverage() {
  let cardCustomerAvg = document.getElementById("cardCustomerAvg");

  let xhr_object = new XMLHttpRequest();
  // xhr_object.open("GET", getCustomerAverage + idLink, true);

  if (globalType == "daily") {
    xhr_object.open("GET", getCustomerAverage + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getCustomerAverage + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunCardCustomerAverage = JSON.parse(this.responseText);
    console.log("Customer Average Rating - ");
    console.log(resfunCardCustomerAverage);
    cardCustomerAvg.innerHTML = resfunCardCustomerAverage.response + "";

    // infoCustomerAverageRatingIcon,CustomerAverageRatingDiv,closeCustomerAverageRating,CustomerAverageRatingInfo

    infoCustomerAverageRatingIcon.addEventListener("click", InfoModal1);
    let CustomerAverageRatingDiv = document.getElementById('CustomerAverageRatingDiv');
    let closeCustomerAverageRating = document.getElementById('closeCustomerAverageRating');
    function InfoModal1(event) {
      event.stopPropagation();
      CustomerAverageRatingDiv.style.display = "block";
      if (resfunCardCustomerAverage.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let CustomerAverageRatingInfo = document.getElementById("CustomerAverageRatingInfo");

        CustomerAverageRatingInfo.innerHTML = "<b>Info :</b> " + resfunCardCustomerAverage.info.info;



        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!CustomerAverageRatingDiv.contains(event.target) && event.target.id !== 'infoCustomerAverageRatingIcon') {
        closeCustomerAverageRatingDiv();
      }
    });
    closeCustomerAverageRating.addEventListener("click", closeCustomerAverageRatingDiv);
    function closeCustomerAverageRatingDiv() {
      CustomerAverageRatingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CustomerAverageRatingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funGetLTIR() {
  let cardLTIR = document.getElementById("cardLTIR");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open("GET", getLTIR + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getLTIR + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunGetLTIR = JSON.parse(this.responseText);
    console.log("LTIR - ");
    console.log(resfunGetLTIR);
    cardLTIR.innerHTML = resfunGetLTIR.response + "";

    infoLTIRIcon.addEventListener("click", InfoModal);
    let LTIRDiv = document.getElementById('LTIRDiv');
    let closeLTIR = document.getElementById('closeLTIR');
    function InfoModal(event) {
      event.stopPropagation();
      LTIRDiv.style.display = "block";
      if (resfunGetLTIR.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        console.log(resfunGetLTIR.info.formula);
        let LTIRInfo = document.getElementById("LTIRInfo");
        let LTIRInfo2 = document.getElementById("LTIRInfo2");
        let LTIRInfo3 = document.getElementById("LTIRInfo3");
        let LTIRInfo4 = document.getElementById("LTIRInfo4");
        let LTIRInfo5 = document.getElementById("LTIRInfo5");

        LTIRInfo.innerHTML = "<b>Formula : </b>" + resfunGetLTIR.info.formula;
        LTIRInfo2.innerHTML = "<b>Total working hours(attendance from starting of project) : </b>" + resfunGetLTIR.info["total working hours(attendance from starting of project)"];
        LTIRInfo3.innerHTML = "<b>Type of incident : </b>" + resfunGetLTIR.info["Type of incident"];
        LTIRInfo4.innerHTML = "<b>LTIR : </b>" + resfunGetLTIR.info["LTIR"];
        LTIRInfo5.innerHTML = "<b>Project start date :</b> " + resfunGetLTIR.info["project start date"];

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!LTIRDiv.contains(event.target) && event.target.id !== 'infoLTIRIcon') {
        closeLTIRDiv();
      }
    });
    closeLTIR.addEventListener("click", closeLTIRDiv);
    function closeLTIRDiv() {
      LTIRDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    LTIRDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funGetZeroIncidentDays() {
  let cardZeroIncidentDays = document.getElementById("cardZeroIncidentDays");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open("GET", getZeroIncidentDays + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getZeroIncidentDays + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunGetZeroIncidentDays = JSON.parse(this.responseText);
    console.log("Zero Incidents - ");
    console.log(resfunGetZeroIncidentDays);
    cardZeroIncidentDays.innerHTML = resfunGetZeroIncidentDays.response + "";

    const infoIncidentZeroIcon = document.getElementById('infoIncidentZeroIcon');
    infoIncidentZeroIcon.addEventListener("click", InfoModal);

    const IncidentZeroDiv = document.getElementById('IncidentZeroDiv');
    const closeIncidentZero = document.getElementById('closeIncidentZero');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentZeroDiv.style.display = "block";

      if (resfunGetZeroIncidentDays.info) {
        console.log(resfunGetZeroIncidentDays.info);

        const IncidentZeroInfo = document.getElementById("IncidentZeroInfo");
        const IncidentZeroInfo2 = document.getElementById("IncidentZeroInfo2");
        const IncidentZeroInfo3 = document.getElementById("IncidentZeroInfo3");
        const IncidentZeroInfo4 = document.getElementById("IncidentZeroInfo4");
        const IncidentZeroInfo5 = document.getElementById("IncidentZeroInfo5");

        IncidentZeroInfo.innerHTML = "<b>Info :</b> " + resfunGetZeroIncidentDays.info["Info"];
        IncidentZeroInfo2.innerHTML = "<b>Last incident date :</b> " + resfunGetZeroIncidentDays.info["Last incident date"];
        IncidentZeroInfo3.innerHTML = "<b>Last incident id : </b>" + resfunGetZeroIncidentDays.info["Last incident id"];
        // Uncomment and map additional fields as needed
        // IncidentZeroInfo4.innerHTML = "LTIR : " + resfunGetZeroIncidentDays.info["LTIR"];
        // IncidentZeroInfo5.innerHTML = "Project start date : " + resfunGetZeroIncidentDays.info["Project start date"];
      } else {
        console.error("Info not found in response.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentZeroDiv.contains(event.target) && event.target.id !== 'infoIncidentZeroIcon') {
        closeIncidentZeroDiv();
      }
    });

    closeIncidentZero.addEventListener("click", closeIncidentZeroDiv);

    function closeIncidentZeroDiv() {
      IncidentZeroDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    IncidentZeroDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funGetIncidentPerSqFt() {
  let cardIncidentPerSqFt = document.getElementById("cardIncidentPerSqFt");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getIncidentPerSqFt + idLink, true);

  xhr_object.onload = function () {
    resfunGetIncidentPerSqFt = JSON.parse(this.responseText);
    console.log("Incidents Per Sq. Ft. - ");
    console.log(resfunGetIncidentPerSqFt);
    cardIncidentPerSqFt.innerHTML = resfunGetIncidentPerSqFt.response + "";


    // infoIncidentPerMillionIcon,IncidentPerMillionDiv,closeIncidentPerMillion,IncidentPerMillionInfo


    const infoIncidentPerMillionIcon = document.getElementById('infoIncidentPerMillionIcon');
    infoIncidentPerMillionIcon.addEventListener("click", InfoModal);

    const IncidentPerMillionDiv = document.getElementById('IncidentPerMillionDiv');
    const closeIncidentPerMillion = document.getElementById('closeIncidentPerMillion');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentPerMillionDiv.style.display = "block";

      if (resfunGetIncidentPerSqFt.info) {
        console.log(resfunGetIncidentPerSqFt.info);

        const IncidentPerMillionInfo = document.getElementById("IncidentPerMillionInfo");
        const IncidentPerMillionInfo2 = document.getElementById("IncidentPerMillionInfo2");
        const IncidentPerMillionInfo3 = document.getElementById("IncidentPerMillionInfo3");
        const IncidentPerMillionInfo4 = document.getElementById("IncidentPerMillionInfo4");

        IncidentPerMillionInfo.innerHTML = "<b>Formula :</b> " + resfunGetIncidentPerSqFt.info["formula"];
        IncidentPerMillionInfo2.innerHTML = "<b>Info :</b> " + resfunGetIncidentPerSqFt.info["info"];
        IncidentPerMillionInfo3.innerHTML = "<b>Area : </b>" + resfunGetIncidentPerSqFt.info["area"];
        IncidentPerMillionInfo4.innerHTML = "<b>Incidents : </b>" + resfunGetIncidentPerSqFt.info["incidents"];

      } else {
        console.error("Info not found in response.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentPerMillionDiv.contains(event.target) && event.target.id !== 'infoIncidentPerMillionIcon') {
        closeIncidentPerMillionDiv();
      }
    });

    closeIncidentPerMillion.addEventListener("click", closeIncidentPerMillionDiv);

    function closeIncidentPerMillionDiv() {
      IncidentPerMillionDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    IncidentPerMillionDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funGetIncidentNearMissGoodCatch() {
  let cardIncidentNearMissGoodCatch = document.getElementById(
    "cardIncidentNearMissGoodCatch"
  );

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getIncidentNearMissGoodCatch + idLink, true);

  xhr_object.onload = function () {
    resfunGetIncidentNearMissGoodCatch = JSON.parse(this.responseText);
    console.log("Incidents Near Miss Good Catch - ");
    console.log(resfunGetIncidentNearMissGoodCatch);
    cardIncidentNearMissGoodCatch.innerHTML =
      resfunGetIncidentNearMissGoodCatch.response + "";

    // infoIncidentNearMissIcon,IncidentNearMissDiv,closeIncidentNearMiss,IncidentNearMissInfo

    const infoIncidentNearMissIcon = document.getElementById('infoIncidentNearMissIcon');
    infoIncidentNearMissIcon.addEventListener("click", InfoModal);

    const IncidentNearMissDiv = document.getElementById('IncidentNearMissDiv');
    const closeIncidentNearMiss = document.getElementById('closeIncidentNearMiss');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentNearMissDiv.style.display = "block";

      if (resfunGetIncidentNearMissGoodCatch.info) {
        console.log(resfunGetIncidentNearMissGoodCatch.info);

        const IncidentNearMissInfo = document.getElementById("IncidentNearMissInfo");
        const IncidentNearMissInfo2 = document.getElementById("IncidentNearMissInfo2");
        const IncidentNearMissInfo3 = document.getElementById("IncidentNearMissInfo3");
        const IncidentNearMissInfo4 = document.getElementById("IncidentNearMissInfo4");
        const IncidentNearMissInfo5 = document.getElementById("IncidentNearMissInfo5");

        IncidentNearMissInfo.innerHTML = "<b>Formula :</b> " + resfunGetIncidentNearMissGoodCatch.info["formula"];
        IncidentNearMissInfo2.innerHTML = "<b>Days difference :</b> " + resfunGetIncidentNearMissGoodCatch.info["Days difference"];
        IncidentNearMissInfo3.innerHTML = "<b>Establish date : </b>" + resfunGetIncidentNearMissGoodCatch.info["establish date"];
        IncidentNearMissInfo4.innerHTML = "<b>Level 0 incident in last 365 days : </b>" + resfunGetIncidentNearMissGoodCatch.info["Level 0 incident in last 365 days"];
        IncidentNearMissInfo5.innerHTML = "<b>Area : </b>" + resfunGetIncidentNearMissGoodCatch.info["area"];
      } else {
        console.error("Info not found in response.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentNearMissDiv.contains(event.target) && event.target.id !== 'infoIncidentNearMissIcon') {
        closeIncidentNearMissDiv();
      }
    });

    closeIncidentNearMiss.addEventListener("click", closeIncidentNearMissDiv);

    function closeIncidentNearMissDiv() {
      IncidentNearMissDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    IncidentNearMissDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}




function funGetIncidentNearMissGoodCatchTop() {
  let cardIncidentNearMissGoodCatchTop = document.getElementById(
    "cardIncidentNearMissGoodCatchTop"
  );

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getIncidentNearMissGoodCatchTop + idLink, true);

  xhr_object.onload = function () {
    resfunGetIncidentNearMissGoodCatchTop = JSON.parse(this.responseText);
    console.log("Incidents Near Miss Good Catch - ");
    console.log(resfunGetIncidentNearMissGoodCatchTop);
    cardIncidentNearMissGoodCatchTop.innerHTML =
      resfunGetIncidentNearMissGoodCatchTop.response + "";

    infoIncidentGoodIconTop.addEventListener("click", InfoModal);
    let incidentGoodDivTop = document.getElementById('incidentGoodDivTop');
    let closeIncidentGoodTop = document.getElementById('closeIncidentGoodTop');
    function InfoModal(event) {
      event.stopPropagation();
      incidentGoodDivTop.style.display = "block";
      if (resfunGetIncidentNearMissGoodCatchTop.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        console.log(resfunGetIncidentNearMissGoodCatchTop.info.formula);
        let incidentGoodInfoTop = document.getElementById("incidentGoodInfoTop");
        let incidentGoodInfoTop2 = document.getElementById("incidentGoodInfoTop2");
        let incidentGoodInfoTop3 = document.getElementById("incidentGoodInfoTop3");
        let incidentGoodInfoTop4 = document.getElementById("incidentGoodInfoTop4");
        let incidentGoodInfoTop5 = document.getElementById("incidentGoodInfoTop5");

        incidentGoodInfoTop.innerHTML = "<b>Formula :</b> " + resfunGetIncidentNearMissGoodCatchTop.info.formula;
        incidentGoodInfoTop2.innerHTML = "<b>Days difference :</b> " + resfunGetIncidentNearMissGoodCatchTop.info["Days difference"];
        incidentGoodInfoTop3.innerHTML = "<b>Establish date :</b> " + resfunGetIncidentNearMissGoodCatchTop.info["establish date"];
        incidentGoodInfoTop4.innerHTML = "<b>Level 0 incident in last 365 days : </b>" + resfunGetIncidentNearMissGoodCatchTop.info["Level 0 incident in last 365 days"];
        incidentGoodInfoTop5.innerHTML = "<b>Area : </b>" + resfunGetIncidentNearMissGoodCatchTop.info["area"];

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!incidentGoodDivTop.contains(event.target) && event.target.id !== 'infoIncidentGoodIconTop') {
        closeIncidentGoodDivTop();
      }
    });
    closeIncidentGoodTop.addEventListener("click", closeIncidentGoodDivTop);
    function closeIncidentGoodDivTop() {
      incidentGoodDivTop.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    incidentGoodDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function Refresh_a124() {
  let cardIncidentNearMissGoodCatchTop = document.getElementById(
    "cardIncidentNearMissGoodCatchTop"
  );
  let loader = document.getElementById("loader_a124");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardIncidentNearMissGoodCatchTop.innerHTML = ""; // Clear the content while loading
    let xhr_object = new XMLHttpRequest();
    // xhr_object.open("GET", getCustomerAverage + idLink, true);

    xhr_object.open("GET", getIncidentNearMissGoodCatchTop + idLink, true);

    xhr_object.onload = function () {
      resfunGetIncidentNearMissGoodCatchTop = JSON.parse(this.responseText);
      console.log("Incidents Near Miss Good Catch - ");
      console.log(resfunGetIncidentNearMissGoodCatchTop);
      // Check if response exists and if it's greater than 0 hours
      if (resfunGetIncidentNearMissGoodCatchTop.response.Open && parseFloat(resfunGetIncidentNearMissGoodCatchTop.response.Open) > 0) {
        cardIncidentNearMissGoodCatchTop.innerHTML = resfunGetIncidentNearMissGoodCatchTop.response + "";
      } else {
        cardIncidentNearMissGoodCatchTop.innerHTML = "No data available";
        cardIncidentNearMissGoodCatchTop.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };


    xhr_object.send();
  }

  // Initial data fetch
  fetchData();


}




function funGetLTIRTop() {
  let cardLTIRTop = document.getElementById("cardLTIRTop");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open("GET", getLTIRTop + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getLTIRTop + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfunGetLTIRTop = JSON.parse(this.responseText);
    console.log("LTIR - ");
    console.log(resfunGetLTIR);
    cardLTIRTop.innerHTML = resfunGetLTIRTop.response + "";

    infoLTIRIconTop.addEventListener("click", InfoModal);
    let LTIRDivTop = document.getElementById('LTIRDivTop');
    let closeLTIRTop = document.getElementById('closeLTIRTop');
    function InfoModal(event) {
      event.stopPropagation();
      LTIRDivTop.style.display = "block";
      if (resfunGetLTIRTop.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        console.log(resfunGetLTIRTop.info.formula);
        let LTIRInfoTop = document.getElementById("LTIRInfoTop");
        let LTIRInfoTop2 = document.getElementById("LTIRInfoTop2");
        let LTIRInfoTop3 = document.getElementById("LTIRInfoTop3");
        let LTIRInfoTop4 = document.getElementById("LTIRInfoTop4");
        let LTIRInfoTop5 = document.getElementById("LTIRInfoTop5");

        LTIRInfoTop.innerHTML = "<b>Formula : </b>" + resfunGetLTIRTop.info.formula;
        LTIRInfoTop2.innerHTML = "<b>Total working hours(attendance from starting of project) : </b>" + resfunGetLTIRTop.info["total working hours(attendance from starting of project)"];
        LTIRInfoTop3.innerHTML = "<b>Type of incident : </b>" + resfunGetLTIRTop.info["Type of incident"];
        LTIRInfoTop4.innerHTML = "<b>LTIR : </b>" + resfunGetLTIRTop.info["LTIR"];
        LTIRInfoTop5.innerHTML = "<b>Project start date :</b> " + resfunGetLTIRTop.info["project start date"];

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!LTIRDivTop.contains(event.target) && event.target.id !== 'infoLTIRIconTop') {
        closeLTIRDivTop();
      }
    });
    closeLTIRTop.addEventListener("click", closeLTIRDivTop);
    function closeLTIRDivTop() {
      LTIRDivTop.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    LTIRDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function Refresh_a121() {
  let cardLTIRTop = document.getElementById("cardLTIRTop");
  let loader = document.getElementById("loader_a121");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardLTIRTop.innerHTML = ""; // Clear the content while loading
    let xhr_object = new XMLHttpRequest();
    // xhr_object.open("GET", getCustomerAverage + idLink, true);

    if (globalType == "daily") {
      xhr_object.open("GET", getLTIRTop + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getLTIRTop + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }


    xhr_object.onload = function () {
      resfunGetLTIRTop = JSON.parse(this.responseText);
      console.log("LTIR - ");
      console.log(resfunGetLTIRTop);
      if (resfunGetLTIRTop.response && parseFloat(resfunGetLTIRTop.response) > 0) {
        cardLTIRTop.innerHTML = resfunGetLTIRTop.response + "";
      } else {
        cardLTIRTop.innerHTML = "No data available";
        cardLTIRTop.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };


    xhr_object.send();
  }

  // Initial data fetch
  fetchData();


}


let clickedTicket = true;

function funChartTicket() {
  let dt1NoData = document.getElementById("dt1NoData");
  let ticket_b1 = document.getElementById("ticket-b1");
  let loaderTicketB1Chart = document.getElementById("loaderTicketB1Chart");
  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getTicketsChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("-------------Ticket-------------");
  console.log(
    getTicketsChart +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  xhr_object.onload = function () {
    resfunChartTicket = JSON.parse(this.responseText);

    console.log("Ticket - ");
    console.log(resfunChartTicket);

    let total = resfunChartTicket.response.open + resfunChartTicket.response.closed;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }
    let currentChartType = "doughnut";
    // Added Now
    originalChartConfigTicket = {
      type: "doughnut",
      data: {
        labels: ["Open", "Closed"],
        datasets: [
          {
            label: "Tickets",
            backgroundColor: ["#e2445b", "#01c875"],
            data: [
              resfunChartTicket.response.open,
              resfunChartTicket.response.closed,
            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels, centerText],
    };
    let myChart = new Chart(ticket_b1, originalChartConfigTicket)

    loaderTicketB1Chart.style.display = "none";
    dt1NoData.style.display = "none";
    ticket_b1.style.display = "block";

    // infoTicketsIcon,TicketsDiv,closeTickets,TicketsInfo

    infoTicketsIcon.addEventListener("click", InfoModal);
    let TicketsDiv = document.getElementById('TicketsDiv');
    let closeTickets = document.getElementById('closeTickets');
    function InfoModal(event) {
      event.stopPropagation();
      TicketsDiv.style.display = "block";
      if (resfunChartTicket.info) {
        let TicketsInfo = document.getElementById("TicketsInfo");
        let TicketsInfo2 = document.getElementById("TicketsInfo2");
        let TicketsInfo3 = document.getElementById("TicketsInfo3");

        TicketsInfo.innerHTML = "<b>Info  : </b>" + resfunChartTicket.info.info;
        TicketsInfo2.innerHTML = "<b>Open Tickets  : </b>" + resfunChartTicket.info["Open Tickets"];
        TicketsInfo3.innerHTML = "<b>Closed Tickets  : </b>" + resfunChartTicket.info["Closed Tickets"];


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TicketsDiv.contains(event.target) && event.target.id !== 'infoTicketsIcon') {
        closeTicketsDiv();
      }
    });
    closeTickets.addEventListener("click", closeTicketsDiv);
    function closeTicketsDiv() {
      TicketsDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TicketsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let ticketDrillDownLevel = 1;
    let clickedTicket = true;
    let label;

    if (!funChartTicket.initialized == true) {
      ticket_b1.onclick = function (event) {

        if (clickedTicket == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);
          // console.log(points);
          if (points.length) {
            // console.log(points.length);
            firstPoint = points[0];
            label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelTicket").textContent = `Ticket: ${label}`;
            // myChart.update();

            const dropdown = (document.getElementById("dataDropdown_ticket"));
            dropdown.style.display = "block";
          }

          dataDropdown_ticket.addEventListener("click", function (event) {
            console.log("Target id - " + event.target.id);

            if (event.target.id != "closeDropdown") {
              if (ticketDrillDownLevel === 1) {
                console.log("heoooo1");
                console.log(ticketDrillDownLevel);
                console.log("---------------------------------------")
                selectedOption = event.target.id;

                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);
                document.getElementById("firstDrillDown").style.display = "block";
                // document.getElementById("firstDrillDown").textContent =`First Drilldown by : ${selectedOption}       On : ${label} (Status)`
                document.getElementById("firstDrillDown").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;
                apiURL =
                  getSecondLevelDrillDownTickets +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "";
                console.log("ticket drill down 1");
                console.log(apiURL);

                downloadTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-tickets/" + idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "";

                xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resTicketDrill = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down I- ");
                  console.log(resTicketDrill);

                  const labels = resTicketDrill.response.map(item => item[1]);
                  const data = resTicketDrill.response.map(item => item[0]);
                  myChart.destroy();
                  myChart = new Chart(ticket_b1, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: backgroundColors,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  console.log(ticketDrillDownLevel);
                }
                xhr_object.send();
                ticketDrillDownLevel = 2;
                console.log(ticketDrillDownLevel);

              } else if (ticketDrillDownLevel === 2) {
                console.log("heoooo2");
                console.log(ticketDrillDownLevel);
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                console.log(backgroundColors);
                document.getElementById("firstDrillDown").style.display = "none";
                document.getElementById("secondDrilldown").style.display = "block";
                // document.getElementById("secondDrilldown").textContent =`Second Drilldown by : ${selectedSecondOption}      On : ${selectedlabelValue} (${selectedOption})`
                document.getElementById("secondDrilldown").textContent = ` - ${selectedSecondOption}`
                let xhr_object = new XMLHttpRequest();
                apiURL = getSecondLevelDrillDownTickets +
                  idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue;
                console.log(apiURL)
                console.log("second drill down api")

                downloadTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-tickets/" +
                  idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue
                "&sec_drilldown_by=" +
                  selectedSecondOption;

                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resTicketDrillSec = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down II===- ");
                  console.log(resTicketDrillSec);

                  const labels = resTicketDrillSec.response.map(item => item[1]);
                  const data = resTicketDrillSec.response.map(item => item[0]);
                  myChart.destroy();
                  myChart = new Chart(ticket_b1, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: "#01c875",
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  console.log(ticketDrillDownLevel);
                }
                xhr_object.send();
                ticketDrillDownLevel = 3;
                console.log(ticketDrillDownLevel);
                clickedTicket = false;

              }
            }
            else {
              if (ticketDrillDownLevel === 1) {
                restoreOriginalChartTicket();
              }
            }


            dataDropdown_ticket.style.display = "none";
          });

        } else if (clickedTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }

    function restoreOriginalChartTicket() {

      if (originalChartConfigTicket) {
        myChart.destroy();
        clickedTicket = true;
        funChartTicket();
        dataDropdown_ticket.style.display = "none";
        document.getElementById("firstDrillDown").style.display = "none";
        document.getElementById("secondDrilldown").style.display = "none";
      }
    }

    refreshIconElement_ticket.addEventListener("click", restoreOriginalChartTicket);
  };

  xhr_object.send();


}

// ===========================


let clickedReactiveTicket = true;
// let activeChart = null;
// loaderReactiveTicket ,ReactiveTicketNoData , reactiveTicket
function funReactiveTicket() {
  let ReactiveTicketNoData = document.getElementById("ReactiveTicketNoData");
  let reactiveTicket = document.getElementById("reactiveTicket");
  let loaderReactiveTicket = document.getElementById("loaderReactiveTicket");


  // loaderReactiveTicket.style.display = "block";
  // ReactiveTicketNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getReactiveTicket + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getReactiveTicket +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getReactiveTicket +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  xhr_object.onload = function () {
    resfunReactiveTicket = JSON.parse(this.responseText);

    console.log("Ticket - ");
    console.log(resfunReactiveTicket);

    let total = resfunReactiveTicket.response.total_tickets;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // Added Now
    originalChartConfigReactive = {
      type: "doughnut",
      data: {
        labels: ["Proactive", "Reactive"],
        datasets: [
          {
            label: "Tickets",
            backgroundColor: ["#01c875", "#e2445b"],
            data: [
              // resfunChartTicket.response.total,
              resfunReactiveTicket.response.proactive_tickets,
              resfunReactiveTicket.response.reactive_tickets,
            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            // anchor: "end",
            // align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels, centerText],
    }

    let myChart = new Chart(reactiveTicket, originalChartConfigReactive)

    loaderReactiveTicket.style.display = "none";

    if (resfunReactiveTicket.response.total == 0) {
      ReactiveTicketNoData.style.display = "block";
      reactiveTicket.style.display = "none";
    } else {
      ReactiveTicketNoData.style.display = "none";
      reactiveTicket.style.display = "block";
    }

    // infoReactiveProactiveIcon ,ReactiveProactiveDiv,closeReactiveProactive,ReactiveProactiveInfo

    infoReactiveProactiveIcon.addEventListener("click", InfoModal);
    let ReactiveProactiveDiv = document.getElementById('ReactiveProactiveDiv');
    let closeReactiveProactive = document.getElementById('closeReactiveProactive');
    function InfoModal(event) {
      event.stopPropagation();
      ReactiveProactiveDiv.style.display = "block";
      if (resfunReactiveTicket.info) {
        let ReactiveProactiveInfo = document.getElementById("ReactiveProactiveInfo");
        let ReactiveProactiveInfo2 = document.getElementById("ReactiveProactiveInfo2");
        let ReactiveProactiveInfo3 = document.getElementById("ReactiveProactiveInfo3");

        ReactiveProactiveInfo.innerHTML = "<b>Formula  : </b>" + resfunReactiveTicket.info.formula;
        ReactiveProactiveInfo2.innerHTML = "<b>Info of reactive tickets  : </b>" + resfunReactiveTicket.info.info_of_reactive_tickets;
        ReactiveProactiveInfo3.innerHTML = "<b>Info of proactive tickets  : </b>" + resfunReactiveTicket.info.info_of_proactive_tickets;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!ReactiveProactiveDiv.contains(event.target) && event.target.id !== 'infoReactiveProactiveIcon') {
        closeReactiveProactiveDiv();
      }
    });
    closeReactiveProactive.addEventListener("click", closeReactiveProactiveDiv);
    function closeReactiveProactiveDiv() {
      ReactiveProactiveDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ReactiveProactiveDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // chartCreated = true;
    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let ReactiveProactivedrillDownLevel = 1;
    let clickedReactiveTicket = true;
    if (!funReactiveTicket.initialized) {
      reactiveTicket.onclick = function (event) {

        if (clickedReactiveTicket == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelReactive").textContent = `Ticket: ${label}`;

            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];


            console.log(backgroundColors);
            myChart.update();

            const dropdown = document.getElementById("dataDropdown_reactive");
            dropdown.style.display = "block";
          }

          dataDropdown_reactive.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (ReactiveProactivedrillDownLevel === 1) {
                console.log(event.target.id);
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getTicketReactiveDrillSecond +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resTicketReactiveDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down - ");
                  console.log(resTicketReactiveDrill);

                  const labels = resTicketReactiveDrill.response.map(item => item[1]);
                  const dataValues = resTicketReactiveDrill.response.map(item => item[0]);
                  console.log(labels);
                  console.log(dataValues);
                  myChart.destroy();
                  myChart = new Chart(reactiveTicket, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: dataValues,
                        backgroundColor: backgroundColors,
                        borderWidth: 1,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            },
                          },
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          },
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                };

                xhr_object.send();
                ReactiveProactivedrillDownLevel = 2;

              }
              else if (ReactiveProactivedrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                apiURL =
                  getTicketReactiveDrillSecond +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resTicketReactiveDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down - ");
                  console.log(resTicketReactiveDrill);

                  const labels = resTicketReactiveDrill.response.map(item => item[1]);
                  const dataValues = resTicketReactiveDrill.response.map(item => item[0]);
                  console.log(labels);
                  console.log(dataValues);
                  myChart.destroy();
                  myChart = new Chart(reactiveTicket, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: dataValues,
                        backgroundColor: "#01c875",
                        borderWidth: 1,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            },
                          },
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          },
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                };

                xhr_object.send();
                ReactiveProactivedrillDownLevel = 3;
                clickedReactiveTicket = false;
                return;
              }
            }
            else {
              if (ReactiveProactivedrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }
            dataDropdown_reactive.style.display = "none";
          });

        } else if (clickedReactiveTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }

      };
    }
    refreshIconElement_reactive.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigReactive) {
        myChart.destroy();
        clickedReactiveTicket = true;
        funReactiveTicket();

      }
    }



  };

  xhr_object.send();
}

// Checklist,loaderChecklist,ChecklistNoData

function funChecklist() {
  let ChecklistNoData = document.getElementById("ChecklistNoData");
  let Checklist = document.getElementById("Checklist");
  let loaderChecklist = document.getElementById("loaderChecklist");


  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getChecklist + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getChecklist +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getTicketsChart +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  // xhr_object.onload = function () {
  //   resfunChecklist = JSON.parse(this.responseText);

  //   console.log("CheckList - ");
  //   console.log(resfunChecklist);

  //   let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

  //   let valuesResponses = Object.values(resfunChecklist.response);

  //   for (let i = 0; i < valuesResponses.length; i += 1) {
  //     responseCLosed[i] = valuesResponses[i].closed;
  //     responseOpen[i] = valuesResponses[i].open;
  //     responseWIP[i] = valuesResponses[i].work_in_progress;
  //     responseOverdue[i] = valuesResponses[i].overdue;
  //   }

  //   let xLabelsArray = Object.keys(resfunChecklist.response);

  //   for (let i = 0; i < xLabelsArray.length; i += 1) {
  //     xLabelsArray[i] = xLabelsArray[i].split(" ");
  //   }

  //   new Chart(Checklist, {
  //     type: "bar",
  //     data: {
  //       labels: xLabelsArray,
  //       datasets: [
  //         {
  //           label: "Closed",
  //           backgroundColor: "#67c801",
  //           data: responseCLosed,
  //           barThickness: 70,
  //           borderWidth: 1,
  //         },
  //         {
  //           label: "Open",
  //           backgroundColor: "#5E2750",
  //           data: responseOpen,
  //           barThickness: 70,
  //           borderWidth: 1,
  //         },
  //         {
  //           label: "Work In Progress",
  //           backgroundColor: "#01C875",
  //           data: responseWIP,
  //           barThickness: 70,
  //           borderWidth: 1,
  //         },
  //         {
  //           label: "Overdue",
  //           backgroundColor: "#FF5F1F",
  //           data: responseOverdue,
  //           barThickness: 70,
  //           borderWidth: 1,
  //         },
  //       ],
  //     },
  //     options: {
  //       tooltips: {
  //         displayColors: true,
  //         callbacks: {
  //           mode: 'x',
  //         },
  //       },
  //       scales: {
  //         xAxes: {
  //           stacked: true,
  //           gridLines: {
  //             display: false,
  //           }
  //         },
  //         yAxes: {
  //           stacked: true,
  //           ticks: {
  //             beginAtZero: true,
  //           },
  //           type: 'linear',
  //         }
  //       },
  //       responsive: true,
  //       maintainAspectRatio: false,
  //       plugins: {
  //         datalabels: {
  //           color: "#000000",
  //           anchor: "end",
  //           align: "end",
  //           offset: -6,
  //           font: {
  //             size: "10",
  //             weight: 'bold'
  //           }
  //         },
  //         legend: {
  //           display: true,
  //           position: "bottom",
  //         },
  //       },
  //     },
  //     plugins: [ChartDataLabels],
  //   });

  //   loaderChecklist.style.display = "none";

  //   // if (resfunChartTicket.response == 0) {
  //   //   ChecklistNoData.style.display = "block";
  //   //   Checklist.style.display = "none";
  //   // } else {
  //   // ChecklistNoData.style.display = "none";
  //   Checklist.style.display = "block";
  //   // }
  // };

  // xhr_object.send();


  xhr_object.onload = function () {
    resfunChecklist = JSON.parse(this.responseText);

    console.log("CheckList - ");
    console.log(resfunChecklist);

    const labels = Object.keys(resfunChecklist.response.Checklist);
    const data = Object.values(resfunChecklist.response.Checklist);

    // let responseCLosed = [], responseOpen = [], responseWIP = [], responseOverdue = [];

    // responseCLosed.push(resfunChecklist.response.Checklist.closed);
    // responseOpen.push(resfunChecklist.response.Checklist.open);
    // responseWIP.push(resfunChecklist.response.Checklist.work_in_progress);
    // responseOverdue.push(resfunChecklist.response.Checklist.overdue);

    // let xLabelsArray = ["Checklist"];

    originalChartConfigChecklist = {
      type: "bar",
      // data: {
      //   labels: xLabelsArray,
      //   datasets: [
      //     {
      //       label: "Closed",
      //       backgroundColor: "#67c801",
      //       data: responseCLosed,
      //       barThickness: 20,
      //       borderWidth: 1,
      //     },
      //     {
      //       label: "Open",
      //       backgroundColor: "#5E2750",
      //       data: responseOpen,
      //       barThickness: 20,
      //       borderWidth: 1,
      //     },
      //     {
      //       label: "Work In Progress",
      //       backgroundColor: "#01C875",
      //       data: responseWIP,
      //       barThickness: 20,
      //       borderWidth: 1,
      //     },
      //     {
      //       label: "Overdue",
      //       backgroundColor: "#FF5F1F",
      //       data: responseOverdue,
      //       barThickness: 20,
      //       borderWidth: 1,
      //     },
      //   ],
      // },

      data: {
        labels: labels,
        datasets: [
          {
            label: " Checklist",
            backgroundColor: ["#67c801", "#5E2750", "#01C875", "#FF5F1F"],
            data: data,
            borderWidth: 1,
            stack: "Stack 0",
          }
        ],
      },


      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: [{
            stacked: false,
            gridLines: {
              display: false,
            }
          }],
          yAxes: [{
            stacked: false,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }]
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            labels: {
              generateLabels: function (chart) {
                const data = chart.data;
                if (data.labels.length && data.datasets.length) {
                  return data.labels.map((label, i) => ({
                    text: label,
                    fillStyle: data.datasets[0].backgroundColor[i],
                    hidden: false,
                    lineCap: 'butt',
                    lineDash: [],
                    lineDashOffset: 0,
                    lineJoin: 'miter',
                    lineWidth: 0,
                    strokeStyle: 'rgba(0,0,0,0)',
                    // Custom legend item with rectangle point style
                    pointStyle: 'rect',
                    rotation: 0
                  }));
                }
                return [];
              }
            },
            display: true,
            position: "bottom",
            align: "center"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(Checklist, originalChartConfigChecklist)


    loaderChecklist.style.display = "none";

    // if (resfunChartTicket.response == 0) {
    //   ChecklistNoData.style.display = "block";
    //   Checklist.style.display = "none";
    // } else {
    // ChecklistNoData.style.display = "none";
    Checklist.style.display = "block";
    // }


    infoChecklistIcon.addEventListener("click", InfoModal);
    let ChecklistDiv = document.getElementById('ChecklistDiv');
    let closeChecklist = document.getElementById('closeChecklist');
    function InfoModal(event) {
      event.stopPropagation();
      ChecklistDiv.style.display = "block";
      if (resfunChecklist.info) {
        let ChecklistInfo = document.getElementById("ChecklistInfo");
        let ChecklistInfo2 = document.getElementById("ChecklistInfo2");
        let ChecklistInfo3 = document.getElementById("ChecklistInfo3");
        let ChecklistInfo4 = document.getElementById("ChecklistInfo4");
        let ChecklistInfo5 = document.getElementById("ChecklistInfo5");
        let ChecklistInfo6 = document.getElementById("ChecklistInfo6");

        ChecklistInfo.innerHTML = "<b>Formula :</b> " + resfunChecklist.info.formula;
        ChecklistInfo2.innerHTML = "<b>Info  : </b>" + resfunChecklist.info.info;
        ChecklistInfo3.innerHTML = "<b>Closed Checklist :</b> " + resfunChecklist.info.checklist_status.Checklist.Closed;
        ChecklistInfo4.innerHTML = "<b>Open Checklist :</b> " + resfunChecklist.info.checklist_status.Checklist.Open;
        ChecklistInfo5.innerHTML = "<b>Work in progress Checklist :</b> " + resfunChecklist.info.checklist_status.Checklist["Work in progress"];
        ChecklistInfo6.innerHTML = "<b>Overdue Checklist :</b> " + resfunChecklist.info.checklist_status.Checklist.Overdue;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!ChecklistDiv.contains(event.target) && event.target.id !== 'infoChecklistIcon') {
        closeChecklistDiv();
      }
    });
    closeChecklist.addEventListener("click", closeChecklistDiv);
    function closeChecklistDiv() {
      ChecklistDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ChecklistDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElement_checklist

    function restoreOriginalChartChecklist() {

      if (originalChartConfigChecklist) {
        myChart.destroy();
        funChecklist();
      }
    }

    refreshIconElement_checklist.addEventListener("click", restoreOriginalChartChecklist);
  };

  xhr_object.send();



}


// ChecklistTop,ChecklistTopNoData,loaderTopChecklist

function funChecklistTop() {
  let ChecklistTopNoData = document.getElementById("ChecklistTopNoData");
  let ChecklistTop = document.getElementById("ChecklistTop");
  let loaderTopChecklist = document.getElementById("loaderTopChecklist");


  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getChecklistTop + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getChecklistTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getChecklistTop +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );


  xhr_object.onload = function () {
    resfunChecklistTop = JSON.parse(this.responseText);

    console.log("CheckList Top---------------------- - ");
    console.log(resfunChecklistTop);

    const labels = (resfunChecklistTop.response.map(item => item[1]));
    const data = (resfunChecklistTop.response.map(item => item[0]));


    originalChartConfigTopChecklist = {
      type: "bar",
      data: {
        labels: labels,
        datasets: [
          {
            label: "Checklist",
            backgroundColor: ["#67c801", "#5E2750", "#01C875", "#FF5F1F"],
            data: data,
            borderWidth: 1,
            stack: "Stack 0",
          }
        ],
      },


      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: [{
            stacked: false,
            gridLines: {
              display: false,
            }
          }],
          yAxes: [{
            stacked: false,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }]
        },
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 8) + ("..");
              }
            }
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },

          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(ChecklistTop, originalChartConfigTopChecklist)

    loaderTopChecklist.style.display = "none";

    // if (resfunChartTicket.response == 0) {
    //   ChecklistNoData.style.display = "block";
    //   Checklist.style.display = "none";
    // } else {
    // ChecklistNoData.style.display = "none";
    ChecklistTop.style.display = "block";
    // }

    // refreshIconElement_Top10Checklist


    refreshIconElement_Top10Checklist.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigTopChecklist) {
        myChart.destroy();
        loaderTopChecklist.style.display = "block";
        funChecklistTop();

      }
    }


    infoTop10ChecklistIcon.addEventListener("click", InfoModal);
    let Top10ChecklistDiv = document.getElementById('Top10ChecklistDiv');
    let closeTop10Checklist = document.getElementById('closeTop10Checklist');
    function InfoModal(event) {
      event.stopPropagation();
      Top10ChecklistDiv.style.display = "block";
      if (resfunChecklistTop.info) {
        let Top10ChecklistInfo = document.getElementById("Top10ChecklistInfo");
        let Top10ChecklistInfo2 = document.getElementById("Top10ChecklistInfo2");


        Top10ChecklistInfo.innerHTML = "<b>Formula :</b> " + resfunChecklistTop.info.formula;
        Top10ChecklistInfo2.innerHTML = "<b>Info  : </b>" + resfunChecklistTop.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!Top10ChecklistDiv.contains(event.target) && event.target.id !== 'infoTop10ChecklistIcon') {
        closeTop10ChecklistDiv();
      }
    });
    closeTop10Checklist.addEventListener("click", closeTop10ChecklistDiv);
    function closeTop10ChecklistDiv() {
      Top10ChecklistDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    Top10ChecklistDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };

  xhr_object.send();



}

function funInventoryConsumption() {
  // loaderInventoryConsumption,inventoryConsumptionNoData,tblInventoryConsumptioninfo,tablebodyInventoryConsumption
  let inventoryConsumptionNoData = document.getElementById(
    "inventoryConsumptionNoData"
  );
  let tablebodyInventoryConsumption = document.getElementById(
    "tablebodyInventoryConsumption"
  );
  let tblInventoryConsumptioninfo = document.getElementById(
    "tblInventoryConsumptioninfo"
  );
  let loaderInventoryConsumption = document.getElementById(
    "loaderInventoryConsumption"
  );

  // tblInventoryConsumptioninfo.style.display = "none";
  // loaderInventoryConsumption.style.display = "block";
  // inventoryConsumptionNoData.style.display = "none";
  console.log(getInventoryConsumption);
  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getInventoryConsumption +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );
  console.log(
    getInventoryConsumption +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );
  console.log("========================================");
  // console.log(globalDateFirst);
  // console.log(getInventoryConsumption);
  xhr_object.onload = function () {
    resfunInventoryConsumption = JSON.parse(this.responseText);
    console.log("InventoryConsumption - ");
    console.log(resfunInventoryConsumption);

    let resfunInventoryConsumptionArray = resfunInventoryConsumption.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunInventoryConsumptionArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][0] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][1] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][2] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][3] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][4] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][5] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][6] +
        `</td>`;

      // `<td>` +
      // resfunInventoryConsumptionArray[x][7] +
      // `</td>` +
      // `<td>` +
      // resfunInventoryConsumptionArray[x][8] +
      // `</td>`  +`</tr>`;
      // `<td>` +
      // resfunInventoryConsumptionArray[x][9] +
      // `</td>`
      if (
        resfunInventoryConsumptionArray[x][7] < 0 ||
        resfunInventoryConsumptionArray[x][7] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunInventoryConsumptionArray[x][7] + `</td>`;
      }
      if (
        resfunInventoryConsumptionArray[x][8] < 0 ||
        resfunInventoryConsumptionArray[x][8] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunInventoryConsumptionArray[x][8] + `</td>`;
      }
      +`</tr>`;
    }
    tablebodyInventoryConsumption.innerHTML = allDetails;

    loaderInventoryConsumption.style.display = "none";
    if (resfunInventoryConsumptionArray.length == 0) {
      inventoryConsumptionNoData.style.display = "block";
      tblInventoryConsumptioninfo.style.display = "none";
    } else {
      inventoryConsumptionNoData.style.display = "none";
      tblInventoryConsumptioninfo.style.display = "inline-table";
    }

    // infoInventoryConsumptionIcon,InventoryConsumptionDiv,closeInventoryConsumption,InventoryConsumptionInfo
    infoInventoryConsumptionIcon.addEventListener("click", InfoModal);
    let InventoryConsumptionDiv = document.getElementById('InventoryConsumptionDiv');
    let closeInventoryConsumption = document.getElementById('closeInventoryConsumption');

    function InfoModal(event) {
      event.stopPropagation();
      InventoryConsumptionDiv.style.display = "block";
      if (resfunInventoryReportGreen.info) {
        let InventoryConsumptionInfo = document.getElementById("InventoryConsumptionInfo");


        InventoryConsumptionInfo.innerHTML = "<b>Info :</b> " + resfunInventoryReportGreen.info.info;

      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!InventoryConsumptionDiv.contains(event.target) && event.target.id !== 'infoInventoryConsumptionIcon') {
        closeInventoryConsumptionDiv();
      }
    });

    closeInventoryConsumption.addEventListener("click", closeInventoryConsumptionDiv);

    function closeInventoryConsumptionDiv() {
      InventoryConsumptionDiv.style.display = "none";
    }

    InventoryConsumptionDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_inventoryConsumption

    refreshIconElement_inventoryConsumption.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      funInventoryConsumption();
    }
  };
  xhr_object.send();
}

function funInventoryConsumptionGreen() {
  // loaderInventoryConsumptionGreen,inventoryConsumptionGreenNoData,tblInventoryConsumptionGreeninfo,tablebodyInventoryConsumptionGreen
  let inventoryConsumptionGreenNoData = document.getElementById(
    "inventoryConsumptionGreenNoData"
  );
  let tablebodyInventoryConsumptionGreen = document.getElementById(
    "tablebodyInventoryConsumptionGreen"
  );
  let tblInventoryConsumptionGreeninfo = document.getElementById(
    "tblInventoryConsumptionGreeninfo"
  );
  let loaderInventoryConsumptionGreen = document.getElementById(
    "loaderInventoryConsumptionGreen"
  );

  // tblInventoryConsumptionGreeninfo.style.display = "none";
  // loaderInventoryConsumptionGreen.style.display = "block";
  // inventoryConsumptionGreenNoData.style.display = "none";
  console.log(getInventoryConsumptionGreen);
  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getInventoryConsumptionGreen +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );
  console.log(
    getInventoryConsumptionGreen +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );
  console.log("========================================");

  xhr_object.onload = function () {
    resfunInventoryConsumptionGreen = JSON.parse(this.responseText);
    console.log("InventoryConsumption -green ");
    console.log(resfunInventoryConsumptionGreen);

    let resfunInventoryConsumptionGreenArray =
      resfunInventoryConsumptionGreen.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunInventoryConsumptionGreenArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][0] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][1] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][2] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][3] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][4] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][5] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][6] +
        `</td>`;
      // `<td>` +
      // resfunInventoryConsumptionGreenArray[x][7] +
      // `</td>` +
      // `<td>` +
      // resfunInventoryConsumptionGreenArray[x][8] +
      // `</td>` +
      if (
        resfunInventoryConsumptionGreenArray[x][7] < 0 ||
        resfunInventoryConsumptionGreenArray[x][7] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails +
          `<td>` +
          resfunInventoryConsumptionGreenArray[x][7] +
          `</td>`;
      }
      if (
        resfunInventoryConsumptionGreenArray[x][8] < 0 ||
        resfunInventoryConsumptionGreenArray[x][8] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails +
          `<td>` +
          resfunInventoryConsumptionGreenArray[x][8] +
          `</td>`;
      }
      +`</tr>`;
    }
    tablebodyInventoryConsumptionGreen.innerHTML = allDetails;

    loaderInventoryConsumptionGreen.style.display = "none";
    if (resfunInventoryConsumptionGreenArray.length == 0) {
      inventoryConsumptionGreenNoData.style.display = "block";
      tblInventoryConsumptionGreeninfo.style.display = "none";
    } else {
      inventoryConsumptionGreenNoData.style.display = "none";
      tblInventoryConsumptionGreeninfo.style.display = "inline-table";
    }

    // refreshIconElement_inventoryConsumptionGreen


    refreshIconElement_inventoryConsumptionGreen.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      loaderInventoryConsumptionGreen.style.display = "block";
      tblInventoryConsumptionGreeninfo.style.display = "none";
      funInventoryConsumptionGreen();
    }

    // infoInventoryConsumptionGreenIcon,InventoryConsumptionGreenDiv,closeInventoryConsumptionGreen,InventoryConsumptionGreenInfo

    infoInventoryConsumptionGreenIcon.addEventListener("click", InfoModal);
    let InventoryConsumptionGreenDiv = document.getElementById('InventoryConsumptionGreenDiv');
    let closeInventoryConsumptionGreen = document.getElementById('closeInventoryConsumptionGreen');

    function InfoModal(event) {
      event.stopPropagation();
      InventoryConsumptionGreenDiv.style.display = "block";
      if (resfunInventoryConsumptionGreen.info) {
        let InventoryConsumptionGreenInfo = document.getElementById("InventoryConsumptionGreenInfo");
        let InventoryConsumptionGreenInfo2 = document.getElementById("InventoryConsumptionGreenInfo2");

        InventoryConsumptionGreenInfo.innerHTML = "<b>Formula :</b> " + resfunInventoryConsumptionGreen.info.formula;
        InventoryConsumptionGreenInfo2.innerHTML = "<b>Info :</b> " + resfunInventoryConsumptionGreen.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!InventoryConsumptionGreenDiv.contains(event.target) && event.target.id !== 'infoInventoryConsumptionGreenIcon') {
        closeInventoryConsumptionGreenDiv();
      }
    });

    closeInventoryConsumptionGreen.addEventListener("click", closeInventoryConsumptionGreenDiv);

    function closeInventoryConsumptionGreenDiv() {
      InventoryConsumptionGreenDiv.style.display = "none";
    }

    InventoryConsumptionGreenDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

// pie
function funInventoryReport() {
  // loaderInventoryReport,inventoryReportNoData,inventory_report
  let loaderInventoryReport = document.getElementById("loaderInventoryReport");
  let inventoryReportNoData = document.getElementById("inventoryReportNoData");
  let inventory_report = document.getElementById("inventory_report");
  let inventoryReport = document.getElementById("inventoryReport");

  // inventory_report.style.display = "none";
  // loaderInventoryReport.style.display = "block";
  // inventoryReportNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getInventoryReport +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunInventoryReport = JSON.parse(this.responseText);

    console.log("Inventory Report - ");
    console.log(resfunInventoryReport);

    let sum = 0;

    let valueN = [];
    let valueYa = [];

    // let arrayP = [];

    // for (let i = 0; i < resfunInventoryReport.response.length; i++) {
    //   valueN[i] = resfunInventoryReport.response[i].name;
    //   valueYa[i] = resfunInventoryReport.response[i].y;
    // }

    // for (let i = 0; i < valueN.length; i++) {
    //   if (valueYa[i] == null) {
    //     arrayP.push({ name: valueN[i], y: 0 });
    //   } else {
    //     arrayP.push({
    //       name: valueN[i],
    //       y: valueYa[i],
    //     });
    //   }
    // }

    valueN = Object.keys(resfunInventoryReport.response);
    valueYa = Object.values(resfunInventoryReport.response);
    console.log(valueN);
    console.log(valueYa);
    console.log("-----------------");
    let inventoryReportColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];

    // let legendList = "";
    // for (let i = 0; i < valueN.length; i++) {
    //   if (valueN[i] != null) {
    //     legendList +=
    //       '<i class="bi  bi-circle-fill " style="color:' +
    //       inventoryReportColors[i] +
    //       ';"></i> ' +
    //       valueN[i] +
    //       "-" +
    //       valueYa[i];
    //     "<br/>" + "<br/>";
    //   }
    // }
    // inventoryReport.innerHTML = legendList;

    // let total = valueN + valueYa;

    // const centerTexts = {
    //   id: "centerTexts",
    //   afterDatasetsDraw(chart, args, options) {
    //     const {
    //       ctx,
    //       chartArea: { left, right, top, bottom, width, height },
    //     } = chart;
    //     ctx.save();

    //     ctx.font = "bolder 18px Arial";
    //     ctx.fillStyle = "rgba(0, 0, 0, 1)";
    //     ctx.textAlign = "center";
    //     ctx.fillText("Total: " + total, width, height);
    //   },
    // };

    originalChartConfigInventory = {
      type: "bar",
      data: {
        labels: valueN,
        datasets: [
          {
            label: "Inventory Report",
            data: valueYa,
            backgroundColor: inventoryReportColors,
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(inventory_report, originalChartConfigInventory)


    for (let i = 0; i < valueYa.length; i += 1) {
      if (valueYa[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueYa[i];
      }
    }

    loaderInventoryReport.style.display = "none";
    if (sum == 0) {
      inventoryReportNoData.style.display = "block";
      inventory_report.style.display = "none";
    } else {
      inventoryReportNoData.style.display = "none";
      inventory_report.style.display = "block";
    }

    // infoInventoryConsumptionReportIcon,InventoryConsumptionReportDiv,closeInventoryConsumptionReport,InventoryConsumptionReportInfo
    infoInventoryConsumptionReportIcon.addEventListener("click", InfoModal);
    let InventoryConsumptionReportDiv = document.getElementById('InventoryConsumptionReportDiv');
    let closeInventoryConsumptionReport = document.getElementById('closeInventoryConsumptionReport');

    function InfoModal(event) {
      event.stopPropagation();
      InventoryConsumptionReportDiv.style.display = "block";
      if (resfunInventoryReport.info) {
        let InventoryConsumptionReportInfo = document.getElementById("InventoryConsumptionReportInfo");

        InventoryConsumptionReportInfo.innerHTML = "<b>Info :</b> " + resfunInventoryReport.info.info;

      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!InventoryConsumptionReportDiv.contains(event.target) && event.target.id !== 'infoInventoryConsumptionReportIcon') {
        closeInventoryConsumptionReportDiv();
      }
    });

    closeInventoryConsumptionReport.addEventListener("click", closeInventoryConsumptionReportDiv);

    function closeInventoryConsumptionReportDiv() {
      InventoryConsumptionReportDiv.style.display = "none";
    }

    InventoryConsumptionReportDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_inventoryConsumptionReport


    refreshIconElement_inventoryConsumptionReport.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigInventory) {
        myChart.destroy();
        loaderInventoryReport.style.display = "block";
        funInventoryReport();

      }
    }
  };
  xhr_object.send();
}
// pie green
function funInventoryReportGreen() {
  // loaderInventoryReportGreen,inventoryReportGreenNoData,inventory_report_green
  let loaderInventoryReportGreen = document.getElementById(
    "loaderInventoryReportGreen"
  );
  let inventoryReportGreenNoData = document.getElementById(
    "inventoryReportGreenNoData"
  );
  let inventory_report_green = document.getElementById(
    "inventory_report_green"
  );
  let inventoryReportGreen = document.getElementById("inventoryReportGreen");

  // inventory_report.style.display = "none";
  // loaderInventoryReportGreen.style.display = "block";
  // inventoryReportGreenNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getInventoryReportGreen +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunInventoryReportGreen = JSON.parse(this.responseText);

    console.log("Inventory Report - green");
    console.log(resfunInventoryReportGreen);

    let sum = 0;

    let valueName = [];
    let valueY = [];


    valueName = Object.keys(resfunInventoryReportGreen.response);
    valueY = Object.values(resfunInventoryReportGreen.response);
    console.log(valueName);
    console.log(valueY);

    let inventoryReportColor = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];



    originalChartConfigInventoryReportGreen = {
      type: "pie",
      data: {
        labels: valueName,
        datasets: [
          {
            label: "Inventory Report Green",
            data: valueY,
            backgroundColor: inventoryReportColor,
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(inventory_report_green, originalChartConfigInventoryReportGreen)
    for (let i = 0; i < valueY.length; i += 1) {
      if (valueY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueY[i];
      }
    }


    loaderInventoryReportGreen.style.display = "none";
    if (sum == 0) {
      inventoryReportGreenNoData.style.display = "block";
      inventory_report_green.style.display = "none";
    } else {
      inventoryReportGreenNoData.style.display = "none";
      inventory_report_green.style.display = "block";
    }

    // infoInventoryReportGreenIcon,InventoryReportGreenDiv,closeInventoryReportGreen,InventoryReportGreenInfo


    infoInventoryReportGreenIcon.addEventListener("click", InfoModal);
    let InventoryReportGreenDiv = document.getElementById('InventoryReportGreenDiv');
    let closeInventoryReportGreen = document.getElementById('closeInventoryReportGreen');

    function InfoModal(event) {
      event.stopPropagation();
      InventoryReportGreenDiv.style.display = "block";
      if (resfunInventoryReportGreen.info) {
        let InventoryReportGreenInfo = document.getElementById("InventoryReportGreenInfo");
        let InventoryReportGreenInfo2 = document.getElementById("InventoryReportGreenInfo2");

        InventoryReportGreenInfo.innerHTML = "<b>Formula :</b> " + resfunInventoryReportGreen.info.formula;
        InventoryReportGreenInfo2.innerHTML = "<b>Info :</b> " + resfunInventoryReportGreen.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!InventoryReportGreenDiv.contains(event.target) && event.target.id !== 'infoInventoryReportGreenIcon') {
        closeInventoryReportGreenDiv();
      }
    });

    closeInventoryReportGreen.addEventListener("click", closeInventoryReportGreenDiv);

    function closeInventoryReportGreenDiv() {
      InventoryReportGreenDiv.style.display = "none";
    }

    InventoryReportGreenDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_inventoryReportGreen


    refreshIconElement_inventoryReportGreen.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigInventoryReportGreen) {
        myChart.destroy();
        funInventoryReportGreen();

      }
    }
  };
  xhr_object.send();
}

// bar
function funCurrentStock() {
  // loaderCurrentStock,CurrentStockNoData,current-Stock
  let loaderCurrentStock = document.getElementById("loaderCurrentStock");
  let barChartCurrentStock = document.getElementById("current-Stock");
  let CurrentStockNoData = document.getElementById("clusterStatsNoData");

  // barChartCurrentStock.style.display = "none";
  // loaderCurrentStock.style.display = "block";
  // CurrentStockNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getCurrentStock +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunCurrentStock = JSON.parse(this.responseText);
    console.log("Cluster Stats - ");
    console.log(resfunCurrentStock);



    let xLabelsArray = [];
    xLabelsArray = Object.keys(resfunCurrentStock.response);

    let xLabelsArrayCurrent = [];
    let xLabelsArrayMini = [];

    console.log(xLabelsArray);

    let xLabelArrayValue = [];
    xLabelArrayValue = Object.values(resfunCurrentStock.response);

    for (let i = 0; i < xLabelArrayValue.length; i += 1) {
      xLabelsArrayCurrent[i] = xLabelArrayValue[i].Current_Stock;
      xLabelsArrayMini[i] = xLabelArrayValue[i].Minimum_Stock;
      console.log(xLabelsArrayCurrent[i]);
      console.log(xLabelsArrayMini[i]);
    }

    originalChartConfigCurrent = {
      type: "line",
      data: {
        labels: xLabelsArray,
        // labels: ["", "", ""],
        datasets: [
          {
            label: "Minimum Stock",
            backgroundColor: ["#e2445b"],
            data: xLabelsArrayMini,
            tension: 0.4,
            borderColor: ["#e2445b"],
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Current Stock",
            backgroundColor: ["#01c875"],
            data: xLabelsArrayCurrent,
            tension: 0.4,
            borderColor: ["#01c875"],
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            stacked: false,
          },
          y: {
            stacked: false,
            title: {
              display: true,
              text: "Total steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(barChartCurrentStock, originalChartConfigCurrent)

    loaderCurrentStock.style.display = "none";
    if (xLabelsArray.length == 0) {
      // CurrentStockNoData.style.display = "block";
      barChartCurrentStock.style.display = "none";
    } else {
      // CurrentStockNoData.style.display = "none";
      barChartCurrentStock.style.display = "block";
    }

    // infoCurrentStockIcon,CurrentStockDiv,closeCurrentStock,CurrentStockInfo
    infoCurrentStockIcon.addEventListener("click", InfoModal);
    let CurrentStockDiv = document.getElementById('CurrentStockDiv');
    let closeCurrentStock = document.getElementById('closeCurrentStock');

    function InfoModal(event) {
      event.stopPropagation();
      CurrentStockDiv.style.display = "block";
      if (resfunCurrentStock.info) {
        let CurrentStockInfo = document.getElementById("CurrentStockInfo");
        let CurrentStockInfo2 = document.getElementById("CurrentStockInfo2");
        let CurrentStockInfo3 = document.getElementById("CurrentStockInfo3");

        CurrentStockInfo.innerHTML = "<b>Formula :</b> " + resfunCurrentStock.info.formula;
        CurrentStockInfo2.innerHTML = "<b>Current stock info :</b> " + resfunCurrentStock.info.current_stock_info;
        CurrentStockInfo3.innerHTML = "<b>Minimum stock info :</b> " + resfunCurrentStock.info.minimum_stock_info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!CurrentStockDiv.contains(event.target) && event.target.id !== 'infoCurrentStockIcon') {
        closeCurrentStockDiv();
      }
    });

    closeCurrentStock.addEventListener("click", closeCurrentStockDiv);

    function closeCurrentStockDiv() {
      CurrentStockDiv.style.display = "none";
    }

    CurrentStockDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_CurrentStock

    refreshIconElement_CurrentStock.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigCurrent) {
        myChart.destroy();
        funCurrentStock();

      }
    }
  };
  xhr_object.send();
}

// bar green
function funCurrentStockGreen() {
  // loaderCurrentStockGreen,CurrentStockGreenNoData,current-Stock-Green
  let loaderCurrentStockGreen = document.getElementById("loaderCurrentStockGreen");
  let barChartCurrentStockGreen = document.getElementById(
    "current-Stock-Green"
  );
  let CurrentStockGreenNoData = document.getElementById(
    "CurrentStockGreenNoData"
  );

  // barChartCurrentStockGreen.style.display = "none";
  // loaderCurrentStockGreen.style.display = "none";
  // CurrentStockGreenNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getCurrentStockGreen +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunCurrentStockGreen = JSON.parse(this.responseText);
    console.log("current Stock----------------- - green ");
    console.log(resfunCurrentStockGreen);

    let xLabelsArrays = [];
    xLabelsArrays = Object.keys(resfunCurrentStockGreen.response);
    // let xLabelsArray = resfunCurrentStock.leaderboard;

    let xLabelsArrayCs = [];
    let xLabelsArrayMs = [];
    // object.value
    let xLabelArrayV = [];
    xLabelArrayV = Object.values(resfunCurrentStockGreen.response);

    for (let i = 0; i < xLabelArrayV.length; i += 1) {
      console.log(xLabelsArrays[i].Current_Stock);
      console.log(xLabelsArrays[i].Minimum_Stock);
      xLabelsArrayCs[i] = xLabelArrayV[i].Current_Stock;
      xLabelsArrayMs[i] = xLabelArrayV[i].Minimum_Stock;
    }

    originalChartConfigCurrentGreenStock = {
      type: "line",
      data: {
        labels: xLabelsArrays,
        // labels: ["", "", ""],
        datasets: [
          {
            label: "Minimum Stock",
            backgroundColor: ["#e2445b"],
            data: xLabelsArrayMs,
            tension: 0.4,
            borderColor: ["#e2445b"],
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Current Stock",
            backgroundColor: ["#01c875"],
            data: xLabelsArrayCs,
            tension: 0.4,
            borderColor: ["#01c875"],
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
            title: {
              display: true,
              text: "Total steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(barChartCurrentStockGreen, originalChartConfigCurrentGreenStock)

    loaderCurrentStockGreen.style.display = "none";
    if (xLabelsArrays.length == 0) {
      CurrentStockGreenNoData.style.display = "block";
      barChartCurrentStockGreen.style.display = "none";
    } else {
      CurrentStockGreenNoData.style.display = "none";
      barChartCurrentStockGreen.style.display = "block";
    }

    // infoCurrentStockGreenIcon ,CurrentStockGreenDiv,closeCurrentStockGreen ,CurrentStockGreenInfo

    infoCurrentStockGreenIcon.addEventListener("click", InfoModal);
    let CurrentStockGreenDiv = document.getElementById('CurrentStockGreenDiv');
    let closeCurrentStockGreen = document.getElementById('closeCurrentStockGreen');

    function InfoModal(event) {
      event.stopPropagation();
      CurrentStockGreenDiv.style.display = "block";
      if (resfunCurrentStockGreen.info) {
        let CurrentStockGreenInfo = document.getElementById("CurrentStockGreenInfo");
        let CurrentStockGreenInfo2 = document.getElementById("CurrentStockGreenInfo2");

        CurrentStockGreenInfo.innerHTML = "<b>Current stock info :</b> " + resfunCurrentStockGreen.info.current_stock_info;
        CurrentStockGreenInfo2.innerHTML = "<b>Minimum stock info :</b> " + resfunCurrentStockGreen.info.minimum_stock_info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!CurrentStockGreenDiv.contains(event.target) && event.target.id !== 'infoCurrentStockGreenIcon') {
        closeCurrentStockGreenDiv();
      }
    });

    closeCurrentStockGreen.addEventListener("click", closeCurrentStockGreenDiv);

    function closeCurrentStockGreenDiv() {
      CurrentStockGreenDiv.style.display = "none";
    }

    CurrentStockGreenDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    function restoreOriginalChartGreen() {
      if (originalChartConfigCurrentGreenStock) {
        myChart.destroy();
        loaderCurrentStockGreen.style.display = "block";
        funCurrentStockGreen();

      }
    }

    refreshIconElement_currentStockGreen.addEventListener("click", restoreOriginalChartGreen);

    // refreshIconElement_currentStockGreen


  };
  xhr_object.send();
}

// loaderTechnicalChecklist,TechnicalChecklistNoData, TechnicalChecklist, downloadTechnicalChecklist
function funTechnicalChecklist() {

  let TechnicalChecklistNoData = document.getElementById("TechnicalChecklistNoData");
  let TechnicalChecklist = document.getElementById("TechnicalChecklist");
  let loaderTechnicalChecklist = document.getElementById("loaderTechnicalChecklist");

  // loaderTechnicalChecklist.style.display = "block";
  // TechnicalChecklistNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getTechnicalChecklist + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getTechnicalChecklist +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("Technical Checklist");
    console.log(
      getTechnicalChecklist +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true
    );
  }

  xhr_object.onload = function () {
    resfunTechnicalChecklist = JSON.parse(this.responseText);
    console.log("TechnicalChecklist -llllllllllllllllllllllllllll ");
    console.log(resfunTechnicalChecklist.response);
    // const labels = Object.keys(resfunTechnicalChecklist.response);
    // const data = Object.values(resfunTechnicalChecklist.response);
    let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

    let valuesResponses = Object.values(resfunTechnicalChecklist.response);

    for (let i = 0; i < valuesResponses.length; i += 1) {
      responseCLosed[i] = valuesResponses[i].closed;
      responseOpen[i] = valuesResponses[i].open;
      responseWIP[i] = valuesResponses[i].work_in_progress;
      responseOverdue[i] = valuesResponses[i].overdue;
    }

    let xLabelsArray = Object.keys(resfunTechnicalChecklist.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }

    let myChart;
    // Added now
    myChart = new Chart(TechnicalChecklist, {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Closed",
            backgroundColor: "#67c801",
            data: responseCLosed,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Open",
            backgroundColor: "#5E2750",
            data: responseOpen,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Work In Progress",
            backgroundColor: "#01C875",
            data: responseWIP,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Overdue",
            backgroundColor: "#FF5F1F",
            data: responseOverdue,
            barThickness: 70,
            borderWidth: 1,
          },
        ],
      },
      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: {
            stacked: true,
            gridLines: {
              display: false,
            }
          },
          yAxes: {
            stacked: true,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
          formatter: function (value, context) {
            // Hide label if value is zero
            return value === 0 ? '' : value;
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderTechnicalChecklist.style.display = "none";

    if (resfunTechnicalChecklist.response.total == 0) {
      TechnicalChecklistNoData.style.display = "block";
      TechnicalChecklist.style.display = "none";
    } else {
      // TechnicalChecklistNoData.style.display = "none";
      TechnicalChecklist.style.display = "block";
    }


    infoTechnicalChecklistIcon.addEventListener("click", InfoModal);
    let TechnicalChecklistDiv = document.getElementById('TechnicalChecklistDiv');
    let closeTechnicalChecklist = document.getElementById('closeTechnicalChecklist');
    function InfoModal(event) {
      event.stopPropagation();
      TechnicalChecklistDiv.style.display = "block";
      if (resfunTechnicalChecklist.info) {
        let TechnicalChecklistInfo = document.getElementById("TechnicalChecklistInfo");
        let TechnicalChecklistInfo2 = document.getElementById("TechnicalChecklistInfo2");


        TechnicalChecklistInfo.innerHTML = "<b>Formula : </b>" + resfunTechnicalChecklist.info.formula;
        TechnicalChecklistInfo2.innerHTML = "<b>Info  : </b>" + resfunTechnicalChecklist.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TechnicalChecklistDiv.contains(event.target) && event.target.id !== 'infoTechnicalChecklistIcon') {
        closeTechnicalChecklistDiv();
      }
    });
    closeTechnicalChecklist.addEventListener("click", closeTechnicalChecklistDiv);
    function closeTechnicalChecklistDiv() {
      TechnicalChecklistDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TechnicalChecklistDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElementTechnicalChecklist

    function restoreOriginal() {
      if (TechnicalChecklist) {
        myChart.destroy();
        loaderTechnicalChecklist.style.display = "block";
        funTechnicalChecklist()
      }
    }

    refreshIconElementTechnicalChecklist.addEventListener("click", restoreOriginal);


  };

  xhr_object.send();

}

// loaderNonTechnicalChecklist, NonTechnicalChecklistNoData, NonTechnicalChecklist
// downloadNonTechnicalChecklist
function funNonTechnicalChecklist() {
  let NonTechnicalChecklistNoData = document.getElementById("NonTechnicalChecklistNoData");
  let NonTechnicalChecklist = document.getElementById("NonTechnicalChecklist");
  let loaderNonTechnicalChecklist = document.getElementById("loaderNonTechnicalChecklist");

  // loaderNonTechnicalChecklist.style.display = "block";
  // NonTechnicalChecklistNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getNonTechnicalChecklist + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getNonTechnicalChecklist +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("NonTechnicalChecklist");
    console.log(
      getNonTechnicalChecklist +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true
    );
  }

  xhr_object.onload = function () {
    resfunNonTechnicalChecklist = JSON.parse(this.responseText);
    console.log("NonTechnicalChecklist - ");
    console.log(resfunNonTechnicalChecklist);
    // const labels = Object.keys(resfunNonTechnicalChecklist.response);
    // const data = Object.values(resfunNonTechnicalChecklist.response);

    let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

    let valuesResponses = Object.values(resfunNonTechnicalChecklist.response);

    for (let i = 0; i < valuesResponses.length; i += 1) {
      responseCLosed[i] = valuesResponses[i].closed;
      responseOpen[i] = valuesResponses[i].open;
      responseWIP[i] = valuesResponses[i].work_in_progress;
      responseOverdue[i] = valuesResponses[i].overdue;
    }

    let xLabelsArray = Object.keys(resfunNonTechnicalChecklist.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }

    // Added now
    originalChartConfigNonTechnical = {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Closed",
            backgroundColor: "#67c801",
            data: responseCLosed,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Open",
            backgroundColor: "#5E2750",
            data: responseOpen,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Work In Progress",
            backgroundColor: "#01C875",
            data: responseWIP,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Overdue",
            backgroundColor: "#FF5F1F",
            data: responseOverdue,
            barThickness: 70,
            borderWidth: 1,
          },
        ],
      },
      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: {
            stacked: true,
            gridLines: {
              display: false,
            }
          },
          yAxes: {
            stacked: true,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          formatter: function (value, context) {
            // Hide label if value is zero
            return value === 0 ? '' : value;
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(NonTechnicalChecklist, originalChartConfigNonTechnical)

    loaderNonTechnicalChecklist.style.display = "none";

    if (resfunNonTechnicalChecklist.response.total == 0) {
      NonTechnicalChecklistNoData.style.display = "block";
      NonTechnicalChecklist.style.display = "none";
    } else {
      // NonTechnicalChecklistNoData.style.display = "none";
      NonTechnicalChecklist.style.display = "block";
    }


    infoNonTechnicalChecklistIcon.addEventListener("click", InfoModal);
    let NonTechnicalChecklistDiv = document.getElementById('NonTechnicalChecklistDiv');
    let closeNonTechnicalChecklist = document.getElementById('closeNonTechnicalChecklist');
    function InfoModal(event) {
      event.stopPropagation();
      NonTechnicalChecklistDiv.style.display = "block";
      if (resfunNonTechnicalChecklist.info) {
        let NonTechnicalChecklistInfo = document.getElementById("NonTechnicalChecklistInfo");
        let NonTechnicalChecklistInfo2 = document.getElementById("NonTechnicalChecklistInfo2");


        NonTechnicalChecklistInfo.innerHTML = "<b>Formula : </b>" + resfunNonTechnicalChecklist.info.formula;
        NonTechnicalChecklistInfo2.innerHTML = "<b>Info  : </b>" + resfunNonTechnicalChecklist.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!NonTechnicalChecklistDiv.contains(event.target) && event.target.id !== 'infoNonTechnicalChecklistIcon') {
        closeNonTechnicalChecklistDiv();
      }
    });
    closeNonTechnicalChecklist.addEventListener("click", closeNonTechnicalChecklistDiv);
    function closeNonTechnicalChecklistDiv() {
      NonTechnicalChecklistDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    NonTechnicalChecklistDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElementNonTechnicalChecklist

    function restoreOriginal() {
      if (originalChartConfigNonTechnical) {
        myChart.destroy();
        loaderNonTechnicalChecklist.style.display = "block";
        funNonTechnicalChecklist()
      }
    }

    refreshIconElementNonTechnicalChecklist.addEventListener("click", restoreOriginal);


  };

  xhr_object.send();

}








// dryWasteSegregation,loaderDryWaste,dryWasteNoData

function funDryWasteSegregation() {
  let dryWasteNoData = document.getElementById("dryWasteNoData");
  let dryWasteSegregation = document.getElementById("dryWasteSegregation");
  let loaderDryWaste = document.getElementById("loaderDryWaste");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getDryWasteSegregation + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getDryWasteSegregation + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getDryWasteSegregation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getDryWasteSegregation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunDryWasteSegregation = JSON.parse(this.responseText);

    console.log("Dry Waste Segregation--------------------  - ");
    console.log(resfunDryWasteSegregation);

    // Extract data from the response
    let data = resfunDryWasteSegregation.response;

    if (!data || Object.keys(data).length === 0) {
      dryWasteNoData.style.display = "block";
      loaderDryWaste.style.display = "none";
      dryWasteSegregation.style.display = "none";
      return;
    } else {
      dryWasteNoData.style.display = "none";
      dryWasteSegregation.style.display = "block";
    }

    let labels = Object.keys(data);
    let datasets = Object.values(data[labels[0]]).map((value, index) => ({
      label: value[1],
      data: labels.map((label) => parseInt(data[label][index])),
      backgroundColor: [
        "#730000",
        "#FDAB3D",
        "#E95420",
        "#77216F",
      ][index],
      borderColor: [
        "#730000",
        "#FDAB3D",
        "#E95420",
        "#77216F",
      ][index],
      borderWidth: 1,
    }));

    // Create the chart
    originalChartConfigDry = {
      type: "bar",
      data: {
        labels: labels,
        datasets: datasets,
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
            title: {
              display: true,
              text: "Sites",
              padding: {
                top: 20,
              },
            },
          },
          y: {
            stacked: true,
            title: {
              display: true,
              text: "Dry Garbage in kgs",
            },
          },
        },
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true,
            },
            display: true,
            position: "top",
            align: "end",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(dryWasteSegregation, originalChartConfigDry);
    loaderDryWaste.style.display = "none";
    if (!resfunDryWasteSegregation.response || Object.keys(resfunDryWasteSegregation.response).length === 0) {
      dryWasteNoData.style.display = "block";
      dryWasteSegregation.style.display = "none";
    } else {
      dryWasteNoData.style.display = "none";
      dryWasteSegregation.style.display = "block";
    }


    // infoSiteWiseDryWasteIcon,SiteWiseDryWasteDiv,closeSiteWiseDryWaste,SiteWiseDryWasteInfo


    infoSiteWiseDryWasteIcon.addEventListener("click", InfoModal);
    let SiteWiseDryWasteDiv = document.getElementById('SiteWiseDryWasteDiv');
    let closeSiteWiseDryWaste = document.getElementById('closeSiteWiseDryWaste');
    function InfoModal(event) {
      event.stopPropagation();
      SiteWiseDryWasteDiv.style.display = "block";
      if (resfunDryWasteSegregation.info) {
        let SiteWiseDryWasteInfo = document.getElementById("SiteWiseDryWasteInfo");
        let SiteWiseDryWasteInfo2 = document.getElementById("SiteWiseDryWasteInfo2");

        SiteWiseDryWasteInfo.innerHTML = "<b>Info :</b> " + resfunDryWasteSegregation.info.info;
        SiteWiseDryWasteInfo2.innerHTML = "<b>Formula :</b> " + resfunDryWasteSegregation.info.formula;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!SiteWiseDryWasteDiv.contains(event.target) && event.target.id !== 'infoSiteWiseDryWasteIcon') {
        closeSiteWiseDryWasteDiv();
      }
    });

    closeSiteWiseDryWaste.addEventListener("click", closeSiteWiseDryWasteDiv);
    function closeSiteWiseDryWasteDiv() {
      SiteWiseDryWasteDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    SiteWiseDryWasteDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    refreshIconElement_waste.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigDry) {
        myChart.destroy();
        loaderDryWaste.style.display = "block";
        funDryWasteSegregation();
      }
    }
  };


  xhr_object.send();


}



function funAssetBreakDown() {  // loaderAssetBreakDown,AssetBreakDownNoData,AssetBreakDown ,assetbreak
  let AssetBreakDownNoData = document.getElementById("AssetBreakDownNoData");
  let AssetBreakDown = document.getElementById("AssetBreakDown");
  let loaderAssetBreakDown = document.getElementById(
    "loaderAssetBreakDown"
  );
  // let assetbreak = document.getElementById("assetbreak");

  // if (globalType == "daily") {
  //   assetbreak.innerHTML = "Asset Breakdown for " + globalDateFirst;
  // } else {
  //   assetbreak.innerHTML = "Asset Breakdown for " +
  //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond)
  // }

  // loaderAssetBreakDown.style.display = "block";
  // AssetBreakDownNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getAssetBreakDown + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getAssetBreakDown + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getAssetBreakDown +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getAssetBreakDown +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunAssetBreakDown = JSON.parse(this.responseText);

    console.log("Asset Breakdown  - ");
    console.log(resfunAssetBreakDown);

    let arrAllObjects = Object.values(resfunAssetBreakDown.response);
    let arrCriticalBreak = [];
    let arrCriticalOperational = [];
    let arrNonCriticalBreak = [];
    let arrNonCriticalOperational = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrCriticalBreak.push(arrAllObjects[i].critical_breakdown_count);
      // arrCriticalOperational.push(arrAllObjects[i].Critical_Operational);
      arrNonCriticalBreak.push(arrAllObjects[i].non_critical_breakdown_count);
      // arrNonCriticalOperational.push(arrAllObjects[i].Non_Critical_Operational);

    }

    // Added now
    originalChartConfigAssetBreakDown = {
      type: "bar",
      data: {
        labels: Object.keys(resfunAssetBreakDown.response),
        datasets: [
          {
            label: "Critical Breakdown",
            backgroundColor: "rgba(255, 159, 64)",
            data: arrCriticalBreak,
            borderWidth: 1,
            stack: "Stack 0",
          },
          // {
          //   label: "Critical Operational",
          //   backgroundColor: ["#3d5a80"],
          //   data: arrCriticalOperational,
          //   borderWidth: 1,
          //   stack: "Stack 0",
          // },
          {
            label: "Non-Critical Breakdown",
            backgroundColor: ["#555555"],
            data: arrNonCriticalBreak,
            borderWidth: 1,
            stack: "Stack 1",
          },
          // {
          //   label: "Non-Critical Operational",
          //   backgroundColor: ["#98c1d9"],
          //   data: arrNonCriticalOperational,
          //   borderWidth: 1,
          //   stack: "Stack 1",
          // },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Total Breakdown'
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(AssetBreakDown, originalChartConfigAssetBreakDown)
    loaderAssetBreakDown.style.display = "none";

    if (resfunAssetBreakDown.response.length == 0) {
      AssetBreakDownNoData.style.display = "block";
      AssetBreakDown.style.display = "none";
    } else {
      AssetBreakDownNoData.style.display = "none";
      AssetBreakDown.style.display = "block";
    }

    // infoAssetBreakDownIcon,AssetBreakDownDiv,closeAssetBreakDown,AssetBreakDownInfo


    infoAssetBreakDownIcon.addEventListener("click", InfoModal);
    let AssetBreakDownDiv = document.getElementById('AssetBreakDownDiv');
    let closeAssetBreakDown = document.getElementById('closeAssetBreakDown');
    function InfoModal(event) {
      event.stopPropagation();
      AssetBreakDownDiv.style.display = "block";
      if (resfunAssetBreakDown.info) {
        let AssetBreakDownInfo = document.getElementById("AssetBreakDownInfo");
        let AssetBreakDownInfo2 = document.getElementById("AssetBreakDownInfo2");



        AssetBreakDownInfo.innerHTML = "<b>Info :</b> " + resfunAssetBreakDown.info.info;
        AssetBreakDownInfo2.innerHTML = "<b>Formula :</b> " + resfunAssetBreakDown.info.formula;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!AssetBreakDownDiv.contains(event.target) && event.target.id !== 'infoAssetBreakDownIcon') {
        closeAssetBreakDownDiv();
      }
    });
    closeAssetBreakDown.addEventListener("click", closeAssetBreakDownDiv);
    function closeAssetBreakDownDiv() {
      AssetBreakDownDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    AssetBreakDownDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElement_AssetBreakDown

    refreshIconElement_AssetBreakDown.addEventListener("click", restoreOriginalChartAssetBreakDown);

    function restoreOriginalChartAssetBreakDown() {
      if (originalChartConfigAssetBreakDown) {
        myChart.destroy();
        loaderAssetBreakDown.style.display = "block";
        funAssetBreakDown();

      }
    }
  };
  // loaderAssetBreakDown,AssetBreakDownNoData,AssetBreakDown ,assetbreak
  xhr_object.send();
}



let clickedCategoryTicket = true;
function funCategoryTicket() {
  let categoryTicketNoData = document.getElementById("categoryTicketNoData");
  let catagory_ticket = document.getElementById("catagory-ticket");
  let loaderCategoryTicketChart = document.getElementById(
    "loaderCategoryTicketChart"
  );
  let dt2 = document.getElementById("dt2");


  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getUnitCategoryWiseTicketsChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getUnitCategoryWiseTicketsChart + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getUnitCategoryWiseTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getUnitCategoryWiseTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  let currentChartType = "bar";
  xhr_object.onload = function () {
    resfunCategoryTicket = JSON.parse(this.responseText);

    console.log("Category Ticket - ");
    console.log(resfunCategoryTicket);

    // Added now
    originalChartConfigCategory = {
      type: "bar",
      data: {
        labels: resfunCategoryTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCategoryTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCategoryTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 50);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(catagory_ticket, originalChartConfigCategory)
    loaderCategoryTicketChart.style.display = "none";

    if (String(resfunCategoryTicket.response.total_tickets).length == 0) {
      categoryTicketNoData.style.display = "block";
      catagory_ticket.style.display = "none";
    } else {
      categoryTicketNoData.style.display = "none";
      catagory_ticket.style.display = "block";
    }

    // infoUnitCategorywiseIcon,UnitCategorywiseDiv,closeUnitCategorywise,UnitCategorywiseInfo
    infoUnitCategorywiseIcon.addEventListener("click", InfoModal);
    let UnitCategorywiseDiv = document.getElementById('UnitCategorywiseDiv');
    let closeUnitCategorywise = document.getElementById('closeUnitCategorywise');
    function InfoModal(event) {
      event.stopPropagation();
      UnitCategorywiseDiv.style.display = "block";
      if (resfunCategoryTicket.info) {
        let UnitCategorywiseInfo = document.getElementById("UnitCategorywiseInfo");

        UnitCategorywiseInfo.innerHTML = "<b>Info  : </b>" + resfunCategoryTicket.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!UnitCategorywiseDiv.contains(event.target) && event.target.id !== 'infoUnitCategorywiseIcon') {
        closeUnitCategorywisetDiv();
      }
    });
    closeUnitCategorywise.addEventListener("click", closeUnitCategorywisetDiv);
    function closeUnitCategorywisetDiv() {
      UnitCategorywiseDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    UnitCategorywiseDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let CategoryTicketdrillDownLevel = 1;
    let clickedCategoryTicket = true;

    if (!funCategoryTicket.initialized) {
      catagory_ticket.onclick = function (event) {

        if (clickedCategoryTicket == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelCategory").textContent = `Ticket: ${label}`;
            myChart.update();
            const dropdown = (document.getElementById("dataDropdown_category"));
            dropdown.style.display = "block";


          }

          dataDropdown_category.addEventListener("click", function (event) {

            if (event.target.id != "closeDropdown") {
              if (CategoryTicketdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);

                document.getElementById("firstDrillDownUnitCategory").style.display = "block";
                document.getElementById("firstDrillDownUnitCategory").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getTicketCategoryDrillSecond +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log("TicketCategoryDrill  1");
                console.log(apiURL);
                xhr_object.open("GET", apiURL, true);


                downloadCategoryTicketsLink = ip + "fm-excel-download/get-drill-down-chart-categoryWiseTicket/" +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resTicketCategoryDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -1 ");
                  console.log(resTicketCategoryDrill);

                  const labels = Object.keys(resTicketCategoryDrill.response);
                  const datasets = [];

                  // const labelname = label;
                  // console.log(labelname);


                  const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                  for (const status of statuses) {
                    datasets.push({
                      label: status,
                      data: labels.map(label => resTicketCategoryDrill.response[label][status] || 0),
                      backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                      stack: "0"
                    });
                  }

                  const barData = {
                    labels: labels,
                    datasets: datasets,
                  };



                  myChart.destroy();
                  myChart = new Chart(catagory_ticket, {
                    type: "bar",
                    data: barData,
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                CategoryTicketdrillDownLevel = 2;
              }
              else if (CategoryTicketdrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                document.getElementById("firstDrillDownUnitCategory").style.display = "none";
                document.getElementById("secondDrilldownUnitCategory").style.display = "block";
                document.getElementById("secondDrilldownUnitCategory").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getTicketCategoryDrillSecond +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadCategoryTicketsLink = ip + "fm-excel-download/get-drill-down-chart-categoryWiseTicket/" +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;


                xhr_object.onload = function () {
                  resTicketCategoryDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -2 ");
                  console.log(resTicketCategoryDrill);

                  const labels = Object.keys(resTicketCategoryDrill.response);
                  const datasets = [];

                  const statuses = ["Open", "Closed"];

                  for (const status of statuses) {
                    datasets.push({
                      label: status,
                      data: labels.map(label => resTicketCategoryDrill.response[label][status] || 0),
                      backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                      stack: status,

                    });
                  }

                  const barData = {
                    labels: labels,
                    datasets: datasets,
                  };



                  myChart.destroy();
                  myChart = new Chart(catagory_ticket, {
                    type: "bar",
                    data: barData,
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  clickedCategoryTicket = false;
                }

                xhr_object.send();
                CategoryTicketdrillDownLevel = 3;
                clickedCategoryTicket = false;
                return;
              }
            }
            else {
              if (CategoryTicketdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }
            dataDropdown_category.style.display = "none";
          });

        } else if (clickedCategoryTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartConfigCategory) {
        myChart.destroy();
        clickedCategoryTicket = true;
        funCategoryTicket();
        document.getElementById("firstDrillDownUnitCategory").style.display = "none";
        document.getElementById("secondDrilldownUnitCategory").style.display = "none";
      }
    }

    refreshIconElement_category.addEventListener("click", restoreOriginalChart);
  };

  xhr_object.send();
}


function funChartCustomerSentiments() {
  let CustomerSentimentsNoData = document.getElementById("CustomerSentimentsNoData");
  let customerSentiment = document.getElementById("customerSentiment");
  let loaderCustomerSentiments = document.getElementById("loaderCustomerSentiments");
  let sentiments = document.getElementById("sentiments");

  // loaderCustomerSentiments.style.display = "block";
  // customerSentiment.style.display = "none";
  // CustomerSentimentsNoData.style.display = "none";

  // if (globalType == "daily") {
  //   sentiments.innerHTML = "Customer Sentiments for " + globalDateFirst;
  // } else {
  //   sentiments.innerHTML =
  //     "Customer Sentiments for " + globalDateFirst + " to " + globalDateSecond;
  // }

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCustomerSentimentsChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getCustomerSentimentsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getCustomerSentimentsChart +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  xhr_object.onload = function () {
    resfunChartCustomerSentiments = JSON.parse(this.responseText);

    console.log("Customer Sentiments - ");
    console.log(resfunChartCustomerSentiments);


    let total = resfunChartCustomerSentiments.response.Great + resfunChartCustomerSentiments.response.Good + resfunChartCustomerSentiments.response.Okay + resfunChartCustomerSentiments.response.Bad + resfunChartCustomerSentiments.response.Unacceptable;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // let xValues = [], yValues = [];

    // xValues = Object.keys(resfunChartTicket.response.open);
    // yValues = Object.values(resfunChartTicket.response);

    // Added Now
    originalChartConfigSentiment = {
      type: "doughnut",
      data: {
        labels: ["Great", "Good", "Okay", "Bad", "Unacceptable"],
        datasets: [
          {
            label: "Customer",
            backgroundColor: ["#01c875", "#A1CD7A", "#F2C06C", "#F69380", "#D44B52",],
            data: [
              // resfunChartTicket.response.total,
              resfunChartCustomerSentiments.response.Great,
              resfunChartCustomerSentiments.response.Good,
              resfunChartCustomerSentiments.response.Okay,
              resfunChartCustomerSentiments.response.Bad,
              resfunChartCustomerSentiments.response.Unacceptable,

            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels, centerText],
    };

    let myChart = new Chart(customerSentiment, originalChartConfigSentiment)

    // loaderCustomerSentiments.style.display = "none";
    // // CustomerSentimentsNoData.style.display = "none";
    // customerSentiment.style.display = "block";
    // CustomerSentimentsNoData.style.display = "block";
    // loaderCustomerSentiments.style.display = "none";
    if (total == 0) {
      loaderCustomerSentiments.style.display = "none";
      customerSentiment.style.display = "none";
      CustomerSentimentsNoData.style.display = "block";

    } else {
      loaderCustomerSentiments.style.display = "none";
      customerSentiment.style.display = "block";
      // CustomerSentimentsNoData.style.display = "none";
    }

    // infoCustomerSentimentsIcon,CustomerSentimentsDiv,closeCustomerSentiments,CustomerSentimentsInfo

    infoCustomerSentimentsIcon.addEventListener("click", InfoModal);
    let CustomerSentimentsDiv = document.getElementById('CustomerSentimentsDiv');
    let closeCustomerSentiments = document.getElementById('closeCustomerSentiments');
    function InfoModal(event) {
      event.stopPropagation();
      CustomerSentimentsDiv.style.display = "block";
      if (resfunChartCustomerSentiments.info) {
        let CustomerSentimentsInfo = document.getElementById("CustomerSentimentsInfo");


        CustomerSentimentsInfo.innerHTML = "<b>Info  : </b>" + resfunChartCustomerSentiments.info.info;



        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CustomerSentimentsDiv.contains(event.target) && event.target.id !== 'infoCustomerSentimentsIcon') {
        closeCustomerSentimentsDiv();
      }
    });
    closeCustomerSentiments.addEventListener("click", closeCustomerSentimentsDiv);
    function closeCustomerSentimentsDiv() {
      CustomerSentimentsDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CustomerSentimentsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_sentiments
    function restoreOriginalChartSentiment() {

      if (originalChartConfigSentiment) {
        myChart.destroy();
        funChartCustomerSentiments();
      }
    }

    refreshIconElement_sentiments.addEventListener("click", restoreOriginalChartSentiment);


  };

  xhr_object.send();
}

let clickedCategoryProactiveTicket = true;
function funCategoryProactiveTicket() {
  let categoryProactiveTicketNoData = document.getElementById(
    "categoryProactiveTicketNoData"
  );
  let catagory_proactive_ticket = document.getElementById("proactive-ticket");
  let loaderCategoryProactiveTicketChart = document.getElementById(
    "loaderCategoryProactiveTicketChart"
  );
  let dt3 = document.getElementById("dt3");

  // if (globalType == "daily") {
  //   dt3.innerHTML =
  //     "Unit Category-wise Proactive Tickets for " + convertDateFormat(globalDateFirst);
  // } else {
  //   dt3.innerHTML =
  //     "Unit Category-wise Proactive Tickets for " +
  //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond)

  // }

  // loaderCategoryProactiveTicketChart.style.display = "block";
  // categoryProactiveTicketNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getUnitCategoryWiseProactiveTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst,
      true
    );
    console.log(
      getUnitCategoryWiseProactiveTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getUnitCategoryWiseProactiveTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getUnitCategoryWiseProactiveTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunCategoryProactiveTicket = JSON.parse(this.responseText);

    console.log("Proactive - ");
    console.log(resfunCategoryProactiveTicket);

    // Added now
    originalChartConfigProactive = {
      type: "bar",
      data: {
        labels: resfunCategoryProactiveTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCategoryProactiveTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCategoryProactiveTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(catagory_proactive_ticket, originalChartConfigProactive)
    loaderCategoryProactiveTicketChart.style.display = "none";
    if (
      String(resfunCategoryProactiveTicket.response.total_tickets).length == 0
    ) {
      categoryProactiveTicketNoData.style.display = "block";
      catagory_proactive_ticket.style.display = "none";
    } else {
      categoryProactiveTicketNoData.style.display = "none";
      catagory_proactive_ticket.style.display = "block";
    }

    // infoUnitCategorywiseProactiveIcon,UnitCategorywiseProactiveDiv,closeUnitCategorywiseProactive,UnitCategorywiseProactiveInfo

    infoUnitCategorywiseProactiveIcon.addEventListener("click", InfoModal);
    let UnitCategorywiseProactiveDiv = document.getElementById('UnitCategorywiseProactiveDiv');
    let closeUnitCategorywiseProactive = document.getElementById('closeUnitCategorywiseProactive');
    function InfoModal(event) {
      event.stopPropagation();
      UnitCategorywiseProactiveDiv.style.display = "block";
      if (resfunCategoryProactiveTicket.info) {
        let UnitCategorywiseProactiveInfo = document.getElementById("UnitCategorywiseProactiveInfo");

        UnitCategorywiseProactiveInfo.innerHTML = "<b>Info  : </b>" + resfunCategoryProactiveTicket.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!UnitCategorywiseProactiveDiv.contains(event.target) && event.target.id !== 'infoUnitCategorywiseProactiveIcon') {
        closeUnitCategorywiseProactiveDiv();
      }
    });
    closeUnitCategorywiseProactive.addEventListener("click", closeUnitCategorywiseProactiveDiv);
    function closeUnitCategorywiseProactiveDiv() {
      UnitCategorywiseProactiveDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    UnitCategorywiseProactiveDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let CategoryProactivedrillDownLevel = 1;
    let clickedCategoryProactiveTicket = true;

    if (!funCategoryProactiveTicket.initialized) {
      catagory_proactive_ticket.onclick = function (event) {

        if (clickedCategoryProactiveTicket == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelProactive").textContent = `Ticket: ${label}`;

            const dropdown = (document.getElementById("dataDropdown_proactive"));
            dropdown.style.display = "block";

          }

          dataDropdown_proactive.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (CategoryProactivedrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);

                document.getElementById("firstDrillDownUnitCategoryProactive").style.display = "block";
                document.getElementById("firstDrillDownUnitCategoryProactive").textContent = ` - ${selectedOption}`


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getTicketCategoryProactiveDrillSecond +
                  idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);
                downloadCategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-categoryWiseProactiveTicket/" + idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resTicketCategoryProactiveDrill = JSON.parse(this.responseText);
                    console.log("Ticket Category Drill Down - 1");
                    console.log(resTicketCategoryProactiveDrill);

                    const labels = Object.keys(resTicketCategoryProactiveDrill.response);
                    const datasets = [];


                    const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                    for (const status of statuses) {
                      datasets.push({
                        label: status,
                        data: labels.map(label => resTicketCategoryProactiveDrill.response[label][status] || 0),
                        backgroundColor: status === "Open" ? "#e2445b" : "#01c875",

                        stack: "0"
                      });
                    }

                    const barData = {
                      labels: labels,
                      datasets: datasets,
                    };

                    myChart.destroy();
                    myChart = new Chart(catagory_proactive_ticket, {
                      type: "bar",
                      data: barData,
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                            title: {
                              display: true,
                              text: labelname,
                              padding: {
                                top: 20,
                              }
                            }
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }

                xhr_object.send();
                CategoryProactivedrillDownLevel = 2;
              }
              else if (CategoryProactivedrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                document.getElementById("firstDrillDownUnitCategoryProactive").style.display = "none";
                document.getElementById("secondDrilldownUnitCategoryProactive").style.display = "block";
                document.getElementById("secondDrilldownUnitCategoryProactive").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getTicketCategoryProactiveDrillSecond +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);
                downloadCategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-categoryWiseProactiveTicket/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resTicketCategoryProactiveDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -2 ");
                  console.log(resTicketCategoryProactiveDrill);

                  const labels = Object.keys(resTicketCategoryProactiveDrill.response);
                  const datasets = [];
                  // const labelname = label;

                  const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                  for (const status of statuses) {
                    datasets.push({
                      label: status,
                      data: labels.map(label => resTicketCategoryProactiveDrill.response[label][status] || 0),
                      backgroundColor: status === "Open" ? "#e2445b" : "#01c875",

                      stack: "0"
                    });
                  }

                  const barData = {
                    labels: labels,
                    datasets: datasets,
                  };

                  myChart.destroy();
                  myChart = new Chart(catagory_proactive_ticket, {
                    type: "bar",
                    data: barData,
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  clickedCategoryProactiveTicket = false;
                }

                xhr_object.send();

                CategoryProactivedrillDownLevel = 3;
                return;
              }
            }
            else {
              if (CategoryProactivedrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }

            dataDropdown_proactive.style.display = "none";
          });

        } else if (clickedCategoryProactiveTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartConfigProactive) {
        myChart.destroy();
        funCategoryProactiveTicket();
        clickedCategoryProactiveTicket = true;
        document.getElementById("firstDrillDownUnitCategoryProactive").style.display = "none";
        document.getElementById("secondDrilldownUnitCategoryProactive").style.display = "none";
      }
    }

    refreshIconElement_proactive.addEventListener("click", restoreOriginalChart);
  };

  xhr_object.send();
}
// inventory bar

let clickedCommonAreaCategoryTicket = true;
function funCommonAreaCategoryTicket() {
  let categoryCATicketNoData = document.getElementById(
    "categoryCATicketNoData"
  );
  let catagory_ticket_ca = document.getElementById("catagory-ticket-ca");
  let loaderCACategoryTicketChart = document.getElementById(
    "loaderCACategoryTicketChart"
  );
  let dt2_ca = document.getElementById("dt2_ca");

  // if (globalType == "daily") {
  //   dt2_ca.innerHTML =
  //     "Common Area Category-wise Tickets for " + convertDateFormat(globalDateFirst);
  // } else {
  //   dt2_ca.innerHTML =
  //     "Common Area Category-wise Tickets for " +
  //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // loaderCACategoryTicketChart.style.display = "block";
  // categoryCATicketNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCommonAreaCategoryWiseTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst,
      true
    );
    console.log(
      getCommonAreaCategoryWiseTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getCommonAreaCategoryWiseTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getCommonAreaCategoryWiseTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunCACategoryTicket = JSON.parse(this.responseText);

    console.log("Category CA Ticket - ");
    console.log(resfunCACategoryTicket);

    // Added now
    originalChartConfigCommon = {
      type: "bar",
      data: {
        labels: resfunCACategoryTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCACategoryTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCACategoryTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(catagory_ticket_ca, originalChartConfigCommon)
    loaderCACategoryTicketChart.style.display = "none";

    categoryCATicketNoData.style.display = "none";
    catagory_ticket_ca.style.display = "block";

    // infoCommonAreaCategoryIcon,CommonAreaCategoryDiv,closeCommonAreaCategory,CommonAreaCategoryInfo

    infoCommonAreaCategoryIcon.addEventListener("click", InfoModal);
    let CommonAreaCategoryDiv = document.getElementById('CommonAreaCategoryDiv');
    let closeCommonAreaCategory = document.getElementById('closeCommonAreaCategory');
    function InfoModal(event) {
      event.stopPropagation();
      CommonAreaCategoryDiv.style.display = "block";
      if (resfunCACategoryTicket.info) {
        let CommonAreaCategoryInfo = document.getElementById("CommonAreaCategoryInfo");

        CommonAreaCategoryInfo.innerHTML = "<b>Info  : </b>" + resfunCACategoryTicket.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CommonAreaCategoryDiv.contains(event.target) && event.target.id !== 'infoCommonAreaCategoryIcon') {
        closeCommonAreaCategoryDiv();
      }
    });
    closeCommonAreaCategory.addEventListener("click", closeCommonAreaCategoryDiv);
    function closeCommonAreaCategoryDiv() {
      CommonAreaCategoryDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CommonAreaCategoryDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let CategoryCommomTicketdrillDownLevel = 1;
    let clickedCommonAreaCategoryTicket = true;

    if (!funCommonAreaCategoryTicket.initialized) {
      catagory_ticket_ca.onclick = function (event) {

        if (clickedCommonAreaCategoryTicket == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;

            document.getElementById("listItemLabelCommon").textContent = `Ticket: ${label}`;


            const dropdown = (document.getElementById("dataDropdown_common"));
            dropdown.style.display = "block";


          }

          dataDropdown_common.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {

              if (CategoryCommomTicketdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                console.log(selectedOption);
                document.getElementById("firstDrillDownCommon").style.display = "block";
                document.getElementById("firstDrillDownCommon").textContent = ` - ${selectedOption}`




                let xhr_object = new XMLHttpRequest();
                let apiURL;


                apiURL =
                  getTicketCategoryCommonDrillSecond +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);

                downloadCACategoryWiseTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-CommonArea-categoryWiseTicket/" + idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&category=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resTicketCategoryCommonDrill = JSON.parse(this.responseText);
                    console.log("Ticket Category Drill Down - ");
                    console.log(resTicketCategoryCommonDrill);

                    const labels = Object.keys(resTicketCategoryCommonDrill.response);
                    const datasets = [];


                    const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                    for (const status of statuses) {
                      datasets.push({
                        label: status,
                        data: labels.map(label => resTicketCategoryCommonDrill.response[label][status] || 0),
                        backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                        stack: "0"
                      });
                    }

                    const barData = {
                      labels: labels,
                      datasets: datasets,
                    };

                    myChart.destroy();
                    myChart = new Chart(catagory_ticket_ca, {
                      type: "bar",
                      data: barData,
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                            title: {
                              display: true,
                              text: labelname,
                              padding: {
                                top: 20,
                              }
                            }
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });

                  }

                xhr_object.send();
                CategoryCommomTicketdrillDownLevel = 2;

              }
              else if (CategoryCommomTicketdrillDownLevel === 2) {

                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);


                document.getElementById("firstDrillDownCommon").style.display = "none";
                document.getElementById("secondDrilldownCommon").style.display = "block";
                document.getElementById("secondDrilldownCommon").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getTicketCategoryCommonDrillSecond +
                  idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadCACategoryWiseTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-CommonArea-categoryWiseTicket/" + idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resTicketCategoryCommonDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down - ");
                  console.log(resTicketCategoryCommonDrill);

                  const labels = Object.keys(resTicketCategoryCommonDrill.response);
                  const datasets = [];


                  const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                  for (const status of statuses) {
                    datasets.push({
                      label: status,
                      data: labels.map(label => resTicketCategoryCommonDrill.response[label][status] || 0),
                      backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                      stack: "0"
                    });
                  }

                  const barData = {
                    labels: labels,
                    datasets: datasets,
                  };

                  myChart.destroy();
                  myChart = new Chart(catagory_ticket_ca, {
                    type: "bar",
                    data: barData,
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "bottom",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                CategoryCommomTicketdrillDownLevel = 3;
                clickedCommonAreaCategoryTicket = false;
                return;
              }
            }
            else {
              if (CategoryCommomTicketdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }


            dataDropdown_common.style.display = "none";


          });

        } else if (clickedCommonAreaCategoryTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartConfigProactive) {
        myChart.destroy();
        funCommonAreaCategoryTicket();
        clickedCommonAreaCategoryTicket = true;
        document.getElementById("firstDrillDownCommon").style.display = "none";
        document.getElementById("secondDrilldownCommon").style.display = "none";

      }
    }

    refreshIconElement_common.addEventListener("click", restoreOriginalChart);
  };

  xhr_object.send();
}
// +++++

let clickedCommonAreaCategoryProactiveTicket = true;

function funCommonAreaCategoryProactiveTicket() {
  let categoryCAProactiveTicketNoData = document.getElementById(
    "categoryCAProactiveTicketNoData"
  );
  let catagory_proactive_ticket_ca = document.getElementById(
    "proactive-ticket-ca"
  );
  let loaderCACategoryProactiveTicketChart = document.getElementById(
    "loaderCACategoryProactiveTicketChart"
  );
  let dt3_ca = document.getElementById("dt3_ca");

  // if (globalType == "daily") {
  //   dt3_ca.innerHTML =
  //     "Common Area Category-wise Proactive Tickets for " + convertDateFormat(globalDateFirst);
  // } else {
  //   dt3_ca.innerHTML =
  //     "Common Area Category-wise Proactive Tickets for " +
  //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // loaderCACategoryProactiveTicketChart.style.display = "block";
  // categoryCAProactiveTicketNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCommonAreaCategoryWiseProactiveTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst,
      true
    );
    console.log(
      getCommonAreaCategoryWiseProactiveTicketsChart +
      idLink +
      "&date=" +
      globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getCommonAreaCategoryWiseProactiveTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getCommonAreaCategoryWiseProactiveTicketsChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunCACategoryProactiveTicket = JSON.parse(this.responseText);

    console.log("CA Proactive - ");
    console.log(resfunCACategoryProactiveTicket);

    // Added now
    originalChartConfigCommonProactive = {
      type: "bar",
      data: {
        labels: resfunCACategoryProactiveTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCACategoryProactiveTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCACategoryProactiveTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(catagory_proactive_ticket_ca, originalChartConfigCommonProactive)
    loaderCACategoryProactiveTicketChart.style.display = "none";
    if (
      String(resfunCACategoryProactiveTicket.response.total_tickets).length == 0
    ) {
      categoryCAProactiveTicketNoData.style.display = "block";
      catagory_proactive_ticket_ca.style.display = "none";
    } else {
      categoryCAProactiveTicketNoData.style.display = "none";
      catagory_proactive_ticket_ca.style.display = "block";
    }

    // infoCommonAreaCategoryProactiveIcon ,CommonAreaCategoryProactiveDiv,closeCommonAreaCategoryProactive,CommonAreaCategoryProactiveInfo

    infoCommonAreaCategoryProactiveIcon.addEventListener("click", InfoModal);
    let CommonAreaCategoryProactiveDiv = document.getElementById('CommonAreaCategoryProactiveDiv');
    let closeCommonAreaCategoryProactive = document.getElementById('closeCommonAreaCategoryProactive');
    function InfoModal(event) {
      event.stopPropagation();
      CommonAreaCategoryProactiveDiv.style.display = "block";
      if (resfunCACategoryProactiveTicket.info) {
        let CommonAreaCategoryProactiveInfo = document.getElementById("CommonAreaCategoryProactiveInfo");

        CommonAreaCategoryProactiveInfo.innerHTML = "<b>Info  : </b>" + resfunCACategoryProactiveTicket.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CommonAreaCategoryProactiveDiv.contains(event.target) && event.target.id !== 'infoCommonAreaCategoryProactiveIcon') {
        closeCommonAreaCategoryProactivetDiv();
      }
    });
    closeCommonAreaCategoryProactive.addEventListener("click", closeCommonAreaCategoryProactivetDiv);
    function closeCommonAreaCategoryProactivetDiv() {
      CommonAreaCategoryProactiveDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CommonAreaCategoryProactiveDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let CategoryCommonProactivedrillDownLevel = 1;
    let clickedCommonAreaCategoryProactiveTicket = true;
    let secondDrillDownCommonProactive = document.getElementById("secondDrillDownCommonProactive");

    if (!funCommonAreaCategoryProactiveTicket.initialized) {

      catagory_proactive_ticket_ca.onclick = function (event) {

        if (clickedCommonAreaCategoryProactiveTicket == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;

            document.getElementById("listItemLabelCommonProactive").textContent = `Ticket: ${label}`;

            const dropdown = (document.getElementById("dataDropdown_commonproactive"));
            dropdown.style.display = "block";


          }

          dataDropdown_commonproactive.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (CategoryCommonProactivedrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);



                document.getElementById("firstDrillDownCommonProactive").style.display = "block";
                document.getElementById("firstDrillDownCommonProactive").textContent = ` - ${selectedOption}`


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getTicketCategoryCommonProactiveDrillSecond +
                  idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);

                downloadCACategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-CommonArea-categoryWiseProactiveTicket/" + idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resTicketCategoryCommonProactiveDrill = JSON.parse(this.responseText);
                    console.log("Ticket Category Drill Down -1 ");
                    console.log(resTicketCategoryCommonProactiveDrill);

                    const labels = Object.keys(resTicketCategoryCommonProactiveDrill.response);
                    const datasets = [];

                    // const labelname = label;

                    const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                    for (const status of statuses) {
                      datasets.push({
                        label: status,
                        data: labels.map(label => resTicketCategoryCommonProactiveDrill.response[label][status] || 0),
                        backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                        stack: "0"
                      });
                    }

                    const barData = {
                      labels: labels,
                      datasets: datasets,
                    };

                    myChart.destroy();
                    myChart = new Chart(catagory_proactive_ticket_ca, {
                      type: "bar",
                      data: barData,
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                            title: {
                              display: true,
                              text: labelname,
                              padding: {
                                top: 20,
                              }
                            }
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }

                xhr_object.send();
                CategoryCommonProactivedrillDownLevel = 2;

              }
              else if (CategoryCommonProactivedrillDownLevel === 2) {
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                document.getElementById("firstDrillDownCommonProactive").style.display = "none";
                secondDrillDownCommonProactive.style.display = "block";
                secondDrillDownCommonProactive.textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getTicketCategoryCommonProactiveDrillSecond +
                  idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadCACategoryWiseProactiveTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-CommonArea-categoryWiseProactiveTicket/" + idLink +
                  "&category=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;


                xhr_object.onload = function () {
                  resTicketCategoryCommonProactiveDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -2 ");
                  console.log(resTicketCategoryCommonProactiveDrill);

                  const labels = Object.keys(resTicketCategoryCommonProactiveDrill.response);
                  const datasets = [];

                  // const labelname = label;

                  const statuses = ["Open", "Closed"]; // Assuming these are the possible statuses

                  for (const status of statuses) {
                    datasets.push({
                      label: status,
                      data: labels.map(label => resTicketCategoryCommonProactiveDrill.response[label][status] || 0),
                      backgroundColor: status === "Open" ? "#e2445b" : "#01c875",
                      stack: "0"
                    });
                  }

                  const barData = {
                    labels: labels,
                    datasets: datasets,
                  };

                  myChart.destroy();
                  myChart = new Chart(catagory_proactive_ticket_ca, {
                    type: "bar",
                    data: barData,
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }

                xhr_object.send();
                CategoryCommonProactivedrillDownLevel = 3;
                clickedCommonAreaCategoryProactiveTicket = false;
                return;

              }
            }
            else {
              if (CategoryCommonProactivedrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }



            dataDropdown_commonproactive.style.display = "none";

          });
        } else if (clickedCommonAreaCategoryProactiveTicket == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartConfigCommonProactive) {
        myChart.destroy();
        funCommonAreaCategoryProactiveTicket();
        clickedCommonAreaCategoryProactiveTicket = true;
        dataDropdown_commonproactive.style.display = "none";
        document.getElementById("firstDrillDownCommonProactive").style.display = "none";
        document.getElementById("secondDrillDownCommonProactive").style.display = "none";
      }
    }

    refreshIconElement_commonproactive.addEventListener("click", restoreOriginalChart);
  };

  xhr_object.send();
}

function funAgeingMatrix() {
  let ageingMatrixNoData = document.getElementById("ageingMatrixNoData");
  let tbl1info = document.getElementById("tbl1info");
  let loaderAgeingMatrix = document.getElementById("loaderAgeingMatrix");

  // loaderAgeingMatrix.style.display = "block";
  // ageingMatrixNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getAgeingMatrixChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getAgeingMatrixChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunAgeingMatrix = JSON.parse(this.responseText);
    let myAgeingArray = resfunAgeingMatrix.response;
    console.log("Ageing Matrix - ");
    console.log(resfunAgeingMatrix);

    allAgeingDetails =
      `<tr>` +
      `<td>` +
      "P1" +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P2" +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P3" +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P4" +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P5" +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T5 +
      `</td>` +
      `</tr>`;

    tablebodyTicketAgeing.innerHTML = allAgeingDetails;

    console.log("Ageing - ");
    console.log(myAgeingArray);

    daysTicketAgeing.innerHTML = resfunAgeingMatrix.average_days;

    loaderAgeingMatrix.style.display = "none";
    if (resfunAgeingMatrix.response.total_tickets == 0) {
      ageingMatrixNoData.style.display = "block";
      tbl1info.style.display = "none";
    } else {
      ageingMatrixNoData.style.display = "none";
      tbl1info.style.display = "block";
    }

    // infoTicketsAgeingMatrixIcon,TicketsAgeingMatrixDiv,closeTicketsAgeingMatrix,TicketsAgeingMatrixInfo

    infoTicketsAgeingMatrixIcon.addEventListener("click", InfoModal);
    let TicketsAgeingMatrixDiv = document.getElementById('TicketsAgeingMatrixDiv');
    let closeTicketsAgeingMatrix = document.getElementById('closeTicketsAgeingMatrix');
    function InfoModal(event) {
      event.stopPropagation();
      TicketsAgeingMatrixDiv.style.display = "block";
      if (resfunAgeingMatrix.info) {
        let TicketsAgeingMatrixInfo = document.getElementById("TicketsAgeingMatrixInfo");

        TicketsAgeingMatrixInfo.innerHTML = "<b>Info  : </b>" + resfunAgeingMatrix.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TicketsAgeingMatrixDiv.contains(event.target) && event.target.id !== 'infoTicketsAgeingMatrixIcon') {
        closeTicketsAgeingMatrixDiv();
      }
    });
    closeTicketsAgeingMatrix.addEventListener("click", closeTicketsAgeingMatrixDiv);
    function closeTicketsAgeingMatrixDiv() {
      TicketsAgeingMatrixDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TicketsAgeingMatrixDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_TicketsAgeingMatrix

    refreshIconElement_TicketsAgeingMatrix.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      loaderAgeingMatrix.style.display = "block";
      tbl1info.style.display = "none";
      funAgeingMatrix();
    }
  };
  xhr_object.send();
}

// let clickedTATResolution = true;
function funTATResolution() {
  let tatResolutionNoData = document.getElementById("tatResolutionNoData");
  let tat_resolution_chart = document.getElementById("resolution-b1");
  let loaderTATResolution = document.getElementById("loaderTATResolution");

  let tatResolutionAchieved = document.getElementById("tatResolutionAchieved");
  let tatResolutionBreached = document.getElementById("tatResolutionBreached");

  // loaderTATResolution.style.display = "block";
  // tatResolutionNoData.style.display = "none";
  // tat_resolution_chart.style.visibility = "hidden";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getTATResolutionResponseChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getTATResolutionResponseChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunTATResolution = JSON.parse(this.responseText);

    console.log("TAT Resolution - ");
    console.log(resfunTATResolution);

    tatResolutionAchieved.innerHTML =
      resfunTATResolution.response.resolution.achieved + "";
    tatResolutionBreached.innerHTML =
      resfunTATResolution.response.resolution.breached + "";

    originalChartConfigResolutionTAT = {
      type: "bar",
      data: {
        labels: ["Achieved", "Breached"],
        datasets: [
          {
            label: "Resolution TAT Status",
            backgroundColor: ["#01C875", "#FDAB3D"],
            data: [
              resfunTATResolution.response.resolution.achieved,
              resfunTATResolution.response.resolution.breached,
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 8);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(tat_resolution_chart, originalChartConfigResolutionTAT)

    loaderTATResolution.style.display = "none";
    if (
      resfunTATResolution.response.resolution.achieved == 0 &&
      resfunTATResolution.response.resolution.breached == 0
    ) {
      tatResolutionNoData.style.display = "block";
      tat_resolution_chart.style.visibility = "hidden";
    } else {
      tatResolutionNoData.style.display = "none";
      tat_resolution_chart.style.visibility = "visible";
    }

    // infoResolutionTATIcon,ResolutionTATDiv,closeResolutionTAT,ResolutionTATInfo
    infoResolutionTATIcon.addEventListener("click", InfoModal);
    let ResolutionTATDiv = document.getElementById('ResolutionTATDiv');
    let closeResolutionTAT = document.getElementById('closeResolutionTAT');

    function InfoModal(event) {
      event.stopPropagation();
      ResolutionTATDiv.style.display = "block";
      if (resfunTATResolution.info) {
        let ResolutionTATInfo = document.getElementById("ResolutionTATInfo");

        ResolutionTATInfo.innerHTML = "<b>Info :</b> " + resfunTATResolution.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ResolutionTATDiv.contains(event.target) && event.target.id !== 'infoResolutionTATIcon') {
        closeResolutionTATDiv();
      }
    });

    closeResolutionTAT.addEventListener("click", closeResolutionTATDiv);

    function closeResolutionTATDiv() {
      ResolutionTATDiv.style.display = "none";
    }

    ResolutionTATDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let ResolutionTATdrillDownLevel = 1;
    let clickedTATResolution = true;

    if (!funTATResolution.initialized) {
      tat_resolution_chart.onclick = function (event) {

        if (clickedTATResolution == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);

            document.getElementById("listItemLabelresolutionTAT").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            const dropdown = (document.getElementById("dataDropdown_resolutionTAT"));
            dropdown.style.display = "block";

          }
          dataDropdown_resolutionTAT.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (ResolutionTATdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                label = myChart.data.labels[firstPoint.index];
                labelname = label;
                console.log(selectedOption);




                document.getElementById("firstDrillDownResolution").style.display = "block";
                document.getElementById("firstDrillDownResolution").textContent = ` - ${selectedOption}`

                // if (selectedOption === "Tower" || "Flat_Type" || "Status" || "Created_By" || "Category" || "Sub_Category" || "Assign_To" || "Priority" || "Ticket_Title" || "Ticket_Type" || "Related_To" || "Proactive/Reactive" && currentChartType === "bar") {
                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getResolutionTATDrill +
                  idLink +
                  "&response=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                  console.log(apiURL);
                xhr_object.open("GET", apiURL, true);


                downloadResolutionTATLink = ip + "fm-excel-download/get-drill-down-for-chart-resolutionTAT/" + idLink +
                  "&response=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resResolutionTATDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down - ");
                    console.log(resResolutionTATDrill);

                    const labels = Object.keys(resResolutionTATDrill.response[0]);
                    const data = Object.values(resResolutionTATDrill.response[0]);

                    console.log(labels);
                    console.log(data);

                    myChart.destroy();
                    myChart = new Chart(tat_resolution_chart, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }

                ResolutionTATdrillDownLevel = 2;
                xhr_object.send();

              }
              else if (ResolutionTATdrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                document.getElementById("firstDrillDownResolution").style.display = "none";
                document.getElementById("secondDrilldownResolution").style.display = "block";
                document.getElementById("secondDrilldownResolution").textContent = ` - ${selectedSecondOption}`


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getResolutionTATDrill +
                  idLink +
                  "&response=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,

                  console.log(apiURL);
                xhr_object.open("GET", apiURL, true);


                downloadResolutionTATLink = ip + "fm-excel-download/get-drill-down-for-chart-resolutionTAT/" + idLink +
                  "&response=" +
                  labelname +
                  "&drilldown_by=" +
                  selectedOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resResolutionTATDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down - ");
                    console.log(resResolutionTATDrill);

                    const labels = Object.keys(resResolutionTATDrill.response[0]);
                    const data = Object.values(resResolutionTATDrill.response[0]);

                    console.log(labels);
                    console.log(data);

                    myChart.destroy();
                    myChart = new Chart(tat_resolution_chart, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }
                xhr_object.send();
                ResolutionTATdrillDownLevel = 3;
                clickedTATResolution = false;
                return;

              }
            }
            else {
              if (ResolutionTATdrillDownLevel === 1) {
                restoreOriginalChartTicket();
              }
            }
            dataDropdown_resolutionTAT.style.display = "none";
          });
        } else if (clickedTATResolution == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChartTicket() {
      if (originalChartConfigResolutionTAT) {
        myChart.destroy(); // Destroy the current chart
        funTATResolution();
        clickedTATResolution = true;
        document.getElementById("firstDrillDownResolution").style.display = "none";
        document.getElementById("secondDrilldownResolution").style.display = "none";
      }
    }

    refreshIconElement_resolutionTAT.addEventListener("click", restoreOriginalChartTicket);
  };

  xhr_object.send();
}


let clickedTATResponse = true;
function funTATResponse() {
  let tatResponseNoData = document.getElementById("tatResponseNoData");
  let tat_response_chart = document.getElementById("response-b1");
  let loaderTATResponse = document.getElementById("loaderTATResponse");

  let tatResponseAchieved = document.getElementById("tatResponseAchieved");
  let tatResponseBreached = document.getElementById("tatResponseBreached");

  // loaderTATResponse.style.display = "block";
  // tatResponseNoData.style.display = "none";
  // tat_response_chart.style.visibility = "hidden";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getTATResolutionResponseChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getTATResolutionResponseChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunTATResponse = JSON.parse(this.responseText);

    console.log("TAT Response - ");
    console.log(resfunTATResponse);

    tatResponseAchieved.innerHTML =
      resfunTATResponse.response.response.achieved + "";
    tatResponseBreached.innerHTML =
      resfunTATResponse.response.response.breached + "";

    originalChartConfigResponseTAT = {
      type: "bar",
      data: {
        labels: ["Achieved", "Breached"],
        datasets: [
          {
            label: "Response TAT Status",
            backgroundColor: ["#01C875", "#FDAB3D"],
            data: [
              resfunTATResponse.response.response.achieved,
              resfunTATResponse.response.response.breached,
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 8);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(tat_response_chart, originalChartConfigResponseTAT)
    loaderTATResponse.style.display = "none";
    if (
      resfunTATResponse.response.response.achieved == 0 &&
      resfunTATResponse.response.response.breached == 0
    ) {
      tatResponseNoData.style.display = "block";
      tat_response_chart.style.visibility = "hidden";
    } else {
      tatResponseNoData.style.display = "none";
      tat_response_chart.style.visibility = "visible";
    }

    // infoResponseTATIcon,ResponseTATDiv,closeResponseTAT,ResponseTATInfo

    infoResponseTATIcon.addEventListener("click", InfoModal);
    let ResponseTATDiv = document.getElementById('ResponseTATDiv');
    let closeResponseTAT = document.getElementById('closeResponseTAT');

    function InfoModal(event) {
      event.stopPropagation();
      ResponseTATDiv.style.display = "block";
      if (resfunTATResponse.info) {
        let ResponseTATInfo = document.getElementById("ResponseTATInfo");

        ResponseTATInfo.innerHTML = "<b>Info :</b> " + resfunTATResponse.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ResponseTATDiv.contains(event.target) && event.target.id !== 'infoResponseTATIcon') {
        closeResponseTATDiv();
      }
    });

    closeResponseTAT.addEventListener("click", closeResponseTATDiv);

    function closeResponseTATDiv() {
      ResponseTATDiv.style.display = "none";
    }

    ResponseTATDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let ResponseTATdrillDownLevel = 1;
    let clickedTATResponse = true;

    if (!funTATResponse.initialized) {
      tat_response_chart.onclick = function (event) {

        if (clickedTATResponse == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);

            document.getElementById("listItemLabelresponseTAT").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            const dropdown = (document.getElementById("dataDropdown_responseTAT"));
            dropdown.style.display = "block";

          }
          dataDropdown_responseTAT.addEventListener("click", function (event) {

            if (event.target.id != "closeDropdown") {
              if (ResponseTATdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                label = myChart.data.labels[firstPoint.index];
                labelname = label;
                console.log(selectedOption);





                document.getElementById("firstDrillDownResponse").style.display = "block";
                document.getElementById("firstDrillDownResponse").textContent = ` - ${selectedOption}`


                // if (selectedOption === "Tower" || "Flat_Type" || "Status" || "Created_By" || "Category" || "Sub_Category" || "Assign_To" || "Priority" || "Ticket_Title" || "Ticket_Type" || "Related_To" || "Proactive/Reactive" && currentChartType === "bar") {
                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL = getResponseTATDrill +
                  idLink +
                  "&response=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,

                  console.log(apiURL);
                xhr_object.open("GET", apiURL, true);


                downloadResponseTATLink = ip + "fm-excel-download/get-drill-down-for-chart-responseTAT/" + idLink +
                  "&response=" +
                  labelname +
                  "&drilldown_by=" +
                  selectedOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resResponseTATDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down - ");
                    console.log(resResponseTATDrill);

                    const labels = Object.keys(resResponseTATDrill.response[0]);
                    const data = Object.values(resResponseTATDrill.response[0]);

                    myChart.destroy();
                    myChart = new Chart(tat_response_chart, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }
                ResponseTATdrillDownLevel = 2;
                xhr_object.send();

              } else if (ResponseTATdrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                document.getElementById("firstDrillDownResponse").style.display = "none";
                document.getElementById("secondDrilldownResoponse").style.display = "block";
                document.getElementById("secondDrilldownResoponse").textContent = ` - ${selectedSecondOption}`


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL = getResponseTATDrill +
                  idLink +
                  "&response=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,

                  console.log(apiURL);
                xhr_object.open("GET", apiURL, true);


                downloadResponseTATLink = ip + "fm-excel-download/get-drill-down-for-chart-responseTAT/" + idLink +
                  "&response=" +
                  labelname +
                  "&drilldown_by=" +
                  selectedOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resResponseTATDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down - ");
                    console.log(resResponseTATDrill);

                    const labels = Object.keys(resResponseTATDrill.response[0]);
                    const data = Object.values(resResponseTATDrill.response[0]);

                    myChart.destroy();
                    myChart = new Chart(tat_response_chart, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  }
                xhr_object.send();
                ResponseTATdrillDownLevel = 3;
                clickedTATResponse = false;
                return;
              }
            }
            else {
              if (ResponseTATdrillDownLevel === 1) {
                restoreOriginalChartTicket();
              }
            }
            dataDropdown_responseTAT.style.display = "none";
          });
        } else if (clickedTATResponse == false) {
          alert("You have reached the maximum drill-down level.");
        }



      };
    }

    function restoreOriginalChartTicket() {
      if (originalChartConfigResponseTAT) {
        myChart.destroy(); // Destroy the current chart
        funTATResponse();
        clickedTATResponse = true;
        document.getElementById("firstDrillDownResponse").style.display = "none";
        document.getElementById("secondDrilldownResoponse").style.display = "none";
      }
    }

    refreshIconElement_responseTAT.addEventListener("click", restoreOriginalChartTicket);
  };

  xhr_object.send();
}

function funVisitors() {
  let visTotalVehicles = document.getElementById("visTotalVehicles");
  let visTotalVisitors = document.getElementById("visTotalVisitors");
  let visExpectedVisitors = document.getElementById("visExpectedVisitors");
  let visUnExpectedVisitors = document.getElementById("visUnExpectedVisitors");
  let visTotalGatePass = document.getElementById("visTotalGatePass");
  let visReturnGatePass = document.getElementById("visReturnGatePass");
  let visNonReturnGatePass = document.getElementById("visNonReturnGatePass");


  // let visTotalStaff = document.getElementById("visTotalStaff");
  // let visStaffIn = document.getElementById("visStaffIn");
  // let visStaffOut = document.getElementById("visStaffOut");
  // let visGoodsInwards = document.getElementById("visGoodsInwards");
  // let visOutwards = document.getElementById("visOutwards");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getVisitors + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getVisitors + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getVisitors +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getVisitors +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunVisitors = JSON.parse(this.responseText);

    console.log("Visitors - ");
    console.log(resfunVisitors);

    visTotalVehicles.innerHTML = resfunVisitors.response.totalVehicle + "";
    visTotalVisitors.innerHTML = resfunVisitors.response.totalVisitors + "";
    visExpectedVisitors.innerHTML = resfunVisitors.response.expectedVisitors + "";
    visUnExpectedVisitors.innerHTML = resfunVisitors.response.unexpectedVisitors + "";
    visTotalGatePass.innerHTML = resfunVisitors.response.totalGatePass + "";
    visReturnGatePass.innerHTML = resfunVisitors.response.returnable_gatePass + "";
    visNonReturnGatePass.innerHTML = resfunVisitors.response.non_returnable_gatePass + "";


    // infoVisitorsIcon,VisitorsDiv,closeVisitors,VisitorsInfo

    infoVisitorsIcon.addEventListener("click", InfoModal);
    let VisitorsDiv = document.getElementById('VisitorsDiv');
    let closeVisitors = document.getElementById('closeVisitors');

    function InfoModal(event) {
      event.stopPropagation();
      VisitorsDiv.style.display = "block";
      if (resfunVisitors.info) {
        let VisitorsInfo = document.getElementById("VisitorsInfo");
        let VisitorsInfo2 = document.getElementById("VisitorsInfo2");
        let VisitorsInfo3 = document.getElementById("VisitorsInfo3");
        let VisitorsInfo4 = document.getElementById("VisitorsInfo4");

        VisitorsInfo.innerHTML = "<b>Total Visitors :</b> " + resfunVisitors.info.totalVisitors;
        VisitorsInfo2.innerHTML = "<b>Expected Visitors :</b> " + resfunVisitors.info.expectedVisitors;
        VisitorsInfo3.innerHTML = "<b>Unexpected Visitors :</b> " + resfunVisitors.info.unexpectedVisitors;
        VisitorsInfo4.innerHTML = "<b>Total Vehicle :</b> " + resfunVisitors.info.totalVehicle;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!VisitorsDiv.contains(event.target) && event.target.id !== 'infoVisitorsIcon') {
        closeVisitorsDiv();
      }
    });

    closeVisitors.addEventListener("click", closeVisitorsDiv);

    function closeVisitorsDiv() {
      VisitorsDiv.style.display = "none";
    }

    VisitorsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    refreshIconElement_Visitors.addEventListener("click", restoreOriginalChartVisitors);

    function restoreOriginalChartVisitors() {
      funVisitors();
    }
    // visTotalStaff.innerHTML = resfunVisitors.response.totalStaff + "";
    // visStaffIn.innerHTML = resfunVisitors.response.staffIn + "";
    // visStaffOut.innerHTML = resfunVisitors.response.staffOut + "";
    // visGoodsInwards.innerHTML = resfunVisitors.response.goodsInwards + "";
    // visOutwards.innerHTML = resfunVisitors.response.outwards + "";


  };
  // refreshIconElement_Visitors


  xhr_object.send();
}

function funVisitorsCards() {
  let visTotalVisitorsCards = document.getElementById("visTotalVisitorsCards");
  let visExpectedVisitorsCards = document.getElementById("visExpectedVisitorsCards");
  let visUnExpectedVisitorsCards = document.getElementById("visUnExpectedVisitorsCards");
  let visTotalGatePass = document.getElementById("visTotalGatePass");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getVisitorsCards + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getVisitorsCards + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getVisitorsCards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getVisitorsCards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () { // Function assigned to the 'onload' event of the XHR object
    resfunVisitorsCards = JSON.parse(this.responseText); // Parsing the JSON response and storing it in 'resfunVisitorsCards' variable

    console.log("Visitors cards----------------- - "); // Logging to the console
    console.log(resfunVisitorsCards); // Logging the parsed response to the console

    // Updating HTML elements with values from the response
    visTotalVisitorsCards.innerHTML = resfunVisitorsCards.response.totalVisitors + "";
    visExpectedVisitorsCards.innerHTML = resfunVisitorsCards.response.expectedVisitors + "";
    visUnExpectedVisitorsCards.innerHTML = resfunVisitorsCards.response.unexpectedVisitors + "";
    visTotalGatePass.innerHTML = resfunVisitorsCards.response.totalGatePass + "";
  };

  xhr_object.send();
}
// totalstaff
function funStaff() {
  let visTotalStaff = document.getElementById("visTotalStaff");
  let visTotalStaffCard = document.getElementById("visTotalStaffCard");
  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getStaff + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getStaff + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getStaff +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getStaff +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunStaff = JSON.parse(this.responseText);

    console.log("Staff - ");
    console.log(resfunStaff);
    visTotalStaff.innerHTML = resfunStaff.response + "";
    visTotalStaffCard.innerHTML = resfunStaff.response + "";

    // visTotalStaff.innerHTML = resfunStaff.response.totalStaff + "";
    // visStaffIn.innerHTML = resfunStaff.response.staffIn + "";
    // visStaffOut.innerHTML = resfunStaff.response.staffOut + "";
    // visGoodsInwards.innerHTML = resfunStaff.response.goodsInwards + "";
    // visOutwards.innerHTML = resfunStaff.response.outwards + "";
  };
  xhr_object.send();
}
// staffin
function funStaffIn() {
  let visStaffIn = document.getElementById("visStaffIn");
  let visStaffInCard = document.getElementById("visStaffInCard");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getStaffIn + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getStaffIn + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getStaffIn +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getStaffIn +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunStaffIn = JSON.parse(this.responseText);

    console.log("StaffIn - ");
    console.log(resfunStaffIn);

    visStaffIn.innerHTML = resfunStaffIn.response + "";
    visStaffInCard.innerHTML = resfunStaffIn.response + "";
  };
  xhr_object.send();
}
// staffOut
function funStaffOut() {
  let visStaffOut = document.getElementById("visStaffOut");
  let visStaffOutCard = document.getElementById("visStaffOutCard");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getStaffOut + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getStaffOut + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getStaffOut +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getStaffOut +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunStaffOut = JSON.parse(this.responseText);

    console.log("staff out - ");
    console.log(resfunStaffOut);

    visStaffOut.innerHTML = resfunStaffOut.response + "";
    visStaffOutCard.innerHTML = resfunStaffOut.response + "";
  };
  xhr_object.send();
}
// goodsinwards
function funGoodsInward() {
  let visGoodsInwards = document.getElementById("visGoodsInwards");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getGoodsInwards + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getGoodsInwards + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getGoodsInwards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getGoodsInwards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunGoodsInwards = JSON.parse(this.responseText);

    console.log("GoodsInwards - ");
    console.log(resfunGoodsInwards);

    visGoodsInwards.innerHTML = resfunGoodsInwards.response + "";
  };
  xhr_object.send();
}
function funOutwards() {
  let visOutwards = document.getElementById("visOutwards");
  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getOutwards + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getOutwards + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getOutwards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getOutwards +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunOutwards = JSON.parse(this.responseText);

    console.log("Outwards - ");
    console.log(resfunOutwards);
    visOutwards.innerHTML = resfunOutwards.response + "";
  };
  xhr_object.send();
}

let clickedPowerConsumption = true;

function funPowerConsumption() {
  let titlePowerConsumation = document.getElementById("titlePowerConsumation");

  let pcTotalHtMeter = document.getElementById("pcTotalHtMeter");
  let pcTotalTransformer = document.getElementById("pcTotalTransformer");
  let pcTotalDg = document.getElementById("pcTotalDg");
  let pcTotalDieselConsumed = document.getElementById("pcTotalDieselConsumed");
  let pcTotalDieselConsumedPie = document.getElementById(
    "pcTotalDieselConsumedPie"
  );

  let loaderPowerConsumPie = document.getElementById("loaderPowerConsumPie");
  let powerConsumPieNoData = document.getElementById("powerConsumPieNoData");
  let power_consume_pie = document.getElementById("power-consume-pie");
  let psPie1 = document.getElementById("psPie1");
  let psPie2 = document.getElementById("psPie2");
  let psPie3 = document.getElementById("psPie3");
  let psPie4 = document.getElementById("psPie4");
  let psPie5 = document.getElementById("psPie5");

  let loaderPowerConsum = document.getElementById("loaderPowerConsum");
  let powerConsumNoData = document.getElementById("powerConsumNoData");
  let power_consumption = document.getElementById("power-consumption");



  let timeSeriesPowerConsumptionAssetwise = document.getElementById(
    "power-consumption-assetwise"
  );
  // let loaderPowerConsumAssetWiseTimeSeries = document.getElementById(
  //   "loaderPowerConsumAssetWiseTimeSeries"
  // );
  // let powerConsumAssetWiseTimeSeriesNoData = document.getElementById(
  //   "powerConsumAssetWiseTimeSeriesNoData"
  // );

  // if (globalType == "daily") {
  //   titlePowerConsumation.innerHTML =
  //     "Power Consumption for " + convertDateFormat(globalDateFirst);
  // } else {
  //   titlePowerConsumation.innerHTML =
  //     "Power Consumption for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // ----------------------------------------------

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object1.open(
      "GET",
      getMainMeterTotalConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getMainMeterTotalConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resfunPowerConsumptionObject1 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 1 - ");
    console.log(resfunPowerConsumptionObject1);
    if (resfunPowerConsumptionObject1.response == null) {
      pcTotalHtMeter.innerHTML = "0 kwh";
    } else {
      pcTotalHtMeter.innerHTML =
        resfunPowerConsumptionObject1.response + " kwh";
    }

    infoTotalConsumptionMainsIcon.addEventListener("click", InfoModal);
    let TotalConsumptionMainsDiv = document.getElementById('TotalConsumptionMainsDiv');
    let closeTotalConsumptionMains = document.getElementById('closeTotalConsumptionMains');
    function InfoModal(event) {
      event.stopPropagation();
      TotalConsumptionMainsDiv.style.display = "block";
      if (resfunPowerConsumptionObject1.info) {
        let TotalConsumptionMainsInfo = document.getElementById("TotalConsumptionMainsInfo");

        TotalConsumptionMainsInfo.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject1.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalConsumptionMainsDiv.contains(event.target) && event.target.id !== 'infoTotalConsumptionMainsIcon') {
        closeTotalConsumptionMainsDiv();
      }
    });
    closeTotalConsumptionMains.addEventListener("click", closeTotalConsumptionMainsDiv);
    function closeTotalConsumptionMainsDiv() {
      TotalConsumptionMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalConsumptionMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object1.send();

  // ----------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getTransformerTotal + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTransformerTotal + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getTransformerTotal +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTransformerTotal +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    resfunPowerConsumptionObject2 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 2 - ");
    console.log(resfunPowerConsumptionObject2);
    if (resfunPowerConsumptionObject2.response == null) {
      pcTotalTransformer.innerHTML = "0 kwh";
    } else {
      pcTotalTransformer.innerHTML =
        resfunPowerConsumptionObject2.response + " kwh";
    }


    infoTotalRenewableMainsIcon.addEventListener("click", InfoModal);
    let TotalRenewableMainsDiv = document.getElementById('TotalRenewableMainsDiv');
    let closeTotalRenewableMains = document.getElementById('closeTotalRenewableMains');
    function InfoModal(event) {
      event.stopPropagation();
      TotalRenewableMainsDiv.style.display = "block";
      if (resfunPowerConsumptionObject2.info) {
        let TotalRenewableMainsInfo = document.getElementById("TotalRenewableMainsInfo");

        TotalRenewableMainsInfo.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject2.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalRenewableMainsDiv.contains(event.target) && event.target.id !== 'infoTotalRenewableMainsIcon') {
        closeTotalRenewableMainsDiv();
      }
    });
    closeTotalRenewableMains.addEventListener("click", closeTotalRenewableMainsDiv);
    function closeTotalRenewableMainsDiv() {
      TotalRenewableMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalRenewableMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object2.send();

  // ----------------------------------------------

  let xhr_object3 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object3.open(
      "GET",
      getDGTotal + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getDGTotal + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object3.open(
      "GET",
      getDGTotal +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getDGTotal +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object3.onload = function () {
    resfunPowerConsumptionObject3 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 3 - ");
    console.log(resfunPowerConsumptionObject3);
    if (resfunPowerConsumptionObject3.response == null) {
      pcTotalDg.innerHTML = "0 kwh";
    } else {
      pcTotalDg.innerHTML = resfunPowerConsumptionObject3.response + " kwh";
    }

    infoTotalDGMainsIcon.addEventListener("click", InfoModal);
    let TotalDGMainsDiv = document.getElementById('TotalDGMainsDiv');
    let closeTotalDGMains = document.getElementById('closeTotalDGMains');
    function InfoModal(event) {
      event.stopPropagation();
      TotalDGMainsDiv.style.display = "block";
      if (resfunPowerConsumptionObject3.info) {
        let TotalDGMainsInfo = document.getElementById("TotalDGMainsInfo");

        TotalDGMainsInfo.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject3.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalDGMainsDiv.contains(event.target) && event.target.id !== 'infoTotalDGMainsIcon') {
        closeTotalDGMainsDiv();
      }
    });
    closeTotalDGMains.addEventListener("click", closeTotalDGMainsDiv);
    function closeTotalDGMainsDiv() {
      TotalDGMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalDGMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object3.send();

  // ----------------------------------------------

  let xhr_object4 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object4.open(
      "GET",
      getCumu + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getDieselConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object4.open(
      "GET",
      getDieselConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getDieselConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object4.onload = function () {
    resfunPowerConsumptionObject4 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 4 - ");
    console.log(resfunPowerConsumptionObject4);
    if (resfunPowerConsumptionObject4.response == null) {
      pcTotalDieselConsumed.innerHTML = "0 liters";
    } else {
      pcTotalDieselConsumed.innerHTML =
        resfunPowerConsumptionObject4.response + " liters";

    }

    // infoTotalDieselIcon, TotalDieselDiv ,closeTotalDiesel,TotalDieselInfo

    infoTotalDieselIcon.addEventListener("click", InfoModal);
    let TotalDieselDiv = document.getElementById('TotalDieselDiv');
    let closeTotalDiesel = document.getElementById('closeTotalDiesel');
    function InfoModal(event) {
      event.stopPropagation();
      TotalDieselDiv.style.display = "block";
      if (resfunPowerConsumptionObject4.info) {
        let TotalDieselInfo = document.getElementById("TotalDieselInfo");

        TotalDieselInfo.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject4.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalDieselDiv.contains(event.target) && event.target.id !== 'infoTotalDieselIcon') {
        closeTotalDieselDiv();
      }
    });
    closeTotalDiesel.addEventListener("click", closeTotalDieselDiv);
    function closeTotalDieselDiv() {
      TotalDieselDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalDieselDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object4.send();

  // ----------------------------------------------

  // loaderPowerConsumPie.style.display = "block";
  // powerConsumPieNoData.style.display = "none";

  let xhr_object5 = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object5.open(
      "GET",
      getCumulativeConsumptionPieChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");

    console.log(
      getCumulativeConsumptionPieChart + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object5.open(
      "GET",
      getCumulativeConsumptionPieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");

    console.log(
      getCumulativeConsumptionPieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object5.onload = function () {
    resfunPowerConsumptionObject5 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");
    console.log(resfunPowerConsumptionObject5);

    let valueChartNameLabel = Object.keys(resfunPowerConsumptionObject5.pie);
    let valueChartYLabel = Object.values(resfunPowerConsumptionObject5.pie);

    console.log("Power Consum Pie Chart - " + valueChartNameLabel);

    if (valueChartNameLabel[0] != null) {
      psPie1.innerHTML =
        '<i class="bi  bi-square-fill " style="color:#F2C06C;"></i> ' +
        valueChartNameLabel[0] + " - <b>" + valueChartYLabel[0] + " KWH</b>" +
        "<br/>";
    }

    if (valueChartNameLabel[1] != null) {
      psPie2.innerHTML =
        '<i class="bi  bi-square-fill " style="color:#F8EA94;"></i> ' +
        valueChartNameLabel[1] + " - <b>" + valueChartYLabel[1] + " KWH</b>" +
        "<br/>";
    }

    if (valueChartNameLabel[2] != null) {
      psPie3.innerHTML =
        '<i class="bi  bi-square-fill " style="color:#A1CD7A;"></i> ' +
        valueChartNameLabel[2] + " -  <b>" + valueChartYLabel[2] + " KWH </b>" +
        "<br/>";
    }

    if (valueChartNameLabel[3] != null) {
      psPie4.innerHTML =
        '<i class="bi  bi-square-fill " style="color:#D44B52;"></i> ' +
        valueChartNameLabel[3] + " - <b>" + valueChartYLabel[3] + " KWH</b>" +
        "<br/>";
    }

    if (valueChartNameLabel[4] != null) {
      psPie5.innerHTML =
        '<i class="bi  bi-square-fill " style="color:#F69380;"></i> ' +
        valueChartNameLabel[4] + " - <b>" + valueChartYLabel[4] + " KWH</b>" +
        "<br/>";
    }


    let valueChartName = Object.keys(resfunPowerConsumptionObject5.percentage);
    let valueChartY = Object.values(resfunPowerConsumptionObject5.percentage);
    // Added Now
    originalChartConfigPowerPie = {
      type: "pie",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: "Borewell 1",
            data: valueChartY,
            backgroundColor: [
              "#F2C06C",
              "#F8EA94",
              "#A1CD7A",
              "#D44B52",
              "#F69380",
            ],
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: (value, context) => {
              const dataset = context.chart.data.datasets[context.datasetIndex];
              const total = dataset.data.reduce((sum, value) => sum + value, 0);
              const percentage = ((value / total) * 100).toFixed(1);
              return `${percentage}%`;
            },
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(power_consume_pie, originalChartConfigPowerPie)

    let sum = 0;

    for (let i = 0; i < valueChartY.length; i += 1) {
      if (valueChartY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueChartY[i];
      }
    }


    if (resfunPowerConsumptionObject5.total_consumption == null) {
      pcTotalDieselConsumedPie.innerHTML = "0 KWH";
    } else {
      pcTotalDieselConsumedPie.innerHTML =
        resfunPowerConsumptionObject5.total_consumption + " KWH";
    }

    loaderPowerConsumPie.style.display = "none";
    if (sum == 0) {
      powerConsumPieNoData.style.display = "block";
      power_consume_pie.style.display = "none";
    } else {
      powerConsumPieNoData.style.display = "none";
      power_consume_pie.style.display = "block";
    }

    infoRenewableSourcesMainsIcon.addEventListener("click", InfoModal);
    let RenewableSourcesMainsDiv = document.getElementById('RenewableSourcesMainsDiv');
    let closeRenewableSourcesMains = document.getElementById('closeRenewableSourcesMains');
    function InfoModal(event) {
      event.stopPropagation();
      RenewableSourcesMainsDiv.style.display = "block";
      if (resfunPowerConsumptionObject5.info) {
        let RenewableSourcesMainsInfo = document.getElementById("RenewableSourcesMainsInfo");

        RenewableSourcesMainsInfo.innerHTML = "<b>Info : </b>" + resfunPowerConsumptionObject5.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!RenewableSourcesMainsDiv.contains(event.target) && event.target.id !== 'infoRenewableSourcesMainsIcon') {
        closeRenewableSourcesMainsDiv();
      }
    });
    closeRenewableSourcesMains.addEventListener("click", closeRenewableSourcesMainsDiv);
    function closeRenewableSourcesMainsDiv() {
      RenewableSourcesMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    RenewableSourcesMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    function restoreOriginalChartPowerPie() {
      if (originalChartConfigPowerPie) {
        myChart.destroy();
        myChart = new Chart(power_consume_pie, originalChartConfigPowerPie)

      }
    }

    Refresh_RenewableSourcesMains.addEventListener("click", restoreOriginalChartPowerPie);
  };
  xhr_object5.send();

  // ----------------------------------------------

  // power_consumption.style.display = "none";
  // loaderPowerConsum.style.display = "block";
  // powerConsumNoData.style.display = "none";

  let xhr_object6 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object6.open(
      "GET",
      getPowerConsumptionBarChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getPowerConsumptionBarChart + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object6.open(
      "GET",
      getPowerConsumptionBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getPowerConsumptionBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object6.onload = function () {
    resfunPowerConsumptionObject6 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 6 - ");
    console.log(resfunPowerConsumptionObject6);

    let arrAllObjects = Object.values(resfunPowerConsumptionObject6.response);
    let arrSolar = [];
    let arrDG = [];
    let arrHtMeter = [];
    let arrTotal = [];
    let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrSolar.push(arrAllObjects[i].Solar);
      arrDG.push(arrAllObjects[i].dg);
      arrHtMeter.push(arrAllObjects[i].htMeter);
      arrAverage.push(arrAllObjects[i].average);
    }
    console.log("++++++++++++++++++++++++++++++++++++++++++++++++Satcked Bar+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    console.log(arrSolar);
    console.log(arrDG);
    console.log(arrHtMeter);
    console.log(arrAverage);

    let currentChartType = "bar"
    // Added now
    originalChartConfigPower = {
      type: "bar",
      data: {
        labels: Object.keys(resfunPowerConsumptionObject6.response),
        datasets: [
          {
            label: "HT Meter",
            backgroundColor: ["#E95420"],
            data: arrHtMeter,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Solar",
            backgroundColor: ["#77216f"],
            data: arrSolar,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "DG",
            backgroundColor: ["#f2ad6c"],
            data: arrDG,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            type: "line",
            tension: 1,
            label: "Average",
            backgroundColor: ["#16a60c"],
            data: arrAverage,
            borderWidth: 0.4,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(power_consumption, originalChartConfigPower)

    loaderPowerConsum.style.display = "none";
    powerConsumNoData.style.display = "none";
    power_consumption.style.display = "block";

    // infoPowerConsumptionSeriesIcon  ,  PowerConsumptionSeriesDiv,closePowerConsumptionSeries,PowerConsumptionSeriesInfo

    infoPowerConsumptionSeriesIcon.addEventListener("click", InfoModal);
    let PowerConsumptionSeriesDiv = document.getElementById('PowerConsumptionSeriesDiv');
    let closePowerConsumptionSeries = document.getElementById('closePowerConsumptionSeries');
    function InfoModal(event) {
      event.stopPropagation();
      PowerConsumptionSeriesDiv.style.display = "block";
      if (resfunPowerConsumptionObject6.info) {
        let PowerConsumptionSeriesInfo = document.getElementById("PowerConsumptionSeriesInfo");

        PowerConsumptionSeriesInfo.innerHTML = "<b>Info : </b>" + resfunPowerConsumptionObject6.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!PowerConsumptionSeriesDiv.contains(event.target) && event.target.id !== 'infoPowerConsumptionSeriesIcon') {
        closePowerConsumptionSeriesDiv();
      }
    });
    closePowerConsumptionSeries.addEventListener("click", closePowerConsumptionSeriesDiv);
    function closePowerConsumptionSeriesDiv() {
      PowerConsumptionSeriesDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PowerConsumptionSeriesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    if (!funPowerConsumption.initialized) {
      power_consumption.onclick = function (event) {
        let clickedPowerConsumption = true;
        if (clickedPowerConsumption == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);

            document.getElementById("listItemLabelpower").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            const dropdown = (document.getElementById("dataDropdown_power"));
            dropdown.style.display = "block";

          }
          dataDropdown_power.addEventListener("click", function (event) {
            const selectedOption = event.target.id;
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const labelname = label;
            console.log(selectedOption);
            if (event.target.id != "closeDropdown") {
              if (selectedOption === "Asset_Name" && currentChartType === "bar") {
                let xhr_object = new XMLHttpRequest();
                xhr_object.open(
                  "GET",
                  getPowerDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&date=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                  true
                );

                console.log(
                  getPowerDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&date=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                );

                // downloadPowerConsumLink = ip + "supervisor-monthly/get-month-wise-power-consumption-drill-down-excel/" + idLink +
                //   "&drilldown_by=" +
                //   selectedOption +
                //   "&date=" +
                //   labelname +
                //   "&from_date=" +
                //   globalDateFirst +
                //   "&to_date=" +
                //   globalDateSecond,

                xhr_object.onload = function () {
                  resPowerDrill = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down - ");
                  console.log(resPowerDrill);

                  const labels = resPowerDrill.response.map(item => item[0]);
                  const dataValues = Array.from({ length: labels.length }, () => Math.floor(Math.random() * 100));

                  myChart.destroy();
                  myChart = new Chart(power_consumption, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: dataValues,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                clickedPowerConsumption = false;
              }
            }
            else {

              restoreOriginalChartPower();

            }

            dataDropdown_power.style.display = "none";
          });
        } else if (clickedPowerConsumption == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }

    function restoreOriginalChartPower() {
      if (originalChartConfigPower) {
        myChart.destroy();
        funPowerConsumption();
        clickedPowerConsumption = true;
      }
    }

    refreshIconElement_power.addEventListener("click", restoreOriginalChartPower);
  };
  xhr_object6.send();


}


function Refresh_TotalConsumptionMains() {
  let pcTotalHtMeter = document.getElementById("pcTotalHtMeter");
  let loader = document.getElementById("loader_TotalConsumptionMains");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalHtMeter.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(
        getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst
      );
    } else {
      xhr_object1.open(
        "GET",
        getMainMeterTotalConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getMainMeterTotalConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfunPowerConsumptionObject1 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 1 - ");
      console.log(resfunPowerConsumptionObject1);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject1 && parseFloat(resfunPowerConsumptionObject1.response)) {
        pcTotalHtMeter.innerHTML =
          resfunPowerConsumptionObject1.response + " EB kVAh"

      } else {
        pcTotalHtMeter.innerHTML = "No data available";
        pcTotalHtMeter.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}

function Refresh_TotalRenewableMains() {
  let pcTotalTransformer = document.getElementById("pcTotalTransformer");
  let loader = document.getElementById("loader_TotalRenewableMains");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalTransformer.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getTransformerTotal + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTransformerTotal + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getTransformerTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTransformerTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunPowerConsumptionObject2 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 2 - ");
      console.log(resfunPowerConsumptionObject2);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject2 && parseFloat(resfunPowerConsumptionObject2.response)) {
        pcTotalTransformer.innerHTML =
          resfunPowerConsumptionObject2.response + " kVAh";

      } else {
        pcTotalTransformer.innerHTML = "No data available";
        pcTotalTransformer.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}


function Refresh_DGTotalMains() {
  let pcTotalDg = document.getElementById("pcTotalDg");
  let loader = document.getElementById("loader_DGTotalMains");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalDg.innerHTML = "";
    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getDGTotal + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getDGTotal + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getDGTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getDGTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunPowerConsumptionObject3 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 3 - ");
      console.log(resfunPowerConsumptionObject3);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject3 && parseFloat(resfunPowerConsumptionObject3.response)) {
        pcTotalDg.innerHTML = resfunPowerConsumptionObject3.response + " DG kVAh";

      } else {
        pcTotalDg.innerHTML = "No data available";
        pcTotalDg.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}

// loader_TotalDiesel,Refresh_TotalDiesel

function Refresh_TotalDiesel() {
  let pcTotalDieselConsumed = document.getElementById("pcTotalDieselConsumed");
  let loader = document.getElementById("loader_TotalDiesel");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalDieselConsumed.innerHTML = "";
    let xhr_object4 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object4.open(
        "GET",
        getCumu + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getDieselConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object4.open(
        "GET",
        getDieselConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getDieselConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }


    xhr_object4.onload = function () {
      resfunPowerConsumptionObject4 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 4 - ");
      console.log(resfunPowerConsumptionObject4);
      if (resfunPowerConsumptionObject4 && parseFloat(resfunPowerConsumptionObject4.response)) {
        pcTotalDieselConsumed.innerHTML =
          resfunPowerConsumptionObject4.response + " liters";

      } else {
        pcTotalDieselConsumed.innerHTML = "No data available";
        pcTotalDieselConsumed.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object4.send();

  }

  fetchData();

}



function funWaterConsumptionTop() {
  let titleWaterConsumption = document.getElementById("titleWaterConsumption");

  let wcTotalConsumptionTop = document.getElementById("wcTotalConsumptionTop");
  let wcTotalDomesticTop = document.getElementById("wcTotalDomesticTop");
  let wcFlushingTotalTop = document.getElementById("wcFlushingTotalTop");
  let wcTotalIrrigationTop = document.getElementById("wcTotalIrrigationTop");
  let wcTotalSTPTop = document.getElementById("wcTotalSTPTop");

  let loaderWaterConsumPie = document.getElementById("loaderWaterConsumPie");
  let waterConsumPieNoData = document.getElementById("waterConsumPieNoData");
  let water_consume_pieTop = document.getElementById("water_consume_pieTop");
  let wsPie1 = document.getElementById("wsPie1");

  let loaderWaterConsum = document.getElementById("loaderWaterConsum");
  let waterConsumNoData = document.getElementById("waterConsumNoData");
  let water_consumption_top = document.getElementById("water_consumption_top");

  let loaderWaterDomesticMonth = document.getElementById("loaderWaterDomesticMonth");
  let WaterDomesticMonthNoData = document.getElementById("WaterDomesticMonthNoData");
  let WaterDomesticMonth = document.getElementById("WaterDomesticMonth");

  let loaderSiteWiseWater = document.getElementById("loaderSiteWiseWater");
  let SiteWiseWaterNoData = document.getElementById("SiteWiseWaterNoData");
  let SiteWiseWater = document.getElementById("SiteWiseWater");

  let loaderCustomerWiseWater = document.getElementById("loaderCustomerWiseWater");
  let CustomerWiseWaterNoData = document.getElementById("CustomerWiseWaterNoData");
  let CustomerWiseWater = document.getElementById("CustomerWiseWater");

  // if (globalType == "daily") {
  //   titleWaterConsumption.innerHTML =
  //     "Water Consumption for " + convertDateFormat(globalDateFirst);
  // } else {
  //   titleWaterConsumption.innerHTML =
  //     "Water Consumption for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // ----------------------------------------------

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      getTotalWaterConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTotalWaterConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object1.open(
      "GET",
      getTotalWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resfunWaterConsumptionObject1 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 1 - ");
    console.log(resfunWaterConsumptionObject1);
    if (resfunWaterConsumptionObject1.response == null) {
      wcTotalConsumptionTop.innerHTML = "0 KL";
    } else {
      wcTotalConsumptionTop.innerHTML =
        resfunWaterConsumptionObject1.response + " KL";
    }

    // infoTotalConsumptionWaterIcon,TotalConsumptionWaterDiv,closeTotalConsumptionWater,TotalConsumptionWaterInfo

    infoTotalConsumptionWaterIcon.addEventListener("click", InfoModal);
    let TotalConsumptionWaterDiv = document.getElementById('TotalConsumptionWaterDiv');
    let closeTotalConsumptionWater = document.getElementById('closeTotalConsumptionWater');
    function InfoModal(event) {
      event.stopPropagation();
      TotalConsumptionWaterDiv.style.display = "block";
      if (resfunWaterConsumptionObject1.info) {
        let TotalConsumptionWaterInfo = document.getElementById("TotalConsumptionWaterInfo");
        let TotalConsumptionWaterInfo2 = document.getElementById("TotalConsumptionWaterInfo2");

        TotalConsumptionWaterInfo.innerHTML = "<b>Formula :</b> " + resfunWaterConsumptionObject1.info.formula;
        TotalConsumptionWaterInfo2.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject1.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalConsumptionWaterDiv.contains(event.target) && event.target.id !== 'infoTotalConsumptionWaterIcon') {
        closeTotalConsumptionWaterDiv();
      }
    });
    closeTotalConsumptionWater.addEventListener("click", closeTotalConsumptionWaterDiv);
    function closeTotalConsumptionWaterDiv() {
      TotalConsumptionWaterDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalConsumptionWaterDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object1.send();

  // ----------------------------------------------


  let xhr_object8 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object8.open(
      "GET",
      getTotalSTP + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTotalSTP + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object8.open(
      "GET",
      getTotalSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object8.onload = function () {
    resfunWaterConsumptionObject8 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 8 - ");
    console.log(resfunWaterConsumptionObject8);
    // if (resfunWaterConsumptionObject8.response == null) {
    //   wcTotalSTP.innerHTML = "0 KL";
    // } else {
    //   wcTotalSTP.innerHTML =
    //     resfunWaterConsumptionObject8.response + " KL";
    // }
  };
  xhr_object8.send();


  //---------------------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getWaterConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    resfunWaterConsumptionObject2 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 2 - ");
    console.log(resfunWaterConsumptionObject2);
    if (resfunWaterConsumptionObject2.response["kl"] == null) {
      wcTotalDomesticTop.innerHTML = "0 KL";
    } else {
      wcTotalDomesticTop.innerHTML =
        resfunWaterConsumptionObject2.response["kl"] + " KL";
    }

    // infoTotalDomesticIcon,TotalDomesticDiv,closeTotalDomestic,closeTotalDomestic,TotalDomesticInfo
    infoTotalDomesticIcon.addEventListener("click", InfoModal);
    let TotalDomesticDiv = document.getElementById('TotalDomesticDiv');
    let closeTotalDomestic = document.getElementById('closeTotalDomestic');
    function InfoModal(event) {
      event.stopPropagation();
      TotalDomesticDiv.style.display = "block";
      if (resfunWaterConsumptionObject2.info) {
        let TotalDomesticInfo = document.getElementById("TotalDomesticInfo");
        let TotalDomesticInfo2 = document.getElementById("TotalDomesticInfo2");

        TotalDomesticInfo.innerHTML = "<b>Formula :</b> " + resfunWaterConsumptionObject2.info.formula;
        TotalDomesticInfo2.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject2.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalDomesticDiv.contains(event.target) && event.target.id !== 'infoTotalDomesticIcon') {
        closeTotalDomesticDiv();
      }
    });
    closeTotalDomestic.addEventListener("click", closeTotalDomesticDiv);
    function closeTotalDomesticDiv() {
      TotalDomesticDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalDomesticDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };
  xhr_object2.send();

  // ------------------------------------------------


  let xhr_object3 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object3.open(
      "GET",
      getIrrigation + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIrrigation + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object3.open(
      "GET",
      getIrrigation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIrrigation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object3.onload = function () {
    resfunWaterConsumptionObject3 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 3 - ");
    console.log(resfunWaterConsumptionObject3);

    if (resfunWaterConsumptionObject3.response["kl"] == null) {
      wcTotalIrrigationTop.innerHTML = "0 KL";
    } else {
      wcTotalIrrigationTop.innerHTML =
        resfunWaterConsumptionObject3.response["kl"] + " KL";
    }


    infoTotalIrrigationIcon.addEventListener("click", InfoModal3);
    let TotalIrrigationDiv = document.getElementById('TotalIrrigationDiv');
    let closeTotalIrrigation = document.getElementById('closeTotalIrrigation');
    function InfoModal3(event) {
      event.stopPropagation();
      TotalIrrigationDiv.style.display = "block";
      if (resfunWaterConsumptionObject3.info) {
        let TotalIrrigationInfo = document.getElementById("TotalIrrigationInfo");

        TotalIrrigationInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject3.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalIrrigationDiv.contains(event.target) && event.target.id !== 'infoTotalIrrigationIcon') {
        closeTotalIrrigationDiv();
      }
    });
    closeTotalIrrigation.addEventListener("click", closeTotalIrrigationDiv);
    function closeTotalIrrigationDiv() {
      TotalIrrigationDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalIrrigationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object3.send();

  // -------------------------------------------------------


  let xhr_object0 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object0.open(
      "GET",
      getFlushing + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getFlushing + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object0.open(
      "GET",
      getFlushing +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFlushing +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object0.onload = function () {
    resfunWaterConsumptionObject = JSON.parse(this.responseText);
    console.log("Water Consumption Object  - ");
    console.log(resfunWaterConsumptionObject);


    if (resfunWaterConsumptionObject.response["kl"] == null) {
      wcFlushingTotalTop.innerHTML = "0 KL";
    } else {
      wcFlushingTotalTop.innerHTML =
        resfunWaterConsumptionObject.response["kl"] + " KL";
    }



    infoFlushingTotalIcon.addEventListener("click", InfoModal2);
    let FlushingTotalDiv = document.getElementById('FlushingTotalDiv');
    let closeFlushingTotal = document.getElementById('closeFlushingTotal');
    function InfoModal2(event) {
      event.stopPropagation();
      FlushingTotalDiv.style.display = "block";
      if (resfunWaterConsumptionObject.info) {
        let FlushingTotalInfo = document.getElementById("FlushingTotalInfo");

        FlushingTotalInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!FlushingTotalDiv.contains(event.target) && event.target.id !== 'infoFlushingTotalIcon') {
        closeFlushingTotalDiv();
      }
    });
    closeFlushingTotal.addEventListener("click", closeFlushingTotalDiv);
    function closeFlushingTotalDiv() {
      FlushingTotalDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FlushingTotalDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object0.send();

  // ----------------------------------------------

  // loaderWaterConsumPie.style.display = "block";
  // waterConsumPieNoData.style.display = "none";

  let xhr_object5 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object5.open(
      "GET",
      getWaterSourcePieChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterSourcePieChart + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object5.open(
      "GET",
      getWaterSourcePieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterSourcePieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object5.onload = function () {
    resfunWaterConsumptionObject5 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 5 - ");
    console.log(resfunWaterConsumptionObject5);

    let valueChartName = Object.keys(resfunWaterConsumptionObject5.response);
    let valueChartY = Object.values(resfunWaterConsumptionObject5.response);

    console.log(valueChartY);

    let waterPieChartColors = [
      "#F2C06C",
      "#F8EA94",
      "#A1CD7A",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];




    originalChartWaterSource = {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: "Water Resource",
            data: valueChartY,
            backgroundColor: waterPieChartColors,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
            title: {
              display: true,
              text: 'Consumption in %',
            }
          },
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Water Resources',
              padding: {
                top: 40,
              }
            }
          }

        },
        plugins: {


          title: {
            fullSize: true,
            display: true,
            text: '',
            color: 'black',
            align: 'center',
            font: {
              weight: 'bold'
            },
            font: {
              size: 14
            },
            padding: {
              top: 1,
              bottom: 30
            }
          },

          datalabels: {
            // color: "#000000",
            // font: {
            //   size: "14",
            //   weight: "bold",
            // },
            display: false,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(water_consume_pieTop, originalChartWaterSource)
    let sum = 0;

    for (let i = 0; i < valueChartY.length; i += 1) {
      if (valueChartY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueChartY[i];
      }
    }

    loaderWaterConsumPie.style.display = "none";
    if (sum == 0) {
      waterConsumPieNoData.style.display = "block";
      water_consume_pieTop.style.display = "none";
    } else {
      waterConsumPieNoData.style.display = "none";
      water_consume_pieTop.style.display = "block";
    }



    function restoreOriginalChartWater() {
      if (originalChartWaterSource) {
        // alert("hiii")
        myChart.destroy(); // Destroy the current chart
        loaderWaterConsumPie.style.display = "block";
        myChart = new Chart(water_consume_pieTop, originalChartWaterSource);
        // water_consume_pieTop.style.display = "block";
      }
    }

    refreshIconElement_waterSource.addEventListener("click", restoreOriginalChartWater);


  };


  xhr_object5.send();



  // --------------------------------------------------------------------------------------------------------

  // domesticMonth,loaderWaterDomesticMonth,WaterDomesticMonthNoData,WaterDomesticMonth
  // loaderWaterDomesticMonth.style.display = "block";
  // WaterDomesticMonthNoData.style.display = "none";
  // console.log(getWaterDomesticMonth + idLink + "&date=" + globalDateFirst);
  let xhr_object_domestic = new XMLHttpRequest();
  if (globalType == "daily") {
    console.log("hhhhhhhiiiiiiiiiiiiiiiii");
    xhr_object_domestic.open(
      "GET",
      getWaterDomesticMonth + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterDomesticMonth + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object_domestic.open(
      "GET",
      getWaterDomesticMonth +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterDomesticMonth +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object_domestic.onload = function () {
    resfunWaterDomesticMonth = JSON.parse(this.responseText);
    console.log("Water Domestic Month --------------------------------- ");
    console.log(resfunWaterDomesticMonth);

    // let valueChartName = Object.keys(resfunWaterConsumptionObjectLPCD.response);
    // let valueChartY = Object.values(resfunWaterConsumptionObjectLPCD.response);

    // console.log(valueChartY);


    let arrAllObjects = Object.values(resfunWaterDomesticMonth.response);
    let arrdomestic_KL = [];
    let domestic_KL_avg_area = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrdomestic_KL.push(arrAllObjects[i].domestic_kl);
      domestic_KL_avg_area.push(arrAllObjects[i].consumption_per_sq_ft);
    }

    originalChartConfigDomesticWater = {
      type: "bar",
      data: {
        labels: Object.keys(resfunWaterDomesticMonth.response),
        datasets: [
          {
            label: "Domestic KL",
            backgroundColor: ["#FDAB3D"],
            data: arrdomestic_KL,
            borderWidth: 1,
            borderColor: "#FDAB3D",
            stack: "Stack 0",
            order: "2",

          },
          {
            type: "line",
            tension: 0,
            label: "Cosumption/sq.ft",
            backgroundColor: ["#E95420"],
            data: domestic_KL_avg_area,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 1",
            order: "1",
            yAxisID: 'percentage',


          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Month',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption (KL)'
            },
          },
          percentage: {
            beginAtZero: true,
            position: 'right',
            title: {
              display: true,
              text: 'Consumption per Sq.ft'
            },
          },
        },
        plugins: {
          datalabels: {
            //  color: "#000000",
            //  anchor: "end",
            //  align: "end",
            //  offset: -6,
            //  font: {
            //    size: "10",
            //    weight: "bold",
            //  },
            //  ticks: {
            //    callback: function (value) {
            //      return value
            //    }
            //  },
            display: false,
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(WaterDomesticMonth, originalChartConfigDomesticWater)

    loaderWaterDomesticMonth.style.display = "none";
    WaterDomesticMonthNoData.style.display = "none";
    WaterDomesticMonth.style.display = "block";

    infoSiteWiseDomesticIcon.addEventListener("click", InfoModal);
    let SiteWiseDomesticDiv = document.getElementById('SiteWiseDomesticDiv');
    let closeSiteWiseDomestic = document.getElementById('closeSiteWiseDomestic');
    function InfoModal(event) {
      event.stopPropagation();
      SiteWiseDomesticDiv.style.display = "block";
      if (resfunWaterDomesticMonth.info) {
        let SiteWiseDomesticInfo = document.getElementById("SiteWiseDomesticInfo");
        let SiteWiseDomesticInfo2 = document.getElementById("SiteWiseDomesticInfo2");


        SiteWiseDomesticInfo.innerHTML = "<b>Formula :</b> " + resfunWaterDomesticMonth.info.formula;
        SiteWiseDomesticInfo2.innerHTML = "<b>Info  : </b>" + resfunWaterDomesticMonth.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!SiteWiseDomesticDiv.contains(event.target) && event.target.id !== 'infoSiteWiseDomesticIcon') {
        closeSiteWiseDomesticDiv();
      }
    });
    closeSiteWiseDomestic.addEventListener("click", closeSiteWiseDomesticDiv);
    function closeSiteWiseDomesticDiv() {
      SiteWiseDomesticDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    SiteWiseDomesticDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    function restoreOriginalChartTicket() {
      if (originalChartConfigDomesticWater) {
        myChart.destroy();
        loaderWaterDomesticMonth.style.display = "block";
        // WaterDomesticMonth.style.display = "none";
        myChart = new Chart(WaterDomesticMonth, originalChartConfigDomesticWater);
        loaderWaterDomesticMonth.style.display = "none";
        // WaterDomesticMonth.style.display = "block";

      }
    }


    refreshIconElement_domesticWater.addEventListener("click", restoreOriginalChartTicket);

  };
  xhr_object_domestic.send();
  // infoSiteWiseDomesticIcon,SiteWiseDomesticDiv,closeSiteWiseDomestic,SiteWiseDomesticInfo

  // --------------------------------------------------------------------------------------------------------

  // water_consumption.style.display = "block";
  // loaderWaterConsum.style.display = "block";
  // waterConsumNoData.style.display = "none";

  let xhr_object6 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object6.open(
      "GET",
      getWaterConsumptionStackedBarChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getWaterConsumptionStackedBarChart + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object6.open(
      "GET",
      getWaterConsumptionStackedBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterConsumptionStackedBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object6.onload = function () {
    resfunWaterConsumptionObject6 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 6 - ");
    console.log(resfunWaterConsumptionObject6);
    // let arrAllObjects = Object.values(resfunWaterConsumptionObject6.response);
    // let arrflushing_KL = [];
    // // let arrflushing_KL_avg = [];
    // let arrirrigation_KL = [];
    // // let arrirrigation_KL_avg = [];
    // let arrtanker = [];
    // // let arrtanker_avg = [];
    // let arrstp = [];
    // // let arrstp_avg = [];
    // let arrTMC = [];
    // // let arrTMC_avg = [];
    // let arrOthers = [];
    // // let arrOthers_avg = [];

    // for (let i = 0; i < arrAllObjects.length; i++) {
    //   arrflushing_KL.push(arrAllObjects[i].Flushing_KL);
    //   // arrflushing_KL_avg.push(arrAllObjects[i].Flushing_KL_avg_area);
    //   arrirrigation_KL.push(arrAllObjects[i].Irrigation_KL);
    //   // arrirrigation_KL_avg.push(arrAllObjects[i].Irrigation_KL_avg_area);
    //   arrtanker.push(arrAllObjects[i].SOURCE___Tanker___Raw___Multiplication_Factor);
    //   // arrtanker_avg.push(arrAllObjects[i].SOURCE___Tanker___Raw___Multiplication_Factor_avg_area);
    //   arrstp.push(arrAllObjects[i].SOURCE__STP_Out_Put___Multiplication_Factor);
    //   // arrstp_avg.push(arrAllObjects[i].SOURCE__STP_Out_Put___Multiplication_Factor_avg_area);
    //   arrTMC.push(arrAllObjects[i].Water_Meter_TMC_Reading_In_KL);
    //   // arrTMC_avg.push(arrAllObjects[i].Water_Meter_TMC_Reading_In_KL_avg_area);
    //   arrOthers.push(arrAllObjects[i].others);
    //   // arrOthers_avg.push(arrAllObjects[i].others_avg_area);
    // }

    // // Added now
    // new Chart(water_consumption_top, {
    //   type: "bar",
    //   data: {
    //     labels: Object.keys(resfunWaterConsumptionObject6.response),
    //     datasets: [
    //       {
    //         label: "Flushing KL",
    //         backgroundColor: ["#77216f"],
    //         data: arrflushing_KL,
    //         borderWidth: 1,
    //         borderColor: "#77216f",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       {
    //         label: "Irrigation KL",
    //         backgroundColor: ["#f2ad6c"],
    //         data: arrirrigation_KL,
    //         borderWidth: 1,
    //         borderColor: "#f2ad6c",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       {
    //         label: "Tanker",
    //         backgroundColor: ["#3d5a80"],
    //         data: arrtanker,
    //         borderWidth: 1,
    //         borderColor: "#3d5a80",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       {
    //         label: "STP",
    //         backgroundColor: ["grey"],
    //         data: arrstp,
    //         borderWidth: 1,
    //         borderColor: "grey",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       {
    //         label: "TMC",
    //         backgroundColor: ["#98c1d9"],
    //         data: arrTMC,
    //         borderWidth: 1,
    //         borderColor: "#98c1d9",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       {
    //         label: "Others",
    //         backgroundColor: ["	#dddddd"],
    //         data: arrOthers,
    //         borderWidth: 1,
    //         borderColor: "	#dddddd",
    //         stack: "Stack 0",
    //         order: 2,
    //       },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "Flushing",
    //       //   backgroundColor: ["#77216f"],
    //       //   data: arrflushing_KL_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"#77216f",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "Irrigation",
    //       //   backgroundColor: ["#f2ad6c"],
    //       //   data: arrirrigation_KL_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"#f2ad6c",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "Tanker",
    //       //   backgroundColor: ["#3d5a80"],
    //       //   data: arrtanker_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"#3d5a80",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "STP",
    //       //   backgroundColor: ["grey"],
    //       //   data: arrstp_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"grey",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "TMC",
    //       //   backgroundColor: ["#98c1d9"],
    //       //   data: arrTMC_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"#98c1d9",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //       // {
    //       //   type: "line",
    //       //   tension: 0,
    //       //   label: "Others",
    //       //   backgroundColor: ["	#dddddd"],
    //       //   data: arrOthers_avg,
    //       //   borderWidth: 1,
    //       //   borderColor:"	#dddddd",
    //       //   stack: "Stack 0",
    //       //   order:1,
    //       // },
    //     ],
    //   },
    //   options: {
    //     responsive: true,
    //     maintainAspectRatio: false,
    //     // interaction: {
    //     //   intersect: false,
    //     // },

    //     scales: {
    //       x: {
    //         ticks: {
    //           callback: function (value) {
    //             return this.getLabelForValue(value).substr(0, 15);
    //           },
    //         },
    //         beginAtZero: true,
    //         title: {
    //           display: true,
    //           text: 'Months',
    //           padding: {
    //             top: 20,
    //           }
    //         }

    //       },
    //       y: {
    //         beginAtZero: true,
    //         // ticks: {
    //         //   callback: function (value) {
    //         //     return value + "%"
    //         //   }
    //         // },
    //         title: {
    //           display: true,
    //           text: 'Consumption (KL)'
    //         }
    //       }
    //     },
    //     plugins: {
    //       datalabels: {
    //         // color: "#000000",
    //         // anchor: "end",
    //         // align: "end",
    //         // offset: -6,
    //         // font: {
    //         //   size: "10",
    //         //   weight: "bold",
    //         // },

    //         display: false,
    //         ticks: {
    //           callback: function (value) {
    //             return value + "%"
    //           }
    //         },
    //       },
    //       legend: {
    //         labels: {
    //           usePointStyle: true  // Enable point style icons
    //         },
    //         display: true,
    //         position: "top",
    //         align: "center"
    //       },
    //     },
    //   },
    //   plugins: [ChartDataLabels],
    // });

    let arrAllObjects = Object.values(resfunWaterConsumptionObject6.response);
    let arrdomestic_KL = [];
    let arrflushing_KL = [];
    let arrirrigation_KL = [];
    let arrTotal = [];
    let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrdomestic_KL.push(arrAllObjects[i].domestic_KL);
      arrflushing_KL.push(arrAllObjects[i].flushing_KL);
      arrirrigation_KL.push(arrAllObjects[i].irrigation_KL);
      arrTotal.push(arrAllObjects[i].total);
      arrAverage.push(arrAllObjects[i].average);
    }
    let originalChartConfigmonthWiseWater;
    originalChartConfigmonthWiseWater = {
      type: "bar",
      data: {
        labels: Object.keys(resfunWaterConsumptionObject6.response),
        datasets: [
          {
            label: "Domestic KL",
            backgroundColor: ["#E95420"],
            data: arrdomestic_KL,
            borderWidth: 1,
            stack: "Stack 0",
            order: "2",
          },
          {
            label: "Flushing KL",
            backgroundColor: ["#77216f"],
            data: arrflushing_KL,
            borderWidth: 1,
            stack: "Stack 0",
            order: "2",
          },
          {
            label: "Irrigation KL",
            backgroundColor: ["#f2ad6c"],
            data: arrirrigation_KL,
            borderWidth: 1,
            stack: "Stack 0",
            order: "2",
          },
          {
            type: "line",
            tension: 0,
            label: "Average",
            backgroundColor: ["#16a60c"],
            data: arrAverage,
            borderWidth: 1,
            borderColor: "#16a60c",
            stack: "Stack 1",
            order: "1"
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Date',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            // ticks: {
            //   callback: function (value) {
            //     return value + "%"
            //   }
            // },
            title: {
              display: true,
              text: 'Consumption (KL)'
            }
          }
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "right"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

   let  myChart = new Chart(water_consumption_top, originalChartConfigmonthWiseWater)



    loaderWaterConsum.style.display = "none";
    waterConsumNoData.style.display = "none";
    water_consumption_top.style.display = "block";

    function restoreOriginalChartmonthWiseWater() {
      // alert("hiiiii")
      if (originalChartConfigmonthWiseWater) {
        myChart.destroy();
        // loaderWaterConsum.style.display = "block";
        // WaterDomesticMonth.style.display = "none";
        myChart = new Chart(water_consumption_top, originalChartConfigmonthWiseWater)
        // loaderWaterConsum.style.display = "none";
        // WaterDomesticMonth.style.display = "block";

      }
    }
    document.addEventListener("DOMContentLoaded", function () {
      const refreshIconElement_MonthWise = document.getElementById('refreshIconElement_MonthWise');
      refreshIconElement_MonthWise.addEventListener("click", restoreOriginalChartmonthWiseWater);
    });


    infoMonthWiseWaterIcon.addEventListener("click", InfoModal);
    let MonthWiseWaterDiv = document.getElementById('MonthWiseWaterDiv');
    let closeMonthWiseWater = document.getElementById('closeMonthWiseWater');
    function InfoModal(event) {
      event.stopPropagation();
      MonthWiseWaterDiv.style.display = "block";
      if (resfunWaterConsumptionObject6.info) {
        let MonthWiseWaterInfo = document.getElementById("MonthWiseWaterInfo");
        let MonthWiseWaterInfo2 = document.getElementById("MonthWiseWaterInfo2");


        MonthWiseWaterInfo.innerHTML = "<b>Formula :</b> " + resfunWaterConsumptionObject6.info.formula;
        MonthWiseWaterInfo2.innerHTML = "<b>Info  : </b>" + resfunWaterConsumptionObject6.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!MonthWiseWaterDiv.contains(event.target) && event.target.id !== 'infoMonthWiseWaterIcon') {
        closeMonthWiseWaterDiv();
      }
    });
    closeMonthWiseWater.addEventListener("click", closeMonthWiseWaterDiv);
    function closeMonthWiseWaterDiv() {
      MonthWiseWaterDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    MonthWiseWaterDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });




  };
  xhr_object6.send();

  // infoMonthWiseWaterIcon,MonthWiseWaterDiv,closeMonthWiseWater,MonthWiseWaterInfo




  // --------------------------------------------------------------------------------------------------------
  // loaderMonthWiseSTP,MonthWiseSTPNoData,MonthWiseSTP


  let loaderMonthWiseSTP = document.getElementById("loaderMonthWiseSTP");
  let MonthWiseSTPNoData = document.getElementById("MonthWiseSTPNoData");
  let MonthWiseSTP = document.getElementById("MonthWiseSTP");
  // let wsLPCD = document.getElementById("wsLPCD");



  // MonthWiseSTP.style.display = "block";
  // loaderMonthWiseSTP.style.display = "block";
  // MonthWiseSTPNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getMonthWiseSTP + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getMonthWiseSTP + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object.open(
      "GET",
      getMonthWiseSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getMonthWiseSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object.onload = function () {
    resfunMonthWiseSTP = JSON.parse(this.responseText);
    console.log("Month Wise STP Efficiency - ");
    console.log(resfunMonthWiseSTP);
    let arrAllObjects = Object.values(resfunMonthWiseSTP.response);
    // let arrstp = [];
    // let arrflushing_KL = [];
    // let arrirrigation_KL = [];
    // let arrTotal = [];
    // let arrAverage = [];

    // for (let i = 0; i < arrAllObjects.length; i++) {
    //   arrstp.push(arrAllObjects[i]);
    //   // arrflushing_KL.push(arrAllObjects[i].flushing_KL);
    //   // arrirrigation_KL.push(arrAllObjects[i].irrigation_KL);
    //   // arrTotal.push(arrAllObjects[i].total);
    //   // arrAverage.push(arrAllObjects[i].average);
    // }

    // Added now
    new Chart(MonthWiseSTP, {
      type: "bar",
      data: {
        labels: Object.keys(resfunMonthWiseSTP.response),
        datasets: [
          {
            label: "Stp Efficiency",
            backgroundColor: ["#E95420"],
            data: arrAllObjects,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
          },
          // {
          //   label: "Flushing KL",
          //   backgroundColor: ["#77216f"],
          //   data: arrflushing_KL,
          //   borderWidth: 1,
          //   borderColor:"grey",
          //   stack: "Stack 0",
          // },
          // {
          //   label: "Irrigation KL",
          //   backgroundColor: ["#f2ad6c"],
          //   data: arrirrigation_KL,
          //   borderWidth: 1,
          //   borderColor:"grey",
          //   stack: "Stack 0",
          // },
          // {
          //   type: "line",
          //   tension: 1,
          //   label: "Average",
          //   backgroundColor: ["#16a60c"],
          //   data: arrAverage,
          //   borderWidth: 1,
          //   borderColor:"grey",
          //   stack: "Stack 0",
          // },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
            title: {
              display: true,
              text: 'Consumption in %',
            }
          },
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Water Resources',
              padding: {
                top: 40,
              }
            }
          }

        },

        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
            title: {
              display: true,
              text: 'Consumption in %'
            }
          }
        },
        plugins: {
          datalabels: {
            // color: "#000000",
            // anchor: "end",
            // align: "end",
            // offset: -6,
            // font: {
            //   size: "10",
            //   weight: "bold",
            // },
            display: false,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "center"
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderMonthWiseSTP.style.display = "none";
    MonthWiseSTPNoData.style.display = "none";
    MonthWiseSTP.style.display = "block";

    // infoSTPIcon,STPDiv,closeSTP,STPInfo

    infoSTPIcon.addEventListener("click", InfoModal);
    let STPDiv = document.getElementById('STPDiv');
    let closeSTP = document.getElementById('closeSTP');
    function InfoModal(event) {
      event.stopPropagation();
      STPDiv.style.display = "block";
      if (resfunMonthWiseSTP.info) {
        let STPInfo = document.getElementById("STPInfo");
        let STPInfo2 = document.getElementById("STPInfo2");

        STPInfo.innerHTML = "<b>Formula :</b> " + resfunMonthWiseSTP.info.formula;
        STPInfo2.innerHTML = "<b>Info :</b> " + resfunMonthWiseSTP.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!STPDiv.contains(event.target) && event.target.id !== 'infoSTPIcon') {
        closeSTPDiv();
      }
    });
    closeSTP.addEventListener("click", closeSTPDiv);
    function closeSTPDiv() {
      STPDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    STPDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
  // loaderMonthWiseSTP,MonthWiseSTPNoData,MonthWiseSTP


  // --------------------------------------------------------------------

  // loaderSiteWiseWater,SiteWiseWaterNoData,SiteWiseWater

  // SiteWiseWater.style.display = "block";
  // loaderSiteWiseWater.style.display = "block";
  // SiteWiseWaterNoData.style.display = "none";

  let xhr_object_water = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object_water.open(
      "GET",
      getSiteWiseWater + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getSiteWiseWater + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object_water.open(
      "GET",
      getSiteWiseWater +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getSiteWiseWater +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object_water.onload = function () {
    resfunSiteWiseWater = JSON.parse(this.responseText);
    console.log("Site Wise Water  - ");
    console.log(resfunSiteWiseWater);
    let arrAllObjects = Object.values(resfunSiteWiseWater.response);
    let arrdomestic_KL = [];
    let arrflushing_KL = [];
    let arrirrigation_KL = [];
    let arrTotal = [];
    let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrdomestic_KL.push(arrAllObjects[i].domestic_kl);
      arrflushing_KL.push(arrAllObjects[i].flushing_kl);
      arrirrigation_KL.push(arrAllObjects[i].irrigation_kl);
      // arrTotal.push(arrAllObjects[i].total);
      arrAverage.push(arrAllObjects[i].consumption_per_sq_ft);
    }

    // Added now
    originalChartConfigSiteWiseWater = {
      type: "bar",
      data: {
        labels: Object.keys(resfunSiteWiseWater.response),
        datasets: [
          {
            label: "Domestic ",
            backgroundColor: ["#77216f"],
            data: arrdomestic_KL,
            borderWidth: 1,
            borderColor: "#77216f",
            stack: "Stack 0",
            order: 2,
          },
          {
            label: "Flushing ",
            backgroundColor: ["#FDAB3D"],
            data: arrflushing_KL,
            borderWidth: 1,
            borderColor: "#FDAB3D",
            stack: "Stack 0",
            order: 2,
          },
          {
            label: "Irrigation",
            backgroundColor: ["#E95420"],
            data: arrirrigation_KL,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
            order: 2,
          },
          // {
          //   type: "line",
          //   tension: 0,
          //   label: "Per sq ft",
          //   backgroundColor: ["#16a60c"],
          //   data: arrAverage,
          //   borderWidth: 1,
          //   borderColor: "#16a60c",
          //   stack: "Stack 0",
          //   order: 1,
          //   yAxisID: 'percentage',
          // },
          {
            type: "line",
            tension: 0,
            label: "Consumption per sq ft",
            backgroundColor: ["#730000"],
            data: arrAverage,
            borderWidth: 1,
            borderColor: "#730000",
            stack: "Stack 0",
            order: 1,
            yAxisID: 'percentage',
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption kl'
            },
          },
          percentage: {
            beginAtZero: true,
            position: 'right',
            title: {
              display: true,
              text: 'Per Sq.ft kl'
            },
          },
        },
        plugins: {
          datalabels: {
            // color: "#000000",
            // anchor: "end",
            // align: "end",
            // offset: -6,
            // font: {
            //   size: "10",
            //   weight: "bold",
            // },
            display: false,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(SiteWiseWater, originalChartConfigSiteWiseWater)

    loaderSiteWiseWater.style.display = "none";
    SiteWiseWaterNoData.style.display = "none";
    SiteWiseWater.style.display = "block";
    // loaderSiteWiseWater,SiteWiseWaterNoData,SiteWiseWater

    infoSiteWiseWaterIcon.addEventListener("click", InfoModal);
    let SiteWiseWaterDiv = document.getElementById('SiteWiseWaterDiv');
    let closeSiteWiseWater = document.getElementById('closeSiteWiseWater');
    function InfoModal(event) {
      event.stopPropagation();
      SiteWiseWaterDiv.style.display = "block";
      if (resfunSiteWiseWater.info) {
        let SiteWiseWaterInfo = document.getElementById("SiteWiseWaterInfo");
        let SiteWiseWaterInfo2 = document.getElementById("SiteWiseWaterInfo2");


        SiteWiseWaterInfo.innerHTML = "<b>Formula :</b> " + resfunSiteWiseWater.info.formula;
        SiteWiseWaterInfo2.innerHTML = "<b>Info  : </b>" + resfunSiteWiseWater.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!SiteWiseWaterDiv.contains(event.target) && event.target.id !== 'infoSiteWiseWaterIcon') {
        closeSiteWiseWaterDiv();
      }
    });
    closeSiteWiseWater.addEventListener("click", closeSiteWiseWaterDiv);
    function closeSiteWiseWaterDiv() {
      SiteWiseWaterDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    SiteWiseWaterDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    function restoreOriginalChartSiteWiseWater() {
      if (originalChartConfigSiteWiseWater) {
        myChart.destroy();
        loaderSiteWiseWater.style.display = "block";
        // WaterDomesticMonth.style.display = "none";
        myChart = new Chart(SiteWiseWater, originalChartConfigSiteWiseWater)
        loaderSiteWiseWater.style.display = "none";
        // WaterDomesticMonth.style.display = "block";

      }
    }
    refreshIconElement_SiteWise.addEventListener("click", restoreOriginalChartSiteWiseWater);
  };
  xhr_object_water.send();

  // ----------- Sector (Customer) wise ---------------------------------------------------------

  let xhr_object_customer = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object_customer.open(
      "GET",
      getCustomerWiseWater + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getCustomerWiseWater + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object_customer.open(
      "GET",
      getCustomerWiseWater +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getCustomerWiseWater +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object_customer.onload = function () {
    resfunCustomerWiseWater = JSON.parse(this.responseText);
    console.log("Customer Wise Water  - ");
    console.log(resfunCustomerWiseWater);
    let arrAllObjects = Object.values(resfunCustomerWiseWater.response);
    let arrdomestic_KL = [];
    let arrflushing_KL = [];
    let arrirrigation_KL = [];
    let arrTotal = [];
    let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrdomestic_KL.push(arrAllObjects[i].domestic_kl);
      arrflushing_KL.push(arrAllObjects[i].flushing_kl);
      arrirrigation_KL.push(arrAllObjects[i].irrigation_kl);
      // arrTotal.push(arrAllObjects[i].total);
      arrAverage.push(arrAllObjects[i].consumption_per_sq_ft);
    }

    // Added now
    originalChartConfigCustomerWiseWater = {
      type: "bar",
      data: {
        labels: Object.keys(resfunCustomerWiseWater.response),
        datasets: [
          {
            label: "Domestic ",
            backgroundColor: ["#77216f"],
            data: arrdomestic_KL,
            borderWidth: 1,
            borderColor: "#77216f",
            stack: "Stack 0",
            order: 2,
          },
          // {
          //   label: "Flushing ",
          //   backgroundColor: ["#FDAB3D"],
          //   data: arrflushing_KL,
          //   borderWidth: 1,
          //   borderColor: "#FDAB3D",
          //   stack: "Stack 0",
          //   order: 2,
          // },
          // {
          //   label: "Irrigation",
          //   backgroundColor: ["#E95420"],
          //   data: arrirrigation_KL,
          //   borderWidth: 1,
          //   borderColor: "#E95420",
          //   stack: "Stack 0",
          //   order: 2,
          // },
          // {
          //   type: "line",
          //   tension: 0,
          //   label: "Per sq ft",
          //   backgroundColor: ["#16a60c"],
          //   data: arrAverage,
          //   borderWidth: 1,
          //   borderColor: "#16a60c",
          //   stack: "Stack 0",
          //   order: 1,
          //   yAxisID: 'percentage',
          // },
          {
            type: "line",
            tension: 0,
            label: "Consumption per sq ft",
            backgroundColor: ["#730000"],
            data: arrAverage,
            borderWidth: 1,
            borderColor: "#730000",
            stack: "Stack 0",
            order: 1,
            yAxisID: 'percentage',
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Customers',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption kl'
            },
          },
          percentage: {
            beginAtZero: true,
            position: 'right',
            title: {
              display: true,
              text: 'Per Sq.ft kl'
            },
          },
        },
        plugins: {
          datalabels: {
            // color: "#000000",
            // anchor: "end",
            // align: "end",
            // offset: -6,
            // font: {
            //   size: "10",
            //   weight: "bold",
            // },
            display: false,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(CustomerWiseWater, originalChartConfigCustomerWiseWater)

    loaderCustomerWiseWater.style.display = "none";
    CustomerWiseWaterNoData.style.display = "none";
    CustomerWiseWater.style.display = "block";
    // loaderCustomerWiseWater,CustomerWiseWaterNoData,CustomerWiseWater

    infoCustomerWiseWaterIcon.addEventListener("click", InfoModal);
    let CustomerWiseWaterDiv = document.getElementById('CustomerWiseWaterDiv');
    let closeCustomerWiseWater = document.getElementById('closeCustomerWiseWater');
    function InfoModal(event) {
      event.stopPropagation();
      CustomerWiseWaterDiv.style.display = "block";
      if (resfunCustomerWiseWater.info) {
        let CustomerWiseWaterInfo = document.getElementById("CustomerWiseWaterInfo");
        let CustomerWiseWaterInfo2 = document.getElementById("CustomerWiseWaterInfo2");


        CustomerWiseWaterInfo.innerHTML = "<b>Formula :</b> " + resfunCustomerWiseWater.info.formula;
        CustomerWiseWaterInfo2.innerHTML = "<b>Info  : </b>" + resfunCustomerWiseWater.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CustomerWiseWaterDiv.contains(event.target) && event.target.id !== 'infoCustomerWiseWaterIcon') {
        closeCustomerWiseWaterDiv();
      }
    });
    closeCustomerWiseWater.addEventListener("click", closeCustomerWiseWaterDiv);
    function closeCustomerWiseWaterDiv() {
      CustomerWiseWaterDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CustomerWiseWaterDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    function restoreOriginalChartCustomerWiseWater() {
      if (originalChartConfigCustomerWiseWater) {
        myChart.destroy();
        loaderCustomerWiseWater.style.display = "block";
        // WaterDomesticMonth.style.display = "none";
        myChart = new Chart(CustomerWiseWater, originalChartConfigCustomerWiseWater)
        loaderCustomerWiseWater.style.display = "none";
        // WaterDomesticMonth.style.display = "block";

      }
    }
    refreshIconElement_CustomerWise.addEventListener("click", restoreOriginalChartCustomerWiseWater);
  };
  xhr_object_customer.send();

}


function Refresh_wcTotalConsumptionTop() {
  let wcTotalConsumptionTop = document.getElementById("wcTotalConsumptionTop");
  let loader = document.getElementById("loader_wcTotalConsumptionTop");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalConsumptionTop.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        getTotalWaterConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTotalWaterConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object1.open(
        "GET",
        getTotalWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTotalWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfunWaterConsumptionObject1 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 1 - ");
      console.log(resfunWaterConsumptionObject1);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject1 && parseFloat(resfunWaterConsumptionObject1.response)) {
        wcTotalConsumptionTop.innerHTML = resfunWaterConsumptionObject1.response + "0 KL";

      } else {
        wcTotalConsumptionTop.innerHTML = "No data available";
        wcTotalConsumptionTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}

function Refresh_wcTotalDomesticTop() {
  let wcTotalDomesticTop = document.getElementById("wcTotalDomesticTop");
  let loader = document.getElementById("loader_wcTotalDomesticTop");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalDomesticTop.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getWaterConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getWaterConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunWaterConsumptionObject2 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 2 - ");
      console.log(resfunWaterConsumptionObject2);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject2 && parseFloat(resfunWaterConsumptionObject2.response)) {
        wcTotalDomesticTop.innerHTML =
          resfunWaterConsumptionObject2.response["kl"] + " KL";
      } else {
        wcTotalDomesticTop.innerHTML = "No data available";
        wcTotalDomesticTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}


function Refresh_wcFlushingTotalTop() {
  let wcFlushingTotalTop = document.getElementById("wcFlushingTotalTop");
  let loader = document.getElementById("loader_wcFlushingTotalTop");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcFlushingTotalTop.innerHTML = "";

    let xhr_object = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getFlushing + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getFlushing + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getFlushing +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getFlushing +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      resfunWaterConsumptionObject = JSON.parse(this.responseText);
      console.log("Water Consumption Object  - ");
      console.log(resfunWaterConsumptionObject);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject && parseFloat(resfunWaterConsumptionObject.response)) {
        wcFlushingTotalTop.innerHTML =
          resfunWaterConsumptionObject.response["kl"] + " KL";
      } else {
        wcFlushingTotalTop.innerHTML = "No data available";
        wcFlushingTotalTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();

  }

  fetchData();

}




function Refresh_wcTotalIrrigationTop() {
  let wcTotalIrrigationTop = document.getElementById("wcTotalIrrigationTop");
  let loader = document.getElementById("loader_wcTotalIrrigation");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalIrrigationTop.innerHTML = "";

    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getIrrigation + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getIrrigation + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getIrrigation +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getIrrigation +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunWaterConsumptionObject3 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 3 - ");
      console.log(resfunWaterConsumptionObject3);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject3 && parseFloat(resfunWaterConsumptionObject3.response)) {
        wcTotalIrrigationTop.innerHTML =
          resfunWaterConsumptionObject3.response["kl"] + " KL";
      } else {
        wcTotalIrrigationTop.innerHTML = "No data available";
        wcTotalIrrigationTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}









function funPowerConsumptionTop() {
  let titlePowerConsumation = document.getElementById("titlePowerConsumation");

  let pcTotalHtMeterTop = document.getElementById("pcTotalHtMeterTop");
  let pcTotalTransformerTop = document.getElementById("pcTotalTransformerTop");
  let pcTotalDgTop = document.getElementById("pcTotalDgTop");
  let pcTotalDieselConsumed = document.getElementById("pcTotalDieselConsumed");
  let pcTotalDieselConsumedPie = document.getElementById(
    "pcTotalDieselConsumedPie"
  );

  let loaderPowerConsumPieTop = document.getElementById("loaderPowerConsumPieTop");
  let powerConsumPieNoDataTop = document.getElementById("powerConsumPieNoDataTop");
  let power_consume_pieTop = document.getElementById("power_consume_pieTop");
  let psPie1 = document.getElementById("psPie1");
  let psPie2 = document.getElementById("psPie2");
  let psPie3 = document.getElementById("psPie3");
  let psPie4 = document.getElementById("psPie4");
  let psPie5 = document.getElementById("psPie5");

  let loaderMonthPower = document.getElementById("loaderMonthPower");
  let powerConsumMonthNoData = document.getElementById("powerConsumMonthNoData");
  let power_consumption_month = document.getElementById("power_consumption_month");



  let loaderSitePower = document.getElementById("loaderSitePower");
  let SitePowerNoData = document.getElementById("SitePowerNoData");
  let SitePowerConsumption = document.getElementById("SitePowerConsumption");

  let timeSeriesPowerConsumptionAssetwise = document.getElementById(
    "power-consumption-assetwise"
  );
  // let loaderPowerConsumAssetWiseTimeSeries = document.getElementById(
  //   "loaderPowerConsumAssetWiseTimeSeries"
  // );
  // let powerConsumAssetWiseTimeSeriesNoData = document.getElementById(
  //   "powerConsumAssetWiseTimeSeriesNoData"
  // );

  // if (globalType == "daily") {
  //   titlePowerConsumation.innerHTML =
  //     "Power Consumption for " + convertDateFormat(globalDateFirst);
  // } else {
  //   titlePowerConsumation.innerHTML =
  //     "Power Consumption for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // ----------------------------------------------

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      getMainMeterTotalConsumptionTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getMainMeterTotalConsumptionTop + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object1.open(
      "GET",
      getMainMeterTotalConsumptionTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getMainMeterTotalConsumptionTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resfunPowerConsumptionObject1 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 1 - ");
    console.log(resfunPowerConsumptionObject1);
    if (resfunPowerConsumptionObject1.response == null) {
      pcTotalHtMeterTop.innerHTML = "0 EB KWH";
    } else {
      pcTotalHtMeterTop.innerHTML =
        resfunPowerConsumptionObject1.response + " EB KWH";
    }


    infoTotalConsumptionIcon.addEventListener("click", InfoModal);
    let TotalConsumptionDiv = document.getElementById('TotalConsumptionDiv');
    let closeTotalConsumption = document.getElementById('closeTotalConsumption');
    function InfoModal(event) {
      event.stopPropagation();
      TotalConsumptionDiv.style.display = "block";
      if (resfunPowerConsumptionObject1.info) {
        let TotalConsumptionInfo = document.getElementById("TotalConsumptionInfo");
        let TotalConsumptionInfo2 = document.getElementById("TotalConsumptionInfo2");

        TotalConsumptionInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject1.info.formula;
        TotalConsumptionInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject1.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalConsumptionDiv.contains(event.target) && event.target.id !== 'infoTotalConsumptionIcon') {
        closeTotalConsumptionDiv();
      }
    });
    closeTotalConsumption.addEventListener("click", closeTotalConsumptionDiv);
    function closeTotalConsumptionDiv() {
      TotalConsumptionDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalConsumptionDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object1.send();

  // ----------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getTransformerTotalTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTransformerTotalTop + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getTransformerTotalTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTransformerTotalTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    resfunPowerConsumptionObject2 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 2 - ");
    console.log(resfunPowerConsumptionObject2);
    if (resfunPowerConsumptionObject2.response == null) {
      pcTotalTransformerTop.innerHTML = "0 KWH";
    } else {
      pcTotalTransformerTop.innerHTML =
        resfunPowerConsumptionObject2.response + " KWH";
    }

    infoTotalRenewableIcon.addEventListener("click", InfoModal);
    let TotalRenewableDiv = document.getElementById('TotalRenewableDiv');
    let closeTotalRenewable = document.getElementById('closeTotalRenewable');
    function InfoModal(event) {
      event.stopPropagation();
      TotalRenewableDiv.style.display = "block";
      if (resfunPowerConsumptionObject2.info) {
        let TotalRenewableInfo = document.getElementById("TotalRenewableInfo");
        let TotalRenewableInfo2 = document.getElementById("TotalRenewableInfo2");

        TotalRenewableInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject2.info.formula;
        TotalRenewableInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject2.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalRenewableDiv.contains(event.target) && event.target.id !== 'infoTotalRenewableIcon') {
        closeTotalRenewableDiv();
      }
    });
    closeTotalRenewable.addEventListener("click", closeTotalRenewableDiv);
    function closeTotalRenewableDiv() {
      TotalRenewableDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalRenewableDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object2.send();

  // ----------------------------------------------

  let xhr_object3 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object3.open(
      "GET",
      getDGTotalTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getDGTotalTop + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object3.open(
      "GET",
      getDGTotalTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getDGTotalTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object3.onload = function () {
    resfunPowerConsumptionObject3 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 3 - ");
    console.log(resfunPowerConsumptionObject3);
    if (resfunPowerConsumptionObject3.response == null) {
      pcTotalDgTop.innerHTML = "0 DG KWH";
    } else {
      pcTotalDgTop.innerHTML = resfunPowerConsumptionObject3.response + " DG KWH";
    }

    infoTotalDGIcon.addEventListener("click", InfoModal);
    let TotalDGDiv = document.getElementById('TotalDGDiv');
    let closeTotalDG = document.getElementById('closeTotalDG');
    function InfoModal(event) {
      event.stopPropagation();
      TotalDGDiv.style.display = "block";
      if (resfunPowerConsumptionObject3.info) {
        let TotalDGInfo = document.getElementById("TotalDGInfo");
        let TotalDGInfo2 = document.getElementById("TotalDGInfo2");

        TotalDGInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject3.info.formula;
        TotalDGInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject3.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalDGDiv.contains(event.target) && event.target.id !== 'infoTotalDGIcon') {
        closeTotalDGDiv();
      }
    });
    closeTotalDG.addEventListener("click", closeTotalDGDiv);
    function closeTotalDGDiv() {
      TotalDGDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalDGDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object3.send();

  // ----------------------------------------------

  let xhr_object4 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object4.open(
      "GET",
      getCumu + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getDieselConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object4.open(
      "GET",
      getDieselConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getDieselConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object4.onload = function () {
    resfunPowerConsumptionObject4 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 4 - ");
    console.log(resfunPowerConsumptionObject4);
    if (resfunPowerConsumptionObject4.response == null) {
      pcTotalDieselConsumed.innerHTML = "0 liters";
    } else {
      pcTotalDieselConsumed.innerHTML =
        resfunPowerConsumptionObject4.response + " liters";

    }
  };
  xhr_object4.send();

  // ----------------------------------------------

  // loaderPowerConsumPie.style.display = "block";
  // powerConsumPieNoData.style.display = "none";

  let xhr_object5 = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object5.open(
      "GET",
      getCumulativeConsumptionPieChartTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");

    console.log(
      getCumulativeConsumptionPieChartTop + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object5.open(
      "GET",
      getCumulativeConsumptionPieChartTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");

    console.log(
      getCumulativeConsumptionPieChartTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object5.onload = function () {
    resfunPowerConsumptionObject5 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 5555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555 - ");
    console.log(resfunPowerConsumptionObject5);

    let valueChartNameLabel = Object.keys(resfunPowerConsumptionObject5.pie);
    let valueChartYLabel = Object.values(resfunPowerConsumptionObject5.pie);

    console.log("Power Consum Pie Chart - " + valueChartNameLabel);

    if (valueChartNameLabel[0] != null) {
      psPie1.innerHTML =
        '<i class="bi  bi-circle-fill " style="color:#F2C06C;"></i> ' +
        valueChartNameLabel[0] + " - <b>" + valueChartYLabel[0] + " KWH</b>" +
        "<br/>";
    }

    if (valueChartNameLabel[1] != null) {
      psPie2.innerHTML =
        '<i class="bi  bi-circle-fill " style="color:#F8EA94;"></i> ' +
        valueChartNameLabel[1] + " - <b>" + valueChartYLabel[1] + " KWH</b>" +
        "<br/>";
    }

    if (valueChartNameLabel[2] != null) {
      psPie3.innerHTML =
        '<i class="bi  bi-circle-fill " style="color:#A1CD7A;"></i> ' +
        valueChartNameLabel[2] + " -  <b>" + valueChartYLabel[2] + " KWH </b>" +
        "<br/>";
    }

    if (valueChartNameLabel[3] != null) {
      psPie4.innerHTML =
        '<i class="bi  bi-circle-fill " style="color:#D44B52;"></i> ' +
        valueChartNameLabel[3] + " - <b>" + valueChartYLabel[3] + " KWH</b>" +
        "<br/>";
    }

    // if (valueChartNameLabel[4] != null) {
    //   psPie5.innerHTML = '<i class="bi  bi-square-fill " style="color:#F69380;"></i> ' +
    //     valueChartNameLabel[4] + " - <b>" + valueChartYLabel[4] + " KWH</b>" +
    //     "<br/>";
    // }


    let valueChartName = Object.keys(resfunPowerConsumptionObject5.percentage);
    let valueChartY = Object.values(resfunPowerConsumptionObject5.percentage);
    // Added Now
    originalChartConfigPowerTopPie = {
      type: "pie",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: "Borewell 1",
            data: valueChartY,
            backgroundColor: [
              "#F2C06C",
              "#F8EA94",
              "#A1CD7A",
              "#D44B52",
              "#F69380",
            ],
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: (value, context) => {
              const dataset = context.chart.data.datasets[context.datasetIndex];
              const total = dataset.data.reduce((sum, value) => sum + value, 0);
              const percentage = ((value / total) * 100).toFixed(1);
              return `${percentage}%`;
            },
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(power_consume_pieTop, originalChartConfigPowerTopPie)

    let sum = 0;

    for (let i = 0; i < valueChartY.length; i += 1) {
      if (valueChartY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueChartY[i];
      }
    }


    // if (resfunPowerConsumptionObject5.total_consumption == null) {
    //   pcTotalDieselConsumedPie.innerHTML = "0 KWH";
    // } else {
    //   pcTotalDieselConsumedPie.innerHTML =
    //     resfunPowerConsumptionObject5.total_consumption + " KWH";
    // }

    loaderPowerConsumPieTop.style.display = "none";
    if (sum == 0) {
      powerConsumPieNoDataTop.style.display = "block";
      power_consume_pieTop.style.display = "none";
    } else {
      powerConsumPieNoDataTop.style.display = "none";
      power_consume_pieTop.style.display = "block";
    }

    infoRenewableSourcesIcon.addEventListener("click", InfoModal);
    let RenewableSourcesDiv = document.getElementById('RenewableSourcesDiv');
    let closeRenewableSources = document.getElementById('closeRenewableSources');
    function InfoModal(event) {
      event.stopPropagation();
      RenewableSourcesDiv.style.display = "block";
      if (resfunPowerConsumptionObject5.info) {
        let RenewableSourcesInfo = document.getElementById("RenewableSourcesInfo");
        let RenewableSourcesInfo2 = document.getElementById("RenewableSourcesInfo2");

        RenewableSourcesInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject5.info.formula;
        RenewableSourcesInfo2.innerHTML = "<b>Info : </b>" + resfunPowerConsumptionObject5.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!RenewableSourcesDiv.contains(event.target) && event.target.id !== 'infoRenewableSourcesIcon') {
        closeRenewableSourcesDiv();
      }
    });
    closeRenewableSources.addEventListener("click", closeRenewableSourcesDiv);
    function closeRenewableSourcesDiv() {
      RenewableSourcesDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    RenewableSourcesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // Refresh_RenewableSources


    function restoreOriginalChartPowerTopPie() {
      if (originalChartConfigPowerTop) {
        myChart.destroy();
        myChart = new Chart(power_consume_pieTop, originalChartConfigPowerTopPie)

      }
    }

    Refresh_RenewableSources.addEventListener("click", restoreOriginalChartPowerTopPie);
  };
  xhr_object5.send();



  // ----------------------------------------------
  let clickedPowerMonth = true;
  // power_consumption_month.style.display = "none";
  // loaderMonthPower.style.display = "block";
  // powerConsumMonthNoData.style.display = "none";

  let xhr_object6 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object6.open(
      "GET",
      getPowerConsumptionBarChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getPowerConsumptionBarChart + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object6.open(
      "GET",
      getPowerConsumptionBarChartMonthWise +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getPowerConsumptionBarChartMonthWise +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object6.onload = function () {
    resfunPowerConsumptionObjectMonth = JSON.parse(this.responseText);
    console.log("Power Consumption Object Month Wise - ");
    console.log(resfunPowerConsumptionObject6);

    let arrAllObjects = Object.values(resfunPowerConsumptionObjectMonth.response);
    let arrSolar = [];
    let arrDG = [];
    let arrMains = [];
    let arrSolar_avg = [];
    let arrDg_avg = [];
    let arrMains_avg = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrSolar.push(arrAllObjects[i].Solar);
      arrDG.push(arrAllObjects[i].dg);
      arrMains.push(arrAllObjects[i].mains);
      arrSolar_avg.push(arrAllObjects[i].solar_area_avg);
      arrDg_avg.push(arrAllObjects[i].dg_area_avg);
      arrMains_avg.push(arrAllObjects[i].mains_area_avg);

    }
    console.log("++++++++++++++++++++++++++++++++++++++++++++++++Satcked Bar+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    console.log(arrSolar);
    console.log(arrDG);
    // console.log(arrHtMeter);
    // console.log(arrAverage);

    let currentChartType = "bar"
    // Added now
    originalChartConfigPowerMonth = {
      type: "bar",
      data: {
        labels: Object.keys(resfunPowerConsumptionObjectMonth.response),
        datasets: [
          {
            label: "Mains",
            backgroundColor: ["#E95420"],
            data: arrMains,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
          },
          {
            label: "Renewable",
            backgroundColor: ["#FDAB3D"],
            data: arrSolar,
            borderWidth: 1,
            borderColor: "#FDAB3D",
            stack: "Stack 0",
          },
          {
            label: "DG",
            backgroundColor: ["#77216F"],
            data: arrDG,
            borderWidth: 1,
            borderColor: "#77216F",
            stack: "Stack 0",
          },
          {
            type: "line",
            tension: 0,
            label: "Mains",
            backgroundColor: ["#730000"],
            data: arrMains_avg,
            borderWidth: 0.4,
            borderColor: "#E95420",
            stack: "Stack 0",
            yAxisID: 'percentage',
          },
          {
            type: "line",
            tension: 0,
            label: "Renewable",
            backgroundColor: ["#7be382"],
            data: arrSolar_avg,
            borderWidth: 0.4,
            borderColor: "#FDAB3D",
            stack: "Stack 0",
            yAxisID: 'percentage',
          },
          {
            type: "line",
            tension: 0,
            label: "DG",
            backgroundColor: ["#98c1d9"],
            data: arrDg_avg,
            borderWidth: 0.4,
            borderColor: "#77216F",
            stack: "Stack 0",
            yAxisID: 'percentage',
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Months',
              padding: {
                top: 20,
              }
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption kwh'
            },
          },
          percentage: {
            beginAtZero: true,
            position: 'right',
            title: {
              display: true,
              text: 'Consumption Sq.ft '
            },
          },
        },
        plugins: {
          datalabels: {
            // color: "#000000",
            // anchor: "end",
            // align: "end",
            // offset: -6,
            // font: {
            //   size: "10",
            //   weight: "bold",
            // },
            display: false,
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "center",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(power_consumption_month, originalChartConfigPowerMonth);
    loaderMonthPower.style.display = "none";
    powerConsumMonthNoData.style.display = "none";
    power_consumption_month.style.display = "block";

    infoMonthWisePowerIcon.addEventListener("click", InfoModal);
    let MonthWisePowerDiv = document.getElementById('MonthWisePowerDiv');
    let closeMonthWisePower = document.getElementById('closeMonthWisePower');
    function InfoModal(event) {
      event.stopPropagation();
      MonthWisePowerDiv.style.display = "block";
      if (resfunPowerConsumptionObject6.info) {
        let MonthWisePowerInfo = document.getElementById("MonthWisePowerInfo");
        let MonthWisePowerInfo2 = document.getElementById("MonthWisePowerInfo2");

        MonthWisePowerInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject6.info.formula;
        MonthWisePowerInfo2.innerHTML = "<b>Info : </b>" + resfunPowerConsumptionObject6.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!MonthWisePowerDiv.contains(event.target) && event.target.id !== 'infoMonthWisePowerIcon') {
        closeMonthWisePowerDiv();
      }
    });
    closeMonthWisePower.addEventListener("click", closeMonthWisePowerDiv);
    function closeMonthWisePowerDiv() {
      MonthWisePowerDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    MonthWisePowerDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // power_consumption_month.onclick = function (event) {
    //   let clickedPowerMonth = true;
    //   if (clickedPowerMonth == true) {
    //     const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

    //     if (points.length) {
    //       const firstPoint = points[0];
    //       const label = myChart.data.labels[firstPoint.index];
    //       const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

    //       console.log(`Clicked on ${label} with value ${value}`);

    //       listItemLabelmonthpower.textContent = ` ${label}`;
    //       // console.log(listItemLabelpower);
    //       // document.getElementById("listItemValue").textContent = `Value: ${value}`;

    //       const dropdown = (document.getElementById("dataDropdown_monthpower_wise"));
    //       console.log(dropdown);
    //       dropdown.style.display = "block";

    //     }
    //     dataDropdown_monthpower_wise.addEventListener("click", function (event) {
    //       const selectedOption = event.target.id;
    //       const firstPoint = points[0];
    //       const label = myChart.data.labels[firstPoint.index];
    //       const labelname = label;
    //       console.log(selectedOption);
    //       if (event.target.id != "closeDropdown") {
    //         if (selectedOption === "Asset_Name" && currentChartType === "bar") {
    //           let xhr_object = new XMLHttpRequest();
    //           xhr_object.open(
    //             "GET",
    //             getPowerMonthDrill +
    //             "?site_name=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&site_id=" +
    //             countSiteDrop +
    //             "&society_id=" +
    //             countSocietyDrop +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //             true
    //           );

    //           console.log(
    //             getPowerDrill +
    //             "?site_name=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&site_id=" +
    //             countSiteDrop +
    //             "&society_id=" +
    //             countSocietyDrop +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //           );

    //           downloadPowerConsumMonthLink = ip + "supervisor-monthly/get-month-wise-power-consumption-drill-down-excel/" +
    //             "?site_name=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&site_id=" +
    //             countSiteDrop +
    //             "&society_id=" +
    //             countSocietyDrop +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,

    //             xhr_object.onload = function () {
    //               resPowerDrill = JSON.parse(this.responseText);
    //               console.log("Tickets Drill Down - ");
    //               console.log(resPowerDrill);

    //               const labels = resPowerDrill.res.map(item => item[0]);
    //               const dataValues = resPowerDrill.res.map(item => item[2]);

    //               myChart.destroy();
    //               myChart = new Chart(power_consumption_month, {
    //                 type: "bar",
    //                 data: {
    //                   labels: labels,
    //                   datasets: [{
    //                     label: "Data",
    //                     data: dataValues,
    //                     backgroundColor: ["#e2445b"],
    //                   }]
    //                 },
    //                 options: {
    //                   responsive: true,
    //                   interaction: {
    //                     intersect: false,
    //                   },
    //                   scales: {
    //                     x: {
    //                       stacked: true,
    //                     },
    //                     y: {
    //                       stacked: true,
    //                     },
    //                   },
    //                   maintainAspectRatio: false,
    //                   scales: {
    //                     x: {
    //                     },
    //                   },
    //                   plugins: {
    //                     datalabels: {
    //                       color: "#000000",
    //                       anchor: "end",
    //                       align: "end",
    //                       offset: -6,
    //                       font: {
    //                         size: "10",
    //                         weight: "bold",
    //                       },
    //                       formatter: function (value, context) {
    //                         // Hide label if value is zero
    //                         return value === 0 ? '' : value;
    //                       }
    //                     },
    //                     legend: {
    //                       display: true,
    //                       position: "no",
    //                     },
    //                   },
    //                 },
    //                 plugins: [ChartDataLabels],
    //               });
    //               power_consumption_month.style.display = "block";
    //             }

    //           xhr_object.send();
    //         }
    //       }
    //       else {

    //         restoreOriginalChartPowerMonth();

    //       }

    //       dataDropdown_monthpower_wise.style.display = "none";
    //     });
    //   } else if (clickedPowerMonth == false) {
    //     alert("You have reached the maximum drill-down level.");
    //   }


    // };

    function restoreOriginalChartPowerMonth() {
      if (originalChartConfigPowerMonth) {
        myChart.destroy();
        myChart = new Chart(power_consumption_month, originalChartConfigPowerMonth);
        clickedPowerMonth = true;
      }
    }

    refreshIconElement_monthpower.addEventListener("click", restoreOriginalChartPowerMonth);
  };
  xhr_object6.send();



  // SitePowerConsumption.style.display = "none";
  // loaderSitePower.style.display = "block";
  // SitePowerNoData.style.display = "none";

  let xhr_object7 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object7.open(
      "GET",
      getSitePowerConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getSitePowerConsumption + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object7.open(
      "GET",
      getSitePowerConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getSitePowerConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object7.onload = function () {
    resfunPowerConsumptionObject7 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 7 - ");
    console.log(resfunPowerConsumptionObject7);

    let arrAllObjects = Object.values(resfunPowerConsumptionObject7.response);
    let arrSolar = [];
    let arrSolaravg = [];
    let arrDG = [];
    let arrDGavg = [];
    let arrMains = [];
    let arrMainsavg = [];
    // let arrTotal = [];
    // let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrSolar.push(arrAllObjects[i].solar);
      arrSolaravg.push(arrAllObjects[i].solar_area_avg);
      arrDG.push(arrAllObjects[i].dg);
      arrDGavg.push(arrAllObjects[i].dg_area_avg);
      arrMains.push(arrAllObjects[i].main);
      arrMainsavg.push(arrAllObjects[i].consumption_per_sq_feet);
      // arrTotal.push(arrAllObjects[i].total);
      // arrAverage.push(arrAllObjects[i].average);
    }
    console.log("++++++++++++++++++++++++++++++++++++++++++++++++Satcked Bar+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
    console.log(arrSolar);
    console.log(arrDG);
    // console.log(arrHtMeter);
    // console.log(arrAverage);

    let currentChartType = "bar"
    // Added now
    originalChartConfigPowerTop = {
      type: "bar",
      data: {
        labels: Object.keys(resfunPowerConsumptionObject7.response),
        datasets: [


          {
            label: "DG",
            backgroundColor: ["#77216F"],
            data: arrDG,
            borderWidth: 1,
            borderColor: "#77216F",
            stack: "Stack 0",
            order: 2,
          },

          {
            label: "Renewable",
            backgroundColor: ["#FDAB3D"],
            data: arrSolar,
            borderWidth: 1,
            borderColor: "#FDAB3D",
            stack: "Stack 0",
            order: 2,
          },

          {
            label: "Mains",
            backgroundColor: ["#E95420"],
            data: arrMains,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
            order: 2,
          },


          // {
          //   label: "Total",
          //   backgroundColor: ["#f2ad6c"],
          //   data: arrTotal,
          //   borderWidth: 1,
          //   borderColor: "#f2ad6c",
          //   stack: "Stack 0",
          //   order:2,
          // },
          {
            type: "line",
            tension: 0,
            label: "Consumption per sq.ft",
            backgroundColor: ["#730000"],
            data: arrMainsavg,
            borderWidth: 0.4,
            borderColor: "#730000",
            stack: "Stack 1",
            order: 1,
            yAxisID: 'percentage',
          },
          {
            type: "line",
            tension: 0,
            label: "Cost per sq.ft",
            backgroundColor: ["#7be382"],
            data: arrSolaravg,
            borderWidth: 0.4,
            borderColor: "#7be382",
            stack: "Stack 1",
            order: 1,
            // yAxisID:'percentage',
          },
          // {
          //   type: "line",
          //   tension: 0,
          //   label: "DG",
          //   backgroundColor: ["#98c1d9"],
          //   data: arrDGavg,
          //   borderWidth: 0.4,
          //   borderColor:"#98c1d9",
          //   stack: "Stack 1",
          //   order:1,
          //   // yAxisID:'percentage',
          // },
          // {
          //   type: "line",
          //   tension: 0,
          //   label: "Total",
          //   backgroundColor: ["#f2ad6c"],
          //   data: arrAverage,
          //   borderWidth: 0.4,
          //   borderColor:"#f2ad6c",
          //   stack: "Stack 1",
          //   order:1,
          //   // yAxisID:'percentage',
          // },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption kwh'
            },
          },
          percentage: {
            beginAtZero: true,
            position: 'right',
            title: {
              display: true,
              text: 'Per Sq.ft '
            },
          },
        },
        plugins: {
          datalabels: {
            display: false,
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "center",


          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(SitePowerConsumption, originalChartConfigPowerTop)
    let listItemLabelpowerTop = document.getElementById("listItemLabelpowerTop")
    loaderSitePower.style.display = "none";
    SitePowerNoData.style.display = "none";
    SitePowerConsumption.style.display = "block";

    // SitePowerConsumption.onclick = function (event) {
    //   let clickedPowerConsumptionTop = true;
    //   if (clickedPowerConsumptionTop == true) {
    //     const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

    //     if (points.length) {
    //       const firstPoint = points[0];
    //       const label = myChart.data.labels[firstPoint.index];
    //       const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

    //       console.log(`Clicked on ${label} with value ${value}`);

    //       listItemLabelpowerTop.textContent = ` ${label}`;
    //       // console.log(listItemLabelpower);
    //       // document.getElementById("listItemValue").textContent = `Value: ${value}`;

    //       const dropdown = (document.getElementById("dataDropdown_powersite"));
    //       console.log(dropdown);
    //       dropdown.style.display = "block";

    //     }
    //     dataDropdown_powersite.addEventListener("click", function (event) {
    //       const selectedOption = event.target.id;
    //       const firstPoint = points[0];
    //       const label = myChart.data.labels[firstPoint.index];
    //       const labelname = label;
    //       console.log(selectedOption);
    //       if (event.target.id != "closeDropdown") {
    //         if (selectedOption === "Asset_Name" && currentChartType === "bar") {
    //           let xhr_object = new XMLHttpRequest();
    //           xhr_object.open(
    //             "GET",
    //             getPowerDrillTop +
    //             "?site_name=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&site_id=" +
    //             countSiteDrop +
    //             "&society_id=" +
    //             countSocietyDrop +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //             true
    //           );

    //           console.log(
    //             getPowerDrillTop +
    //             "?site_name=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&site_id=" +
    //             countSiteDrop +
    //             "&society_id=" +
    //             countSocietyDrop +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //           );

    //           // downloadPowerConsumLink = ip + "fm-excel-download/get-drill-down-for-powerConsumptionStackedBarGraph/" + idLink +
    //           //   "&drilldown_by=" +
    //           //   selectedOption +
    //           //   "&date=" +
    //           //   labelname +
    //           //   "&from_date=" +
    //           //   globalDateFirst +
    //           //   "&to_date=" +
    //           //   globalDateSecond,


    //           xhr_object.onload = function () {
    //             resPowerDrill = JSON.parse(this.responseText);
    //             console.log("Tickets Drill Down - ");
    //             console.log(resPowerDrill);

    //             const labels = resPowerDrill.res.map(item => item[0]);
    //             const dataValues = resPowerDrill.res.map(item => item[2]);

    //             myChart.destroy();
    //             myChart = new Chart(SitePowerConsumption, {
    //               type: "bar",
    //               data: {
    //                 labels: labels,
    //                 datasets: [{
    //                   label: "Data",
    //                   data: dataValues,
    //                   backgroundColor: ["#e2445b"],
    //                 }]
    //               },
    //               options: {
    //                 responsive: true,
    //                 interaction: {
    //                   intersect: false,
    //                 },
    //                 scales: {
    //                   x: {
    //                     stacked: true,
    //                   },
    //                   y: {
    //                     stacked: true,
    //                   },
    //                 },
    //                 maintainAspectRatio: false,
    //                 scales: {
    //                   x: {
    //                   },
    //                 },
    //                 plugins: {
    //                   datalabels: {
    //                     color: "#000000",
    //                     anchor: "end",
    //                     align: "end",
    //                     offset: -6,
    //                     font: {
    //                       size: "10",
    //                       weight: "bold",
    //                     },
    //                     formatter: function (value, context) {
    //                       // Hide label if value is zero
    //                       return value === 0 ? '' : value;
    //                     }
    //                   },
    //                   legend: {
    //                     display: true,
    //                     position: "no",
    //                   },
    //                 },
    //               },
    //               plugins: [ChartDataLabels],
    //             });

    //             SitePowerConsumption.style.display = "block";
    //           }
    //           dataDropdown_powersite.style.display = "none";

    //           xhr_object.send();
    //           clickedPowerConsumptionTop = false;
    //         }
    //       }
    //       else {

    //         restoreOriginalChartPowerTop();

    //       }


    //     });
    //   } else if (clickedPowerConsumptionTop == false) {
    //     alert("You have reached the maximum drill-down level.");
    //   }


    // };

    infoSiteWisePowerIcon.addEventListener("click", InfoModal);
    let SiteWisePowerDiv = document.getElementById('SiteWisePowerDiv');
    let closeSiteWisePower = document.getElementById('closeSiteWisePower');
    function InfoModal(event) {
      event.stopPropagation();
      SiteWisePowerDiv.style.display = "block";
      if (resfunPowerConsumptionObject7.info) {
        let SiteWisePowerInfo = document.getElementById("SiteWisePowerInfo");
        let SiteWisePowerInfo2 = document.getElementById("SiteWisePowerInfo2");

        SiteWisePowerInfo.innerHTML = "<b>Formula : </b>" + resfunPowerConsumptionObject7.info.formula;
        SiteWisePowerInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject7.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!SiteWisePowerDiv.contains(event.target) && event.target.id !== 'infoSiteWisePowerIcon') {
        closeSiteWisePowerDiv();
      }
    });
    closeSiteWisePower.addEventListener("click", closeSiteWisePowerDiv);
    function closeSiteWisePowerDiv() {
      SiteWisePowerDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    SiteWisePowerDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    function restoreOriginalChartPowerTop() {
      if (originalChartConfigPowerTop) {
        myChart.destroy();
        funPowerConsumptionTop();
        clickedPowerConsumptionTop = true;
      }
    }

    refreshIconElement_powerSite.addEventListener("click", restoreOriginalChartPowerTop);
  };
  xhr_object7.send();

  // ----------------------------------------------
  // evConsumption
  let xhr_object8 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object8.open(
      "GET",
      getEvConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getEvConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object8.open(
      "GET",
      getEvConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getEvConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object8.onload = function () {
    resfunPowerConsumptionObject8 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 8 ev consumption - ");
    console.log(resfunPowerConsumptionObject8);
    if (resfunPowerConsumptionObject8.response == null) {
      evConsumption.innerHTML = "0 KWH";
    } else {
      evConsumption.innerHTML = resfunPowerConsumptionObject8.response + " KWH";
    }
    // infoEVConsumptionIcon,EVConsumptionnDiv,closeEVConsumption,EVConsumptionInfo


    infoEVConsumptionIcon.addEventListener("click", InfoModal);
    let EVConsumptionnDiv = document.getElementById('EVConsumptionnDiv');
    let closeEVConsumption = document.getElementById('closeEVConsumption');
    function InfoModal(event) {
      event.stopPropagation();
      EVConsumptionnDiv.style.display = "block";
      if (resfunPowerConsumptionObject8.info) {
        let EVConsumptionInfo = document.getElementById("EVConsumptionInfo");
        let EVConsumptionInfo2 = document.getElementById("EVConsumptionInfo2");

        EVConsumptionInfo.innerHTML = "<b>Formula :</b> " + resfunPowerConsumptionObject8.info.formula;
        EVConsumptionInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject8.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!EVConsumptionnDiv.contains(event.target) && event.target.id !== 'infoEVConsumptionIcon') {
        closeEVConsumptionDiv();
      }
    });
    closeEVConsumption.addEventListener("click", closeEVConsumptionDiv);
    function closeEVConsumptionDiv() {
      EVConsumptionnDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    EVConsumptionnDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object8.send()
}

function Refresh_TotalConsumption() {
  let pcTotalHtMeterTop = document.getElementById("pcTotalHtMeterTop");
  let loader = document.getElementById("loader_TotalConsumption");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalHtMeterTop.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(
        getMainMeterTotalConsumption + idLink + "&date=" + globalDateFirst
      );
    } else {
      xhr_object1.open(
        "GET",
        getMainMeterTotalConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getMainMeterTotalConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfunPowerConsumptionObject1 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 1 - ");
      console.log(resfunPowerConsumptionObject1);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject1 && parseFloat(resfunPowerConsumptionObject1.response)) {
        pcTotalHtMeterTop.innerHTML =
          resfunPowerConsumptionObject1.response + " EB kVAh"

      } else {
        pcTotalHtMeterTop.innerHTML = "No data available";
        pcTotalHtMeterTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}


function Refresh_EVConsumption() {
  let evConsumption = document.getElementById("evConsumption");
  let loader = document.getElementById("loader_EVConsumption");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    evConsumption.innerHTML = "";

    let xhr_object8 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object8.open(
        "GET",
        getEvConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getEvConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object8.open(
        "GET",
        getEvConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getEvConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object8.onload = function () {
      resfunPowerConsumptionObject8 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 8 ev consumption - ");
      console.log(resfunPowerConsumptionObject8);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject8 && parseFloat(resfunPowerConsumptionObject8.response)) {
        evConsumption.innerHTML = resfunPowerConsumptionObject8.response + " KWH";

      } else {
        evConsumption.innerHTML = "No data available";
        evConsumption.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object8.send();

  }

  fetchData();

}

function Refresh_TotalRenewable() {
  let pcTotalTransformerTop = document.getElementById("pcTotalTransformerTop");
  let loader = document.getElementById("loader_TotalRenewable");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalTransformerTop.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getTransformerTotal + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTransformerTotal + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getTransformerTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTransformerTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunPowerConsumptionObject2 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 2 - ");
      console.log(resfunPowerConsumptionObject2);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject2 && parseFloat(resfunPowerConsumptionObject2.response)) {
        pcTotalTransformerTop.innerHTML =
          resfunPowerConsumptionObject2.response + " kVAh";

      } else {
        pcTotalTransformerTop.innerHTML = "No data available";
        pcTotalTransformerTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}



function Refresh_DGTotal() {
  let pcTotalDgTop = document.getElementById("pcTotalDgTop");
  let loader = document.getElementById("loader_DGTotal");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    pcTotalDgTop.innerHTML = "";
    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getDGTotal + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getDGTotal + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getDGTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getDGTotal +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunPowerConsumptionObject3 = JSON.parse(this.responseText);
      console.log("Power Consumption Object 3 - ");
      console.log(resfunPowerConsumptionObject3);
      // Check if response exists and if it's greater than 0 hours
      if (resfunPowerConsumptionObject3 && parseFloat(resfunPowerConsumptionObject3.response)) {
        pcTotalDgTop.innerHTML = resfunPowerConsumptionObject3.response + " DG kVAh";

      } else {
        pcTotalDgTop.innerHTML = "No data available";
        pcTotalDgTop.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}

function funFitoutOccupancy() {
  let fitoutUnoccupied = document.getElementById("fitoutUnoccupiedFlats");
  let fitoutOccupied = document.getElementById("fitoutOccupiedFlats");

  let ftFitoutFlats = document.getElementById("ftFitoutFlats");


  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      getFitoutOccupiedUnoccupied + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getFitoutOccupiedUnoccupied + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object1.open(
      "GET",
      getFitoutOccupiedUnoccupied +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFitoutOccupiedUnoccupied +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resFunoccupency1 = JSON.parse(this.responseText);
    console.log("fitout occupency ++++++++++++============================================================================1 - ");
    console.log(resFunoccupency1);
    if (resFunoccupency1.response == null) {
      fitoutUnoccupied.innerHTML = "0";
      fitoutOccupied.innerHTML = "0";
    } else {
      fitoutUnoccupied.innerHTML =
        resFunoccupency1.response.unoccupied_count;
      fitoutOccupied.innerHTML = resFunoccupency1.response.occupied_count;

    }

    infoOccupiedUnitsIcon.addEventListener("click", InfoModal);
    let OccupiedUnitsDiv = document.getElementById('OccupiedUnitsDiv');
    let closeOccupiedUnits = document.getElementById('closeOccupiedUnits');
    function InfoModal(event) {
      event.stopPropagation();
      OccupiedUnitsDiv.style.display = "block";
      if (resFunoccupency1.info) {
        let OccupiedUnitsInfo = document.getElementById("OccupiedUnitsInfo");
        let OccupiedUnitsInfo2 = document.getElementById("OccupiedUnitsInfo2");


        OccupiedUnitsInfo.innerHTML = "<b>Formula :</b> " + resFunoccupency1.info.formula;
        OccupiedUnitsInfo2.innerHTML = "<b>Info  : </b>" + resFunoccupency1.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!OccupiedUnitsDiv.contains(event.target) && event.target.id !== 'infoOccupiedUnitsIcon') {
        closeOccupiedUnitsDiv();
      }
    });
    closeOccupiedUnits.addEventListener("click", closeOccupiedUnitsDiv);
    function closeOccupiedUnitsDiv() {
      OccupiedUnitsDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OccupiedUnitsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object1.send();

  // ----------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getFtFitoutFlat + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getFtFitoutFlat + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getFtFitoutFlat +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFtFitoutFlat +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    resfunFtFitout2 = JSON.parse(this.responseText);
    console.log("Ft fitout flat 2 - ");
    console.log(resfunFtFitout2);
    if (resfunFtFitout2.response == null) {
      ftFitoutFlats.innerHTML = "0";
    } else {
      ftFitoutFlats.innerHTML =
        resfunFtFitout2.response + "";
    }

    infoFitoutUnitsIcon.addEventListener("click", InfoModal);
    let FitoutUnitsDiv = document.getElementById('FitoutUnitsDiv');
    let closeFitoutUnits = document.getElementById('closeFitoutUnits');
    function InfoModal(event) {
      event.stopPropagation();
      FitoutUnitsDiv.style.display = "block";
      if (resfunFtFitout2.info) {
        let FitoutUnitsInfo = document.getElementById("FitoutUnitsInfo");
        let FitoutUnitsInfo2 = document.getElementById("FitoutUnitsInfo2");


        FitoutUnitsInfo.innerHTML = "<b>Formula :</b> " + resfunFtFitout2.info.formula;
        FitoutUnitsInfo2.innerHTML = "<b>Info  : </b>" + resfunFtFitout2.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!FitoutUnitsDiv.contains(event.target) && event.target.id !== 'infoFitoutUnitsIcon') {
        closeFitoutUnitssDiv();
      }
    });
    closeFitoutUnits.addEventListener("click", closeFitoutUnitssDiv);
    function closeFitoutUnitssDiv() {
      FitoutUnitsDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FitoutUnitsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object2.send();
}


let clickedWaterConsumption = true;
function funWaterConsumption() {
  let titleWaterConsumption = document.getElementById("titleWaterConsumption");

  let wcTotalConsumption = document.getElementById("wcTotalConsumption");
  let wcTotalDomestic = document.getElementById("wcTotalDomestic");
  let wcFlushingTotal = document.getElementById("wcFlushingTotal");
  let wcTotalIrrigation = document.getElementById("wcTotalIrrigation");
  let wcTotalSTP = document.getElementById("wcTotalSTP");

  let loaderWaterConsumPie = document.getElementById("loaderWaterConsumPie");
  let waterConsumPieNoData = document.getElementById("waterConsumPieNoData");
  let water_consume_pie = document.getElementById("water-consume-pie");
  let wsPie1 = document.getElementById("wsPie1");






  let loaderWaterConsum = document.getElementById("loaderWaterConsum");
  let waterConsumNoData = document.getElementById("waterConsumNoData");
  let water_consumption = document.getElementById("water-consumption");

  // if (globalType == "daily") {
  //   titleWaterConsumption.innerHTML =
  //     "Water Consumption for " + convertDateFormat(globalDateFirst);
  // } else {
  //   titleWaterConsumption.innerHTML =
  //     "Water Consumption for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // ----------------------------------------------

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      getTotalWaterConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTotalWaterConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object1.open(
      "GET",
      getTotalWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resfunWaterConsumptionObject1 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 1 - ");
    console.log(resfunWaterConsumptionObject1);
    if (resfunWaterConsumptionObject1.response == null) {
      wcTotalConsumption.innerHTML = "0 KL";
    } else {
      wcTotalConsumption.innerHTML =
        resfunWaterConsumptionObject1.response + " KL";
    }

    infoTotalConsumptionWaterMainsIcon.addEventListener("click", InfoModal);
    let TotalConsumptionWaterMainsDiv = document.getElementById('TotalConsumptionWaterMainsDiv');
    let closeTotalConsumptionWaterMains = document.getElementById('closeTotalConsumptionWaterMains');
    function InfoModal(event) {
      event.stopPropagation();
      TotalConsumptionWaterMainsDiv.style.display = "block";
      if (resfunWaterConsumptionObject1.info) {
        let TotalConsumptionWaterMainsInfo = document.getElementById("TotalConsumptionWaterMainsInfo");

        TotalConsumptionWaterMainsInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject1.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalConsumptionWaterMainsDiv.contains(event.target) && event.target.id !== 'infoTotalConsumptionWaterMainsIcon') {
        closeTotalConsumptionWaterMainsDiv();
      }
    });
    closeTotalConsumptionWaterMains.addEventListener("click", closeTotalConsumptionWaterMainsDiv);
    function closeTotalConsumptionWaterMainsDiv() {
      TotalConsumptionWaterMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalConsumptionWaterMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object1.send();

  // ----------------------------------------------


  let xhr_object8 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object8.open(
      "GET",
      getTotalSTP + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTotalSTP + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object8.open(
      "GET",
      getTotalSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalSTP +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object8.onload = function () {
    resfunWaterConsumptionObject8 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 8 - ");
    console.log(resfunWaterConsumptionObject8);
    if (resfunWaterConsumptionObject8.response == null) {
      wcTotalSTP.innerHTML = "0 KL";
    } else {
      wcTotalSTP.innerHTML =
        resfunWaterConsumptionObject8.response + " KL";
    }

    infoTotalSTPIcon.addEventListener("click", InfoModal);
    let TotalSTPDiv = document.getElementById('TotalSTPDiv');
    let closeTotalSTP = document.getElementById('closeTotalSTP');
    function InfoModal(event) {
      event.stopPropagation();
      TotalSTPDiv.style.display = "block";
      if (resfunWaterConsumptionObject8.info) {
        let TotalSTPInfo = document.getElementById("TotalSTPInfo");

        TotalSTPInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject8.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalSTPDiv.contains(event.target) && event.target.id !== 'infoTotalSTPIcon') {
        closeTotalSTPDiv();
      }
    });
    closeTotalSTP.addEventListener("click", closeTotalSTPDiv);
    function closeTotalSTPDiv() {
      TotalSTPDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalSTPDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object8.send();


  //---------------------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getWaterConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    resfunWaterConsumptionObject2 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 2 - ");
    console.log(resfunWaterConsumptionObject2);
    if (resfunWaterConsumptionObject2.response["kl"] == null) {
      wcTotalDomestic.innerHTML = "0 KL";
    } else {
      wcTotalDomestic.innerHTML =
        resfunWaterConsumptionObject2.response["kl"] + " KL";
    }


    infoTotalDomesticMainsIcon.addEventListener("click", InfoModal);
    let TotalDomesticMainsDiv = document.getElementById('TotalDomesticMainsDiv');
    let closeTotalDomesticMains = document.getElementById('closeTotalDomesticMains');
    function InfoModal(event) {
      event.stopPropagation();
      TotalDomesticMainsDiv.style.display = "block";
      if (resfunWaterConsumptionObject2.info) {
        let TotalDomesticMainsInfo = document.getElementById("TotalDomesticMainsInfo");

        TotalDomesticMainsInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject2.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalDomesticMainsDiv.contains(event.target) && event.target.id !== 'infoTotalDomesticMainsIcon') {
        closeTotalDomesticMainsDiv();
      }
    });
    closeTotalDomesticMains.addEventListener("click", closeTotalDomesticMainsDiv);
    function closeTotalDomesticMainsDiv() {
      TotalDomesticMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalDomesticMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object2.send();


  // ------------------------------------------------------------------


  let xhr_object3 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object3.open(
      "GET",
      getIrrigation + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIrrigation + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object3.open(
      "GET",
      getIrrigation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIrrigation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object3.onload = function () {
    resfunWaterConsumptionObject3 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 3 - ");
    console.log(resfunWaterConsumptionObject3);

    if (resfunWaterConsumptionObject3.response["kl"] == null) {
      wcTotalIrrigation.innerHTML = "0 KL";
    } else {
      wcTotalIrrigation.innerHTML =
        resfunWaterConsumptionObject3.response["kl"] + " KL";
    }


    infoTotalIrrigationMainsIcon.addEventListener("click", InfoModal3);
    let TotalIrrigationMainsDiv = document.getElementById('TotalIrrigationMainsDiv');
    let closeTotalIrrigationMains = document.getElementById('closeTotalIrrigationMains');
    function InfoModal3(event) {
      event.stopPropagation();
      TotalIrrigationMainsDiv.style.display = "block";
      if (resfunWaterConsumptionObject3.info) {
        let TotalIrrigationMainsInfo = document.getElementById("TotalIrrigationMainsInfo");

        TotalIrrigationMainsInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject3.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalIrrigationMainsDiv.contains(event.target) && event.target.id !== 'infoTotalIrrigationMainsIcon') {
        closeTotalIrrigationMainsDiv();
      }
    });
    closeTotalIrrigationMains.addEventListener("click", closeTotalIrrigationMainsDiv);
    function closeTotalIrrigationMainsDiv() {
      TotalIrrigationMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalIrrigationMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object3.send();

  // ----------------------------------------------

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getFlushing + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getFlushing + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getFlushing +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFlushing +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object.onload = function () {
    resfunWaterConsumptionObject = JSON.parse(this.responseText);
    console.log("Water Consumption Object  - ");
    console.log(resfunWaterConsumptionObject);


    if (resfunWaterConsumptionObject.response["kl"] == null) {
      wcFlushingTotal.innerHTML = "0 KL";
    } else {
      wcFlushingTotal.innerHTML =
        resfunWaterConsumptionObject.response["kl"] + " KL";
    }



    infoFlushingTotalMainsIcon.addEventListener("click", InfoModal2);
    let FlushingTotalMainsDiv = document.getElementById('FlushingTotalMainsDiv');
    let closeFlushingTotalMains = document.getElementById('closeFlushingTotalMains');
    function InfoModal2(event) {
      event.stopPropagation();
      FlushingTotalMainsDiv.style.display = "block";
      if (resfunWaterConsumptionObject.info) {
        let FlushingTotalMainsInfo = document.getElementById("FlushingTotalMainsInfo");

        FlushingTotalMainsInfo.innerHTML = "<b>Info :</b> " + resfunWaterConsumptionObject.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!FlushingTotalMainsDiv.contains(event.target) && event.target.id !== 'infoFlushingTotalMainsIcon') {
        closeFlushingTotalMainsDiv();
      }
    });
    closeFlushingTotalMains.addEventListener("click", closeFlushingTotalMainsDiv);
    function closeFlushingTotalMainsDiv() {
      FlushingTotalMainsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FlushingTotalMainsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object.send();


  // ----------------------------------------------------

  // loaderWaterConsumPie.style.display = "block";
  // waterConsumPieNoData.style.display = "none";

  let xhr_object5 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object5.open(
      "GET",
      getWaterSourcePieChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterSourcePieChart + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object5.open(
      "GET",
      getWaterSourcePieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterSourcePieChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object5.onload = function () {
    resfunWaterConsumptionObject5 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 5 - ");
    console.log(resfunWaterConsumptionObject5);

    let valueChartName = Object.keys(resfunWaterConsumptionObject5.response);
    let valueChartY = Object.values(resfunWaterConsumptionObject5.response);

    console.log(valueChartY);

    let waterPieChartColors = [
      "#F2C06C",
      "#F8EA94",
      "#A1CD7A",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];




    new Chart(water_consume_pie, {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: "Water Resource",
            data: valueChartY,
            backgroundColor: waterPieChartColors,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
            title: {
              display: true,
              text: 'Consumption in %',
            }
          },
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Water Resources',
              padding: {
                top: 40,
              }
            }
          }

        },
        plugins: {


          title: {
            fullSize: true,
            display: true,
            text: '',
            color: 'black',
            align: 'center',
            font: {
              weight: 'bold'
            },
            font: {
              size: 14
            },
            padding: {
              top: 1,
              bottom: 30
            }
          },

          datalabels: {
            color: "#000000",
            font: {
              size: "14",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    let sum = 0;

    for (let i = 0; i < valueChartY.length; i += 1) {
      if (valueChartY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueChartY[i];
      }
    }

    loaderWaterConsumPie.style.display = "none";
    if (sum == 0) {
      waterConsumPieNoData.style.display = "block";
      water_consume_pie.style.display = "none";
    } else {
      waterConsumPieNoData.style.display = "none";
      water_consume_pie.style.display = "block";
    }

    // infoWaterResourcesIcon,WaterResourcesDiv,closeWaterResources,WaterResourcesInfo

    infoWaterResourcesIcon.addEventListener("click", InfoModal);
    let WaterResourcesDiv = document.getElementById('WaterResourcesDiv');
    let closeWaterResources = document.getElementById('closeWaterResources');
    function InfoModal(event) {
      event.stopPropagation();
      WaterResourcesDiv.style.display = "block";
      if (resfunWaterConsumptionObject5.info) {
        let WaterResourcesInfo = document.getElementById("WaterResourcesInfo");

        WaterResourcesInfo.innerHTML = "<b>Info  : </b>" + resfunWaterConsumptionObject5.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!WaterResourcesDiv.contains(event.target) && event.target.id !== 'infoWaterResourcesIcon') {
        closeWaterResourcesDiv();
      }
    });
    closeWaterResources.addEventListener("click", closeWaterResourcesDiv);
    function closeWaterResourcesDiv() {
      WaterResourcesDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    WaterResourcesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };
  xhr_object5.send();



  // --------------------------------------------------------------------------------------------------------

  let loaderWaterConsumLPCD = document.getElementById("loaderWaterConsumLPCD");
  let waterConsumLPCDNoData = document.getElementById("waterConsumLPCDNoData");
  let water_consume_lpcd = document.getElementById("water-consume-lpcd");
  let wsLPCD = document.getElementById("wsLPCD");


  // loaderWaterConsumLPCD.style.display = "block";
  // waterConsumLPCDNoData.style.display = "none";

  let xhr_object7 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object7.open(
      "GET",
      getWaterSourceLPCDChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getWaterSourceLPCDChart + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object7.open(
      "GET",
      getWaterSourceLPCDChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterSourceLPCDChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object7.onload = function () {
    resfunWaterConsumptionObjectLPCD = JSON.parse(this.responseText);
    console.log("Water Consumption Object 5 - ");
    console.log(resfunWaterConsumptionObjectLPCD);

    let valueChartName = Object.keys(resfunWaterConsumptionObjectLPCD.response);
    let valueChartY = Object.values(resfunWaterConsumptionObjectLPCD.response);

    console.log(valueChartY);

    let waterPieChartColors = [
      "#F2C06C",
      "#F8EA94",
      "#A1CD7A",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];




    new Chart(water_consume_lpcd, {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: "Water Consumption",
            data: valueChartY,
            backgroundColor: waterPieChartColors,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            ticks: {
              callback: function (value) {
                return value
              }
            },
            title: {
              display: true,
              text: '',
            }
          },
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Towers',
              padding: {
                top: 40,
              }
            }
          }

        },
        plugins: {


          title: {
            fullSize: true,
            display: true,
            text: '',
            color: 'black',
            align: 'center',
            font: {
              weight: 'bold'
            },
            font: {
              size: 14
            },
            padding: {
              top: 1,
              bottom: 30
            }
          },

          datalabels: {
            color: "#000000",
            font: {
              size: "14",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    let sum = 0;

    for (let i = 0; i < valueChartY.length; i += 1) {
      if (valueChartY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueChartY[i];
      }
    }

    loaderWaterConsumLPCD.style.display = "none";
    if (sum == 0) {
      waterConsumLPCDNoData.style.display = "block";
      water_consume_lpcd.style.display = "none";
    } else {
      waterConsumLPCDNoData.style.display = "none";
      water_consume_lpcd.style.display = "block";
    }
    // infoLPCDIcon ,LPCDDiv ,closeLPCD,LPCDInfo

    infoLPCDIcon.addEventListener("click", InfoModal);
    let LPCDDiv = document.getElementById('LPCDDiv');
    let closeLPCD = document.getElementById('closeLPCD');
    function InfoModal(event) {
      event.stopPropagation();
      LPCDDiv.style.display = "block";
      if (resfunWaterConsumptionObjectLPCD.info) {
        let LPCDInfo = document.getElementById("LPCDInfo");

        LPCDInfo.innerHTML = "<b>Info  : </b>" + resfunWaterConsumptionObjectLPCD.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!LPCDDiv.contains(event.target) && event.target.id !== 'infoLPCDIcon') {
        closeLPCDDiv();
      }
    });
    closeLPCD.addEventListener("click", closeLPCDDiv);
    function closeLPCDDiv() {
      LPCDDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    LPCDDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object7.send();






  // --------------------------------------------------------------------------------------------------------

  // water_consumption.style.display = "block";
  // loaderWaterConsum.style.display = "block";
  // waterConsumNoData.style.display = "none";

  let xhr_object6 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object6.open(
      "GET",
      getWaterConsumptionStackedBarChart + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getWaterConsumptionStackedBarChart + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object6.open(
      "GET",
      getWaterConsumptionStackedBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getWaterConsumptionStackedBarChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object6.onload = function () {
    resfunWaterConsumptionObject6 = JSON.parse(this.responseText);
    console.log("Water Consumption Object 6 - ");
    console.log(resfunWaterConsumptionObject6);
    let arrAllObjects = Object.values(resfunWaterConsumptionObject6.response);
    let arrdomestic_KL = [];
    let arrflushing_KL = [];
    let arrirrigation_KL = [];
    let arrTotal = [];
    let arrAverage = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrdomestic_KL.push(arrAllObjects[i].domestic_KL);
      arrflushing_KL.push(arrAllObjects[i].flushing_KL);
      arrirrigation_KL.push(arrAllObjects[i].irrigation_KL);
      arrTotal.push(arrAllObjects[i].total);
      arrAverage.push(arrAllObjects[i].average);
    }
    let currentChartType = "bar"
    // Added now
    originalChartConfigWater = {
      type: "bar",
      data: {
        labels: Object.keys(resfunWaterConsumptionObject6.response),
        datasets: [
          {
            label: "Domestic KL",
            backgroundColor: ["#E95420"],
            data: arrdomestic_KL,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Flushing KL",
            backgroundColor: ["#77216f"],
            data: arrflushing_KL,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Irrigation KL",
            backgroundColor: ["#f2ad6c"],
            data: arrirrigation_KL,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            type: "line",
            tension: 1,
            label: "Average",
            backgroundColor: ["#16a60c"],
            data: arrAverage,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Date',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            // ticks: {
            //   callback: function (value) {
            //     return value + "%"
            //   }
            // },
            title: {
              display: true,
              text: 'Consumption (KL)'
            }
          }
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value + "%"
              }
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(water_consumption, originalChartConfigWater)
    loaderWaterConsum.style.display = "none";
    waterConsumNoData.style.display = "none";
    water_consumption.style.display = "block";


    if (!funWaterConsumption.initialized) {
      water_consumption.onclick = function (event) {
        let clickedWaterConsumption = true;
        if (clickedWaterConsumption == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);

            document.getElementById("listItemLabelwater").textContent = ` ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            const dropdown = (document.getElementById("dataDropdown_water"));
            dropdown.style.display = "block";

          }
          dataDropdown_water.addEventListener("click", function (event) {
            const selectedOption = event.target.id;
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const labelname = label;
            console.log(selectedOption);
            if (event.target.id != "closeDropdown") {
              if (selectedOption === "Asset_Name" && currentChartType === "bar") {
                let xhr_object = new XMLHttpRequest();
                xhr_object.open(
                  "GET",
                  getWaterDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&date=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                  true
                );

                console.log(
                  getWaterDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&date=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                );

                downloadWaterConsumBarLink = ip + "fm-excel-download/get-drill-down-for-waterConsumptionStackedBarGraph/" + idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&date=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    resWaterDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down - ");
                    console.log(resWaterDrill);

                    const labels = resWaterDrill.response.map(item => item[0]);
                    const dataValues = Array.from({ length: labels.length }, () => Math.floor(Math.random() * 100));

                    myChart.destroy();
                    myChart = new Chart(water_consumption, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: dataValues,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                    clickedWaterConsumption = false;
                  }

                xhr_object.send();
              }
            }
            else {

              restoreOriginalChartTicket();

            }

            dataDropdown_water.style.display = "none";
          });
        } else if (clickedWaterConsumption == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }

    function restoreOriginalChartTicket() {
      if (originalChartConfigWater) {
        myChart.destroy(); // Destroy the current chart
        let myChart = new Chart(water_consumption, originalChartConfigWater)
        clickedWaterConsumption = true;
      }
    }

    refreshIconElement_water.addEventListener("click", restoreOriginalChartTicket);
  };
  xhr_object6.send();


}

function Refresh_wcTotalConsumption() {
  let wcTotalConsumption = document.getElementById("wcTotalConsumption");
  let loader = document.getElementById("loader_wcTotalConsumption");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalConsumption.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        getTotalWaterConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTotalWaterConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object1.open(
        "GET",
        getTotalWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTotalWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfunWaterConsumptionObject1 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 1 - ");
      console.log(resfunWaterConsumptionObject1);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject1 && parseFloat(resfunWaterConsumptionObject1.response)) {
        wcTotalConsumption.innerHTML = resfunWaterConsumptionObject1.response + "0 KL";

      } else {
        wcTotalConsumption.innerHTML = "No data available";
        wcTotalConsumption.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}

function Refresh_wcTotalDomestic() {
  let wcTotalDomestic = document.getElementById("wcTotalDomestic");
  let loader = document.getElementById("loader_wcTotalDomestic");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalDomestic.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getWaterConsumption + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getWaterConsumption + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getWaterConsumption +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunWaterConsumptionObject2 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 2 - ");
      console.log(resfunWaterConsumptionObject2);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject2 && parseFloat(resfunWaterConsumptionObject2.response)) {
        wcTotalDomestic.innerHTML =
          resfunWaterConsumptionObject2.response["kl"] + " KL";
      } else {
        wcTotalDomestic.innerHTML = "No data available";
        wcTotalDomestic.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}

function Refresh_wcFlushingTotal() {
  let wcFlushingTotal = document.getElementById("wcFlushingTotal");
  let loader = document.getElementById("loader_wcFlushingTotal");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcFlushingTotal.innerHTML = "";

    let xhr_object = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getFlushing + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getFlushing + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getFlushing +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getFlushing +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      resfunWaterConsumptionObject = JSON.parse(this.responseText);
      console.log("Water Consumption Object  - ");
      console.log(resfunWaterConsumptionObject);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject && parseFloat(resfunWaterConsumptionObject.response)) {
        wcFlushingTotal.innerHTML =
          resfunWaterConsumptionObject.response["kl"] + " KL";
      } else {
        wcFlushingTotal.innerHTML = "No data available";
        wcFlushingTotal.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();

  }

  fetchData();

}


function Refresh_wcTotalIrrigation() {
  let wcTotalIrrigation = document.getElementById("wcTotalIrrigation");
  let loader = document.getElementById("loader_wcTotalIrrigation");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalIrrigation.innerHTML = "";

    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getIrrigation + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getIrrigation + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getIrrigation +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getIrrigation +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunWaterConsumptionObject3 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 3 - ");
      console.log(resfunWaterConsumptionObject3);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject3 && parseFloat(resfunWaterConsumptionObject3.response)) {
        wcTotalIrrigation.innerHTML =
          resfunWaterConsumptionObject3.response["kl"] + " KL";
      } else {
        wcTotalIrrigation.innerHTML = "No data available";
        wcTotalIrrigation.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}


function Refresh_wcTotalSTP() {
  let wcTotalSTP = document.getElementById("wcTotalSTP");
  let loader = document.getElementById("loader_wcTotalSTP");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    wcTotalSTP.innerHTML = "";

    let xhr_object8 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object8.open(
        "GET",
        getTotalSTP + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTotalSTP + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object8.open(
        "GET",
        getTotalSTP +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTotalSTP +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object8.onload = function () {
      resfunWaterConsumptionObject8 = JSON.parse(this.responseText);
      console.log("Water Consumption Object 8 - ");
      console.log(resfunWaterConsumptionObject8);
      // Check if response exists and if it's greater than 0 hours
      if (resfunWaterConsumptionObject8 && parseFloat(resfunWaterConsumptionObject8.response)) {
        wcTotalIrrigation.innerHTML =
          wcTotalSTP.innerHTML = "0 KL";
      } else {
        wcTotalSTP.innerHTML = "No data available";
        wcTotalSTP.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object8.send();

  }

  fetchData();

}




let clickedFootfall = true;
function funFootfall() {
  let footfallNoData = document.getElementById("footfallNoData");
  // let footfall_bar = document.getElementById("footfall_bar ");
  // let loaderFootfall = document.getElementById("loaderFootfall");

  // loaderFootfall.style.display = "block";
  // footfallNoData.style.display = "none";
  // footfall_bar.style.display = "block";

  // let eff1 = document.getElementById("eff1");
  // eff1.innerHTML = " Events Footfall Analysis ";

  console.log("Footfall - --===============");
  console.log(getFootfall + idLink
    + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond);
  let xhr_object = new XMLHttpRequest();

  xhr_object.open("GET",
    getFootfall + idLink
    + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, true);
  // console.log(getFootfall + "&date=" + globalDateFirst);

  xhr_object.onload = function () {
    resfunFootfall = JSON.parse(this.responseText);

    console.log("Footfall - ");
    console.log(resfunFootfall);
    console.log(Object.keys(resfunFootfall.response));
    console.log(Object.values(resfunFootfall.response));
    originalChartConfigFootfall = {
      type: "bar",
      data: {
        labels: Object.keys(resfunFootfall.response),
        datasets: [
          {
            label: "Footfall",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunFootfall.response),
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: false,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(footfall_bar, originalChartConfigFootfall)

    // loaderFootfall.style.display = "none";
    // footfall_bar.style.display = "block";

    // let sum = 0;
    // let resValues = Object.values(resfunFootfall.response);

    // for (let i = 0; i < resValues.length; i += 1) {
    //   sum = resValues[i] + sum;
    // }

    // loaderFootfall.style.display = "none";
    // footfall_bar.style.display = "block";
    if (Object.keys(resfunFootfall.response).length == 0) {
      footfallNoData.style.display = "block";
      footfall_bar.style.display = "none";
    } else {
      footfallNoData.style.display = "none";
      footfall_bar.style.display = "block";
    }

    // infoFootfallAnalysisIcon,FootfallAnalysisDiv,closeFootfallAnalysis,FootfallAnalysisInfo
    infoFootfallAnalysisIcon.addEventListener("click", InfoModal);
    let FootfallAnalysisDiv = document.getElementById('FootfallAnalysisDiv');
    let closeFootfallAnalysis = document.getElementById('closeFootfallAnalysis');

    function InfoModal(event) {
      event.stopPropagation();
      FootfallAnalysisDiv.style.display = "block";
      if (resfunFootfall.info) {
        let FootfallAnalysisInfo = document.getElementById("FootfallAnalysisInfo");

        FootfallAnalysisInfo.innerHTML = "<b>Info :</b> " + resfunFootfall.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!FootfallAnalysisDiv.contains(event.target) && event.target.id !== 'infoFootfallAnalysisIcon') {
        closeFootfallAnalysisDiv();
      }
    });

    closeFootfallAnalysis.addEventListener("click", closeFootfallAnalysisDiv);

    function closeFootfallAnalysisDiv() {
      FootfallAnalysisDiv.style.display = "none";
    }

    FootfallAnalysisDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let FootfalldrillDownLevel = 1;
    let clickedFootfall = true;
    if (!funFootfall.initialized) {
      footfall_bar.onclick = function (event) {


        if (clickedFootfall == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelFootFall").textContent = `Ticket: ${label}`;
            console.log(backgroundColors);
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown_footfall"));
            dropdown.style.display = "block";


          }


          dataDropdown_footfall.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (FootfalldrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                label = myChart.data.labels[firstPoint.index];
                labelname = label;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);




                document.getElementById("firstDrillDownFootfall").style.display = "block";
                document.getElementById("firstDrillDownFootfall").textContent = ` - ${selectedOption}`


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getFootFallDrillSecond +
                  idLink +
                  "&date=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);

                downloadEventsFootfallAnalysisLink = ip + "fm-excel-download/get-drill-down-for-footfall-analysis/" + idLink +
                  "&date=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resFootFallDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -1 ");
                  console.log(resFootFallDrill);

                  const labels = resFootFallDrill.response.map(item => item[0]);
                  const dataValues = resFootFallDrill.response.map(item => item[1]);

                  myChart.destroy();
                  myChart = new Chart(footfall_bar, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Data Values',
                        data: dataValues,
                        backgroundColor: [
                          "#77216F",
                          "#01C875",
                          "#E2445B",
                          "#E95420",
                          "#A1CD7A",
                        ],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }
                xhr_object.send();

                FootfalldrillDownLevel = 2;
              }
              else if (FootfalldrillDownLevel === 2) {
                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownFootfall").style.display = "none";
                document.getElementById("secondDrilldownFootfall").style.display = "block";
                document.getElementById("secondDrilldownFootfall").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getFootFallDrillSecond +
                  idLink +
                  "&date=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadEventsFootfallAnalysisLink = ip + "fm-excel-download/get-drill-down-for-footfall-analysis/" + idLink +
                  "&date=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resFootFallDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down -2 ");
                  console.log(resFootFallDrill);

                  const labels = resFootFallDrill.response.map(item => item[0]);
                  const dataValues = resFootFallDrill.response.map(item => item[1]);

                  myChart.destroy();
                  myChart = new Chart(footfall_bar, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Data Values',
                        data: dataValues,
                        backgroundColor: [
                          "#77216F",
                          "#01C875",
                          "#E2445B",
                          "#E95420",
                          "#A1CD7A",
                        ],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }
                xhr_object.send();
                FootfalldrillDownLevel = 3;
                dataDropdown_footfall.style.display = "none";
                clickedFootfall = false;
                return;
              }
            }
            else {
              if (FootfalldrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }


            dataDropdown_footfall.style.display = "none";
          });
        } else if (clickedFootfall == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }

    function restoreOriginalChart() {
      if (originalChartConfigFootfall) {
        myChart.destroy();
        funFootfall();
        clickedFootfall = true;
        document.getElementById("firstDrillDownFootfall").style.display = "none";
        document.getElementById("secondDrilldownFootfall").style.display = "none";
      }
    }

    refreshIconElement_footfall.addEventListener("click", restoreOriginalChart);
  };
  xhr_object.send();
}

function funCarbonEmissionScope1() {
  let cEScope1 = document.getElementById("cEScope1");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCarbonEmissionScope1 + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getCarbonEmissionScope1 + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getCarbonEmissionScope1 +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getCarbonEmissionScope1 +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunCarbonEmissionScope1 = JSON.parse(this.responseText);
    console.log("Carbon Emmision Scope 1 - ");
    console.log(resfunCarbonEmissionScope1);
    cEScope1.innerHTML = resfunCarbonEmissionScope1.response + " kg CO2";
  };
  xhr_object.send();
}

// function funCarbonEmissionScope2() {
//   let cEScope2 = document.getElementById("cEScope2");

//   cEScope2.innerHTML = "0" + " kg CO2";
// }

function funCarbonEmissionScope2() {
  let cEScope2 = document.getElementById("cEScope2");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCarbonEmissionScope2 + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getCarbonEmissionScope2 + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getCarbonEmissionScope2 +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getCarbonEmissionScope2 +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunCarbonEmissionScope2 = JSON.parse(this.responseText);
    console.log("Carbon Emmision Scope 1 - ");
    console.log(resfunCarbonEmissionScope2);
    cEScope2.innerHTML = resfunCarbonEmissionScope2.response + " kg CO2";
  };
  xhr_object.send();
}


function Refresh_a27Emission1() {
  let cEScope1 = document.getElementById("cEScope1");
  let loader = document.getElementById("loader_a27Emission1");


  function fetchData() {
    loader.style.display = "block"; // Show loader
    cEScope1.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getCarbonEmissionScope1 + idLink + "&date=" + globalDateFirst,
        true
      );
    } else {
      xhr_object2.open(
        "GET",
        getCarbonEmissionScope1 +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
    }


    xhr_object2.onload = function () {
      let resfunCarbonEmissionScope1 = JSON.parse(xhr_object2.responseText);
      console.log("Carbon Emmision Scope 1 - ");
      console.log(resfunCarbonEmissionScope1);

      // Check if response exists and if it's greater than 0 hours
      if (resfunCarbonEmissionScope1.response && parseFloat(resfunCarbonEmissionScope1.response) > 0) {
        cEScope1.innerHTML = resfunCarbonEmissionScope1.response + " kg CO2";
      } else {
        cEScope1.innerHTML = "No data available";
        cEScope1.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();


  }

  fetchData();

}



function Refresh_a27Emission2() {
  let cEScope2 = document.getElementById("cEScope2");
  let loader = document.getElementById("loader_a27Emission2");


  function fetchData() {
    loader.style.display = "block"; // Show loader
    cEScope2.innerHTML = "";

    let xhr_object = new XMLHttpRequest();

    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getCarbonEmissionScope2 + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getCarbonEmissionScope2 + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getCarbonEmissionScope2 +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getCarbonEmissionScope2 +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }


    xhr_object.onload = function () {
      let resfunCarbonEmissionScope2 = JSON.parse(xhr_object.responseText);
      console.log("Carbon Emmision Scope 1 - ");
      console.log(resfunCarbonEmissionScope2);

      // Check if response exists and if it's greater than 0 hours
      if (resfunCarbonEmissionScope2.response && parseFloat(resfunCarbonEmissionScope2.response) > 0) {
        cEScope2.innerHTML = resfunCarbonEmissionScope2.response + " kg CO2";
      } else {
        cEScope2.innerHTML = "No data available";
        cEScope2.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();


  }

  fetchData();

}


function funEnergyIntensity() {
  let energyIntensity = document.getElementById("energyIntensity");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getEnergyIntensity + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getEnergyIntensity + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getEnergyIntensity +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getEnergyIntensity +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resgetEnergyIntensity = JSON.parse(this.responseText);
    console.log("Carbon Emmision Scope 1 - ");
    console.log(resgetEnergyIntensity);
    energyIntensity.innerHTML = resgetEnergyIntensity.response;
  };

  // infoEnergyIntensityIcon,EnergyIntensityDiv,closeEnergyIntensity,EnergyIntensityInfo
  let infoEnergyIntensityIcon = document.getElementById('infoEnergyIntensityIcon');
  if (infoEnergyIntensityIcon) {
    infoEnergyIntensityIcon.addEventListener("click", InfoModal);
  }

  let EnergyIntensityDiv = document.getElementById('EnergyIntensityDiv');
  let closeEnergyIntensity = document.getElementById('closeEnergyIntensity');

  function InfoModal(event) {
    event.stopPropagation();
    EnergyIntensityDiv.style.display = "block";
    if (resgetEnergyIntensity.info) {
      let EnergyIntensityInfo = document.getElementById("EnergyIntensityInfo");
      let EnergyIntensityInfo2 = document.getElementById("EnergyIntensityInfo2");
      let EnergyIntensityInfo3 = document.getElementById("EnergyIntensityInfo3");
      let EnergyIntensityInfo4 = document.getElementById("EnergyIntensityInfo4");

      EnergyIntensityInfo.innerHTML = "<b>Formula :</b> " + resgetEnergyIntensity.info.formula;
      EnergyIntensityInfo2.innerHTML = "<b>Total Power :</b> " + resgetEnergyIntensity.info.total_power;
      EnergyIntensityInfo3.innerHTML = "<b>Factor :</b> " + resgetEnergyIntensity.info.factor;
      EnergyIntensityInfo4.innerHTML = "<b>Area :</b> " + resgetEnergyIntensity.info.area;
    } else {
      console.error("Formula not found in response info.");
    }
  }

  document.addEventListener("click", function (event) {
    const EnergyIntensityDiv = document.getElementById("EnergyIntensityDiv"); // Update based on your element's ID
    if (EnergyIntensityDiv && !EnergyIntensityDiv.contains(event.target) && event.target.id !== 'infoEnergyIntensityIcon') {
      closeEnergyIntensityDiv();
    }
  });

  if (closeEnergyIntensity) {
    closeEnergyIntensity.addEventListener("click", closeEnergyIntensityDiv);
  }


  function closeEnergyIntensityDiv() {
    EnergyIntensityDiv.style.display = "none";
  }
  if (EnergyIntensityDiv) {
    EnergyIntensityDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  }

  xhr_object.send();
}


function Refresh_a63() {
  let energyIntensity = document.getElementById("energyIntensity");
  let loader = document.getElementById("loader_a63");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    energyIntensity.innerHTML = ""; // Clear the content while loading

    let xhr_object = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getEnergyIntensity + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getEnergyIntensity + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getEnergyIntensity +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getEnergyIntensity +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      resgetEnergyIntensity = JSON.parse(this.responseText);

      // Update HTML elements with values from the response
      energyIntensity.innerHTML = resgetEnergyIntensity.response;

      loader.style.display = "none"; // Hide loader
    };

    xhr_object.onerror = function () {
      console.error('Error fetching data');
      loader.style.display = 'none'; // Hide loader on error
      energyIntensity.innerHTML = "No data available"; // Show "No data available" message on error
    };

    xhr_object.send();
  }

  // Initial data fetch
  fetchData();

  // Function to handle refresh button click
  function handleRefresh() {
    fetchData(); // Refresh the data
  }

  document.getElementById("refreshButton").addEventListener("click", handleRefresh);
}



function funFuelConsumption() {
  let fuelConsmVal = document.getElementById("fuelConsmVal");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getFuelConsumption + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getFuelConsumption + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getFuelConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFuelConsumption +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunFuelConsumption = JSON.parse(this.responseText);
    console.log("Fuel Consumption - ");
    console.log(resfunFuelConsumption);
    fuelConsmVal.innerHTML = resfunFuelConsumption.response + " liters";
  };
  xhr_object.send();
}

function funFitOutRequest() {
  let fitOutVal = document.getElementById("fitOutVal");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getFitoutCount + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getFitoutCount + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getFitoutCount +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getFitoutCount +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunFitOutRequest = JSON.parse(this.responseText);
    console.log("Fit Out Request - ");
    console.log(resfunFitOutRequest);
    fitOutVal.innerHTML = resfunFitOutRequest.response + "";
  };
  xhr_object.send();
}

let clickedIncidents = true;
function funIncidents() {
  let incidentsOpen = document.getElementById("fitOutVal");
  let incidentsInProgress = document.getElementById("fitOutVal");
  let incidentsPending = document.getElementById("fitOutVal");
  let incidentsClosed = document.getElementById("fitOutVal");

  let loaderIncident = document.getElementById("loaderIncident");
  let incidentNoData = document.getElementById("incidentNoData");
  let incident_dount = document.getElementById("incident-dount");

  // loaderIncident.style.display = "block";
  // incidentNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidents + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIncidents + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getIncidents +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIncidents +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunIncidents = JSON.parse(this.responseText);
    console.log("Incidents - ");
    console.log(resfunIncidents);
    let sum =
      resfunIncidents.response["Open"] + resfunIncidents.response["Closed"];

    originalChartConfigIncident = {
      type: "doughnut",
      data: {
        labels: ["Open", "Closed"],
        datasets: [
          {
            label: "Delivered Amount",
            data: [
              resfunIncidents.response["Open"],

              resfunIncidents.response["Closed"],
            ],
            backgroundColor: ["#77216f", "#a1cd7a"],
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(incident_dount, originalChartConfigIncident)

    loaderIncident.style.display = "none";
    if (sum == 0) {
      incidentNoData.style.display = "block";
      incident_dount.style.display = "none";
    } else {
      incidentNoData.style.display = "none";
      incident_dount.style.display = "block";
    }

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let IncidentdrillDownLevel = 1;
    let clickedIncidents = true;

    if (!funIncidents.initialized) {
      incident_dount.onclick = function (event) {

        if (clickedIncidents == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            // console.log(`Clicked on ${label} with value ${firstPoint.value}`);
            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelIncident").textContent = `Ticket: ${label}`;
            const dropdown = document.getElementById("dataDropdown_incident");
            dropdown.style.display = "block";



            dataDropdown_incident.addEventListener("click", function (event) {
              if (event.target.id != "closeDropdown") {
                if (IncidentdrillDownLevel === 1) {
                  selectedOption = event.target.id;
                  firstPoint = points[0];
                  labelname = myChart.data.labels[firstPoint.index];
                  backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                  console.log(selectedOption);

                  let xhr_object = new XMLHttpRequest();
                  // First-level drill-down API
                  apiURL = getSecondLevelDrillDownIncident +
                    idLink +
                    "&status=" +
                    labelname +
                    "&first_drilldown_by=" +
                    selectedOption +
                    "&sec_drill_down_on=" +
                    "" +
                    "&sec_drilldown_by=" +
                    "" +
                    "&from_date=" +
                    globalDateFirst +
                    "&to_date=" +
                    globalDateSecond;

                  console.log(apiURL);

                  xhr_object.open("GET", apiURL, true);

                  downloadIncidentsLink = ip + "fm-excel-download/get-drill-down-for-card-incidentChart-excel-data/" + idLink +
                    "&status=" +
                    labelname +
                    "&first_drilldown_by=" +
                    selectedOption +
                    "&sec_drilldown_by=" +
                    "" +
                    "&sec_drill_down_on=" +
                    "" +
                    "&from_date=" +
                    globalDateFirst +
                    "&to_date=" +
                    globalDateSecond;

                  xhr_object.onload = function () {
                    const resIncidentDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down second-------------------- - ");
                    console.log(resIncidentDrill);

                    const labels = resIncidentDrill.response.map(item => item[0]);
                    const data = resIncidentDrill.response.map(item => item[2]);

                    myChart.destroy();
                    myChart = new Chart(incident_dount, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: backgroundColors
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {},
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  };

                  xhr_object.send();

                  IncidentdrillDownLevel = 2;


                }
                else if (IncidentdrillDownLevel === 2) {
                  // Second-level drill-down API
                  // alert(selectedOption);
                  // alert(labelname);
                  // alert(selectedlabelValue);
                  const firstPoint = points[0];
                  const selectedSecondOption = event.target.id;
                  const labelSecond = myChart.data.labels[firstPoint.index];
                  const labelnameSecond = labelSecond;
                  backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                  console.log(selectedSecondOption);
                  console.log(selectedlabelValue);

                  apiURL = getSecondLevelDrillDownIncident +
                    idLink +
                    "&status=" +
                    labelname +
                    "&first_drilldown_by=" +
                    selectedOption +
                    "&sec_drill_down_on=" +
                    selectedlabelValue +
                    "&sec_drilldown_by=" +
                    selectedSecondOption +
                    "&from_date=" +
                    globalDateFirst +
                    "&to_date=" +
                    globalDateSecond;
                  // alert("second drill down api");

                  // Reset flag after second-level drill-down
                  // secondLevelActive = false;

                  console.log(apiURL);

                  xhr_object.open("GET", apiURL, true);

                  downloadIncidentsLink = ip + "fm-excel-download/get-drill-down-for-card-incidentChart-excel-data/" + idLink +
                    "&status=" +
                    labelname +
                    "&first_drilldown_by=" +
                    selectedOption +
                    "&sec_drilldown_by=" +
                    selectedSecondOption +
                    "&sec_drill_down_on=" +
                    selectedlabelValue +
                    "&from_date=" +
                    globalDateFirst +
                    "&to_date=" +
                    globalDateSecond;

                  xhr_object.onload = function () {
                    const resIncidentDrill = JSON.parse(this.responseText);
                    console.log("Tickets Drill Down second-------------------- - ");
                    console.log(resIncidentDrill);

                    const labels = resIncidentDrill.response.map(item => item[0]);
                    const data = resIncidentDrill.response.map(item => item[2]);

                    myChart.destroy();
                    myChart = new Chart(incident_dount, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "Data",
                          data: data,
                          backgroundColor: "#77216f",
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        scales: {
                          x: {},
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  };

                  xhr_object.send();
                  IncidentdrillDownLevel = 3;
                  return;

                }
              }
              else {
                if (IncidentdrillDownLevel === 1) {
                  restoreOriginalChartTicket();
                }
              }


              dataDropdown_incident.style.display = "none";
            });
          }
        } else if (clickedIncidents == false) {
          alert("You have reached the maximum drill-down level.");
        }
      };
    }

    function restoreOriginalChartTicket() {
      if (originalChartConfigIncident) {
        myChart.destroy(); // Destroy the current chart
        funIncidents();
        clickedIncidents = true;
      }
    }

    refreshIconElement_incident.addEventListener("click", restoreOriginalChartTicket);

  };
  xhr_object.send();
}




function funIncidentsTop() {
  let incidentsOpen = document.getElementById("fitOutVal");
  let incidentsInProgress = document.getElementById("fitOutVal");
  let incidentsPending = document.getElementById("fitOutVal");
  let incidentsClosed = document.getElementById("fitOutVal");

  let loaderIncidentTop = document.getElementById("loaderIncidentTop");
  let incidentNoDataTop = document.getElementById("incidentNoDataTop");
  let incident_dountTop = document.getElementById("incident-dountTop");

  // loaderIncidentTop.style.display = "block";
  // incidentNoDataTop.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIncidentsTop + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getIncidentsTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIncidentsTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunIncidentsTop = JSON.parse(this.responseText);
    console.log("Incidents - ");
    console.log(resfunIncidentsTop);

    // incidentsOpen.innerHTML = resfunIncidents.response["Open"];
    // incidentsInProgress.innerHTML = resfunIncidents.response["In Progress"];
    // incidentsPending.innerHTML = resfunIncidents.response["Pending"];
    // incidentsClosed.innerHTML = resfunIncidents.response["Closed"];

    let sum =
      resfunIncidentsTop.response["Open"] + resfunIncidentsTop.response["Closed"] + resfunIncidentsTop.response["Resolved"] + resfunIncidentsTop.response["Under Investigation"];
    const centerTextNew = {
      id: 'centerTextNew',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + sum, width / 2, height / 2);
      }
    }
    let myChart
    myChart = new Chart(incident_dountTop, {
      type: "doughnut",
      data: {
        labels: ["Open", "Closed", "Resolved", "Under Investigation"],
        datasets: [
          {
            label: "Delivered Amount",
            data: [
              resfunIncidentsTop.response["Open"],

              resfunIncidentsTop.response["Closed"],
              resfunIncidentsTop.response["Resolved"],
              resfunIncidentsTop.response["Under Investigation"],
            ],
            backgroundColor: ["#77216f", "#a1cd7a", "#01C875", "#E95420"],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            display: false,
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },


        }
      },
      plugins: [ChartDataLabels, centerTextNew],
    });

    loaderIncidentTop.style.display = "none";
    if (sum == 0) {
      incidentNoDataTop.style.display = "block";
      incident_dountTop.style.display = "none";
    } else {
      incidentNoDataTop.style.display = "none";
      incident_dountTop.style.display = "block";
    }
    // refreshIconElementIncidents

    infoIncidentsIconTop.addEventListener("click", InfoModal);
    let IncidentsDivTop = document.getElementById('IncidentsDivTop');
    let closeIncidentsTop = document.getElementById('closeIncidentsTop');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentsDivTop.style.display = "block";
      if (resfunIncidentsTop.info) {
        let IncidentsInfoTop = document.getElementById("IncidentsInfoTop");
        let IncidentsInfoTop2 = document.getElementById("IncidentsInfoTop2");

        IncidentsInfoTop.innerHTML = "<b>Formula :</b> " + resfunIncidentsTop.info.formula;
        IncidentsInfoTop2.innerHTML = "<b>Info :</b> " + resfunIncidentsTop.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentsDivTop.contains(event.target) && event.target.id !== 'infoIncidentsIconTop') {
        closeIncidentsDivtop();
      }
    });

    closeIncidentsTop.addEventListener("click", closeIncidentsDivtop);

    function closeIncidentsDivtop() {
      IncidentsDivTop.style.display = "none";
    }

    IncidentsDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    function restoreOriginal() {
      if (incident_dountTop) {
        myChart.destroy();
        funIncidentsTop()
      }
    }

    refreshIconElementIncidentsTop.addEventListener("click", restoreOriginal);

  };
  xhr_object.send();
}

let clickedIncidentsCategory = true;

function funIncidentsCategory() {
  let incidentsCatMechanical = document.getElementById(
    "incidentsCatMechanical"
  );
  let incidentsCatEngineering = document.getElementById(
    "incidentsCatEngineering"
  );
  let incidentsCatHealthSafety = document.getElementById(
    "incidentsCatHealthSafety"
  );
  let incidentsCatOther = document.getElementById("incidentsCatOther");

  let loaderIncidentCategory = document.getElementById(
    "loaderIncidentCategory"
  );
  let incidentCategoryNoData = document.getElementById(
    "incidentCategoryNoData"
  );
  let incident_category_pie = document.getElementById("incident-category-pie");

  // loaderIncidentCategory.style.display = "block";
  // incidentCategoryNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsCategory + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIncidentsCategory + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getIncidentsCategory +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIncidentsCategory +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object.onload = function () {
    resfunIncidentsCategory = JSON.parse(this.responseText);

    console.log("Incident Category - ");
    console.log(resfunIncidentsCategory.response);

    let xValues = [], yValues = [];

    xValues = Object.keys(resfunIncidentsCategory.response);
    yValues = Object.values(resfunIncidentsCategory.response);

    let incidentCategoryPieColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];

    originalChartConfigIncidentCategory = {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [
          {
            label: "Share",
            data: yValues,
            backgroundColor: incidentCategoryPieColors,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(incident_category_pie, originalChartConfigIncidentCategory)

    loaderIncidentCategory.style.display = "none";
    incidentCategoryNoData.style.display = "none";
    incident_category_pie.style.display = "block";

    // if (!funIncidentsCategory.initialized) {
    //   incident_category_pie.onclick = function (event) {

    //     if (clickedIncidentsCategory == true) {
    //       const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

    //       if (points.length) {
    //         const firstPoint = points[0];
    //         const label = myChart.data.labels[firstPoint.index];
    //         const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];


    //         console.log(`Clicked on ${label} with value ${value}`);

    //         document.getElementById("listItemLabelIncidentCategory").textContent = `Ticket: ${label}`;
    //         const backgroundColor = myChart.data.datasets[0].backgroundColor[firstPoint.index];




    //         myChart.update();

    //         console.log(backgroundColor);
    //         // document.getElementById("listItemValue").textContent = `Value: ${value}`;

    //         const dropdown = (document.getElementById("dataDropdown_incidentcategory"));
    //         dropdown.style.display = "none";

    //       }
    //       dataDropdown_incidentcategory.addEventListener("click", function (event) {
    //         const selectedOption = event.target.id;
    //         const firstPoint = points[0];
    //         const label = myChart.data.labels[firstPoint.index];
    //         const labelname = label;
    //         const backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
    //         console.log(selectedOption);


    //         if (selectedOption === "Tower" || "Primary_Category" || "Secondary_Category" || "Created_Date" || "Level_Wise" || "Reported_By'" && currentChartType === "pie") {
    //           let xhr_object = new XMLHttpRequest();
    //           xhr_object.open(
    //             "GET",
    //             getIncidentCategoryDrill +
    //             idLink +
    //             "&category=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //             true
    //           );

    //           console.log(
    //             getIncidentCategoryDrill +
    //             idLink +
    //             "&category=" +
    //             labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,
    //           );

    //           downloadCategoryWiseIncidentsLink = ip + "fm-excel-download/get-drill-down-for-card-incidentCategoryChart-excel-data/" + idLink +
    //           "&category=" +
    //           labelname +
    //             "&drilldown_by=" +
    //             selectedOption +
    //             "&from_date=" +
    //             globalDateFirst +
    //             "&to_date=" +
    //             globalDateSecond,


    //             xhr_object.onload = function () {
    //               resIncidentCategoryDrill = JSON.parse(this.responseText);
    //               console.log("Tickets Drill Down - ");
    //               console.log(resIncidentCategoryDrill);

    //               const labels = resIncidentCategoryDrill.response.map(item => item[1]);
    //               const data = resIncidentCategoryDrill.response.map(item => item[0]);


    //               myChart.destroy();
    //               myChart = new Chart(incident_category_pie, {
    //                 type: "bar",
    //                 data: {
    //                   labels: labels,
    //                   datasets: [{
    //                     label: "Data",
    //                     data: data,
    //                     backgroundColor: backgroundColors,
    //                   }]
    //                 },
    //                 options: {
    //                   responsive: true,
    //                   interaction: {
    //                     intersect: false,
    //                   },
    //                   scales: {
    //                     x: {
    //                       stacked: true,
    //                     },
    //                     y: {
    //                       stacked: true,
    //                     },
    //                   },
    //                   maintainAspectRatio: false,
    //                   scales: {
    //                     x: {
    //                     },
    //                   },
    //                   plugins: {
    //                     datalabels: {
    //                       color: "#000000",
    //                       anchor: "end",
    //                       align: "end",
    //                       offset: -6,
    //                       font: {
    //                         size: "10",
    //                         weight: "bold",
    //                       },
    //                       formatter: function (value, context) {
    //                         // Hide label if value is zero
    //                         return value === 0 ? '' : value;
    //                       }
    //                     },
    //                     legend: {
    //                       display: true,
    //                       position: "no",
    //                     },
    //                   },
    //                 },
    //                 plugins: [ChartDataLabels],
    //               });
    //               clickedIncidentsCategory = false;
    //             }

    //           xhr_object.send();
    //           funIncidentsCategory.initialized = true;
    //         }

    //         dataDropdown_incidentcategory.style.display = "none";
    //       });
    //     }


    //   };
    // }
    // refreshIconElement_incidentcategory.addEventListener("click", restoreOriginalChartTicket);

    // function restoreOriginalChartTicket() {
    //   if (originalChartConfigIncidentCategory) {
    //     myChart.destroy(); // Destroy the current chart
    //     myChart = new Chart(incident_category_pie, originalChartConfigIncidentCategory);
    //     clickedIncidentsCategory = true;
    //   }
    // }

    // refreshIconElement_categoryIncident


    refreshIconElement_categoryIncident.addEventListener("click", restoreOriginalChartTicket);

    function restoreOriginalChartTicket() {
      if (originalChartConfigIncidentCategory) {
        myChart.destroy(); // Destroy the current chart
        loaderIncidentCategory.style.display = "block";
        funIncidentsCategory();
      }
    }

  };
  xhr_object.send();

}


function funIncidentsCategoryTop() {
  let incidentsCatMechanical = document.getElementById(
    "incidentsCatMechanical"
  );
  let incidentsCatEngineering = document.getElementById(
    "incidentsCatEngineering"
  );
  let incidentsCatHealthSafety = document.getElementById(
    "incidentsCatHealthSafety"
  );
  let incidentsCatOther = document.getElementById("incidentsCatOther");

  let loaderIncidentCategoryTop = document.getElementById(
    "loaderIncidentCategoryTop"
  );
  let incidentCategoryNoDataTop = document.getElementById(
    "incidentCategoryNoDataTop"
  );
  let incident_category_pieTop = document.getElementById("incident-category-pieTop");

  // loaderIncidentCategoryTop.style.display = "block";
  // incidentCategoryNoDataTop.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsCategoryTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getIncidentsCategoryTop + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getIncidentsCategoryTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getIncidentsCategoryTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object.onload = function () {
    resfunIncidentsCategoryTop = JSON.parse(this.responseText);

    console.log("Incident Category - ");
    console.log(resfunIncidentsCategoryTop.response);

    let xValues = [], yValues = [];

    xValues = Object.keys(resfunIncidentsCategoryTop.response);
    yValues = Object.values(resfunIncidentsCategoryTop.response);

    let incidentCategoryPieColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];
    let myChart;
    myChart = new Chart(incident_category_pieTop, {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [
          {
            label: "Share",
            data: yValues,
            backgroundColor: incidentCategoryPieColors,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderIncidentCategoryTop.style.display = "none";
    incidentCategoryNoDataTop.style.display = "none";
    incident_category_pieTop.style.display = "block";
    // infoTop5CategorywiseIcon,Top5CategorywiseDiv,closeTop5Categorywise,Top5CategorywiseInfo
    // refreshIconElementTopCategorywise
    infoTop5CategorywiseIconTop.addEventListener("click", InfoModal);
    let Top5CategorywiseDivTop = document.getElementById('Top5CategorywiseDivTop');
    let closeTop5CategorywiseTop = document.getElementById('closeTop5CategorywiseTop');

    function InfoModal(event) {
      event.stopPropagation();
      Top5CategorywiseDivTop.style.display = "block";
      if (resfunIncidentsCategoryTop.info) {
        let Top5CategorywiseInfoTop = document.getElementById("Top5CategorywiseInfoTop");
        let Top5CategorywiseInfoTop2 = document.getElementById("Top5CategorywiseInfoTop2");

        Top5CategorywiseInfoTop.innerHTML = "<b>Formula :</b> " + resfunIncidentsCategoryTop.info.formula;
        Top5CategorywiseInfoTop2.innerHTML = "<b>Info :</b> " + resfunIncidentsCategoryTop.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!Top5CategorywiseDivTop.contains(event.target) && event.target.id !== 'infoTop5CategorywiseIconTop') {
        closeTop5CategorywiseDivTop();
      }
    });

    closeTop5CategorywiseTop.addEventListener("click", closeTop5CategorywiseDivTop);

    function closeTop5CategorywiseDivTop() {
      Top5CategorywiseDivTop.style.display = "none";
    }

    Top5CategorywiseDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    function restoreOriginal() {
      if (incident_category_pieTop) {
        myChart.destroy();
        loaderIncidentCategoryTop.style.display = "block";
        funIncidentsCategoryTop()
      }
    }

    refreshIconElementTopCategorywiseTop.addEventListener("click", restoreOriginal);

  };
  xhr_object.send();

}

function EvConsumptionTop() {

  let loaderEVConsumption = document.getElementById("loaderEVConsumption");
  let EVConsumptionNoData = document.getElementById("EVConsumptionNoData");
  let EVConsumptionGraph = document.getElementById("EVConsumptionGraph");


  let clickedEVConsumption = true;

  let xhr_object9 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object9.open(
      "GET",
      getEVConsumptionTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getEVConsumptionTop + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object9.open(
      "GET",
      getEVConsumptionTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getEVConsumptionTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object9.onload = function () {
    resfunPowerConsumptionObject9 = JSON.parse(this.responseText);
    console.log("Power Consumption Object 9 Ev consumption - ");
    console.log(resfunPowerConsumptionObject9);

    // let arrAllObjects = Object.values(resfunPowerConsumptionObject9.response);

    // Extract labels (site names) and values (ev consumption) for the chart
    let labels = Object.keys(resfunPowerConsumptionObject9.response); // Site names
    let evConsumptionData = labels.map(label => {
      // Keep the comma in the display, but use parseFloat for the actual chart data
      let evValue = resfunPowerConsumptionObject9.response[label].ev.replace(/,/g, '');
      return parseFloat(evValue);
    });

    let currentChartType = "bar";

    // Original Chart Configuration for EV consumption
    originalChartConfigEVconsumption = {
      type: "bar",
      data: {
        labels: labels, // Site names
        datasets: [
          {
            label: "EV Consumption (KWH)",
            data: evConsumptionData, // EV consumption values for calculations
            backgroundColor: "#FDAB3D", // Bar color
            borderColor: "#FDAB3D", // Border color of bars
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }
          },
          y: {
            stacked: true,
            beginAtZero: true,
            title: {
              display: true,
              text: 'Consumption KWH'
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            display: true,
            formatter: function (value, context) {
              // Format the value with commas for display in data labels
              return value.toLocaleString('en-US');
            }
          },
          tooltip: {
            callbacks: {
              label: function (tooltipItem) {
                // Format the value with commas for tooltips
                return tooltipItem.dataset.label + ': ' + tooltipItem.raw.toLocaleString('en-US') + ' KWH';
              }
            }
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "center",
          },
        },
        maintainAspectRatio: false, // Ensure the chart is responsive
      },
      plugins: [ChartDataLabels],
    }

    // Create the bar chart
    let myChart = new Chart(EVConsumptionGraph, originalChartConfigEVconsumption);


    // let listItemLabelpower = document.getElementById("listItemLabelpower")
    loaderEVConsumption.style.display = "none";
    EVConsumptionNoData.style.display = "none";
    EVConsumptionGraph.style.display = "block";


    infoEVConsumptionGraphIcon.addEventListener("click", InfoModal);
    let EVConsumptionGraphDiv = document.getElementById('EVConsumptionGraphDiv');
    let closeEVConsumptionGraph = document.getElementById('closeEVConsumptionGraph');
    function InfoModal(event) {
      event.stopPropagation();
      EVConsumptionGraphDiv.style.display = "block";
      if (resfunPowerConsumptionObject9.info) {
        let EVConsumptionGraphInfo = document.getElementById("EVConsumptionGraphInfo");
        let EVConsumptionGraphInfo2 = document.getElementById("EVConsumptionGraphInfo2");

        EVConsumptionGraphInfo.innerHTML = "<b>Formula : </b>" + resfunPowerConsumptionObject9.info.formula;
        EVConsumptionGraphInfo2.innerHTML = "<b>Info :</b> " + resfunPowerConsumptionObject9.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!EVConsumptionGraphDiv.contains(event.target) && event.target.id !== 'infoEVConsumptionGraphIcon') {
        closeEVConsumptionGraphDiv();
      }
    });
    closeEVConsumptionGraph.addEventListener("click", closeEVConsumptionGraphDiv);
    function closeEVConsumptionGraphDiv() {
      EVConsumptionGraphDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    EVConsumptionGraphDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    // infoSiteWisePowerIcon,SiteWisePowerDiv,closeSiteWisePower,SiteWisePowerInfo

    EVConsumptionGraph.onclick = function (event) {

      if (clickedEVConsumption == true) {
        const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

        if (points.length) {
          const firstPoint = points[0];
          const label = myChart.data.labels[firstPoint.index];
          const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

          console.log(`Clicked on ${label} with value ${value}`);

          listItemLabelmonthpower.textContent = ` ${label}`;
          // console.log(listItemLabelpower);
          // document.getElementById("listItemValue").textContent = `Value: ${value}`;

          const dropdown = (document.getElementById("dataDropdown_EVConsumption"));
          console.log(dropdown);
          dropdown.style.display = "block";

        }
        dataDropdown_EVConsumption.addEventListener("click", function (event) {
          if (event.target.id != "closeDropdown") {
            const selectedOption = event.target.id;
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const labelname = label;
            console.log(selectedOption);

            if (selectedOption === "month-wise" && currentChartType === "bar") {
              let xhr_object = new XMLHttpRequest();
              xhr_object.open(
                "GET",
                getEVPowerDrill +
                "?site_id=" +
                countSiteDrop +
                "&society_id=" +
                countSocietyDrop +
                "&status=" +
                labelname +
                "&drilldown_by=" +
                selectedOption +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,
                true
              );

              console.log(
                getEVPowerDrill +
                "?site_id=" +
                countSiteDrop +
                "&society_id=" +
                countSocietyDrop +
                "&status=" +
                labelname +
                "&drilldown_by=" +
                selectedOption +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,
              );

              downloadEVConsumptionLink = ip + "supervisor-monthly/get-ev-consumption-drill-down-excel/" + idLink +
                "&status=" +
                labelname +
                "&drilldown_by=" +
                selectedOption +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,

                xhr_object.onload = function () {
                  resEVPowerDrill = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down - ");
                  console.log(resEVPowerDrill);

                  const labels = resEVPowerDrill.response.map(item => item[0]); // Extract months
                  const dataValues = resEVPowerDrill.response.map(item => item[1]);

                  myChart.destroy();
                  myChart = new Chart(EVConsumptionGraph, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Ev Consumption KWH",
                        data: dataValues,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          stacked: true,
                          beginAtZero: true,
                          title: {
                            display: true,
                            text: 'Months',
                            padding: {
                              top: 20,
                            }
                          }
                        },
                        y: {
                          stacked: true,
                          beginAtZero: true,
                          title: {
                            display: true,
                            text: 'Ev Consumption KWH'
                          },
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  clickedEVConsumption = false;
                  EVConsumptionGraph.style.display = "block";
                }

              xhr_object.send();
            }

            dataDropdown_EVConsumption.style.display = "none";
          } else {
            restoreOriginalChartTicket();
          }
        });
      }


    };

    function restoreOriginalChartTicket() {
      if (originalChartConfigEVconsumption) {
        myChart.destroy();
        myChart = new Chart(EVConsumptionGraph, originalChartConfigEVconsumption);
        dataDropdown_EVConsumption.style.display = "none"
        clickedEVConsumption = true;
        EVConsumptionGraph.style.display = "block";
      }
    }

    refreshIconElement_EVConsumption.addEventListener("click", restoreOriginalChartTicket);
  };
  xhr_object9.send();

}


function funFitout() {
  let FitoutNoData = document.getElementById("FitoutNoData");
  let loaderFitout = document.getElementById("loaderFitout");
  let tblFitout = document.getElementById("tblFitout");
  let tablebodyFitout = document.getElementById("tablebodyFitout");

  // tblFitout.style.display = "none";
  // loaderFitout.style.display = "block";
  // FitoutNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getFitout,
      +idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getFitout +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunFitout = JSON.parse(this.responseText);

    console.log(resfunFitout.response);

    console.log(getFitout + idLink);

    let resfunFitoutArray = resfunFitout.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunFitoutArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td style="text-align: left;">` +
        resfunFitoutArray[x][0] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunFitoutArray[x][1] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunFitoutArray[x][2] +
        `</td>` +

        `<td style="text-align: left;">` +
        resfunFitoutArray[x][4] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunFitoutArray[x][5] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunFitoutArray[x][6] +
        `</td>`;
      allDetails = allDetails + `</tr>`;
    }
    tablebodyFitout.innerHTML = allDetails;

    loaderFitout.style.display = "none";
    if (resfunFitout.length == 0) {
      FitoutNoData.style.display = "block";
      tblFitout.style.display = "none";
    } else {
      FitoutNoData.style.display = "none";
      tblFitout.style.display = "inline-table";
    }
    // infoFitOutTableIcon, FitOutTableDiv,  closeFitOutTable,   FitOutTableInfo
    infoFitOutTableIcon.addEventListener("click", InfoModal);
    let FitOutTableDiv = document.getElementById('FitOutTableDiv');
    let closeFitOutTable = document.getElementById('closeFitOutTable');
    function InfoModal(event) {
      event.stopPropagation();
      FitOutTableDiv.style.display = "block";
      if (resfunFitout.info) {
        let FitOutTableInfo = document.getElementById("FitOutTableInfo");
        let FitOutTableInfo2 = document.getElementById("FitOutTableInfo2");


        FitOutTableInfo.innerHTML = "<b>Formula :</b> " + resfunFitout.info.formula;
        FitOutTableInfo2.innerHTML = "<b>Info  : </b>" + resfunFitout.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!FitOutTableDiv.contains(event.target) && event.target.id !== 'infoFitOutTableIcon') {
        closeFitOutTableDiv();
      }
    });
    closeFitOutTable.addEventListener("click", closeFitOutTableDiv);
    function closeFitOutTableDiv() {
      FitOutTableDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FitOutTableDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    function restoreOriginal() {
      funFitout()
    }

    refreshIconElementActiveFitout.addEventListener("click", restoreOriginal);




  };
  xhr_object.send();
}

function Refresh_a61() {
  let fitoutUnoccupiedFlats = document.getElementById("fitoutUnoccupiedFlats");
  let fitoutOccupiedFlats = document.getElementById("fitoutOccupiedFlats");
  let loader = document.getElementById("loader_a61");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    fitoutUnoccupiedFlats.innerHTML = "";
    fitoutOccupiedFlats.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        getFitoutOccupiedUnoccupied + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(
        getFitoutOccupiedUnoccupied + idLink + "&date=" + globalDateFirst
      );
    } else {
      xhr_object1.open(
        "GET",
        getFitoutOccupiedUnoccupied +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getFitoutOccupiedUnoccupied +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resFunoccupency1 = JSON.parse(this.responseText);
      console.log("fitout occupency ++++++++++++============================================================================1 - ");
      console.log(resFunoccupency1);

      // Check if response exists and if it's greater than 0 hours
      if (typeof resFunoccupency1.response === 'object' && resFunoccupency1.response !== null && parseFloat(resFunoccupency1.response) > 0) {
        fitoutUnoccupiedFlats.innerHTML = resFunoccupency1.response.unoccupied_count;
        fitoutOccupiedFlats.innerHTML = resFunoccupency1.response.occupied_count;
      } else {
        fitoutUnoccupiedFlats.innerHTML = "No data available";
        fitoutOccupiedFlats.innerHTML = "No data available";
        fitoutUnoccupiedFlats.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}



function Refresh_a61FitOut() {
  let ftFitoutFlats = document.getElementById("ftFitoutFlats");
  let loader = document.getElementById("loader_a61FitOut");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    ftFitoutFlats.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getFtFitoutFlat + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getFtFitoutFlat + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getFtFitoutFlat +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getFtFitoutFlat +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunFtFitout2 = JSON.parse(this.responseText);
      console.log("Ft fitout flat 2 - ");
      console.log(resfunFtFitout2);
      // Check if response exists and if it's greater than 0 hours
      if (resfunFtFitout2.response && parseFloat(resfunFtFitout2.response) > 0) {
        ftFitoutFlats.innerHTML =
          resfunFtFitout2.response + "";

      } else {
        ftFitoutFlats.innerHTML = "No data available";
        ftFitoutFlats.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}

let clickedOccupancy = true;
function funOccupancy() {

  let occupancyNoData = document.getElementById("occupancyNoData");
  let Occupancy_sum = document.getElementById("Occupancy_sum");
  let loaderOccupancy = document.getElementById("loaderOccupancy");
  let occupancy = document.getElementById("occupancy");

  // loaderOccupancy.style.display = "block";
  // occupancyNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getOccupancyChart + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getOccupancyChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
    console.log(
      getOccupancyChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }


  let currentChartType = "bar";

  xhr_object.onload = function () {
    resfunOccupancy = JSON.parse(this.responseText);
    console.log("Occupancy Summary - ");
    console.log(resfunOccupancy);
    // Added now
    originalChartConfig = {
      type: "bar",
      data: {
        labels: resfunOccupancy.response.Keys,
        datasets: [
          {
            label: "Occupied",
            backgroundColor: ["#01c875"],
            data: resfunOccupancy.response.yes,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Unoccupied",
            backgroundColor: ["#e2445b"],
            data: resfunOccupancy.response.no,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    }
    let myChart = new Chart(Occupancy_sum, originalChartConfig)

    loaderOccupancy.style.display = "none";

    if (resfunOccupancy.response.total == 0) {
      occupancyNoData.style.display = "block";
      Occupancy_sum.style.display = "none";
    } else {
      occupancyNoData.style.display = "none";
      Occupancy_sum.style.display = "block";
    }

    // infoOccupancySummaryIcon,OccupancySummaryDiv,closeOccupancySummary,OccupancySummaryInfo
    infoOccupancySummaryIcon.addEventListener("click", InfoModal);
    let OccupancySummaryDiv = document.getElementById('OccupancySummaryDiv');
    let closeOccupancySummary = document.getElementById('closeOccupancySummary');

    function InfoModal(event) {
      event.stopPropagation();
      OccupancySummaryDiv.style.display = "block";
      if (resfunOccupancy.info) {
        let OccupancySummaryInfo = document.getElementById("OccupancySummaryInfo");

        OccupancySummaryInfo.innerHTML = "<b>Info :</b> " + resfunOccupancy.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!OccupancySummaryDiv.contains(event.target) && event.target.id !== 'infoOccupancySummaryIcon') {
        closeOccupancySummarynDiv();
      }
    });

    closeOccupancySummary.addEventListener("click", closeOccupancySummarynDiv);

    function closeOccupancySummarynDiv() {
      OccupancySummaryDiv.style.display = "none";
    }

    OccupancySummaryDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let OccupancydrillDownLevel = 1;
    let clickedOccupancy = true;


    if (!funOccupancy.initialized) {
      Occupancy_sum.onclick = function (event) {

        if (clickedOccupancy == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            // alert("hi");
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabel").textContent = `Tower: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;
            // backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown"));
            dropdown.style.display = "block";


          }
          dataDropdown.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (OccupancydrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                label = myChart.data.labels[firstPoint.index];
                labelname = label;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);

                // if (selectedOption === "Status" || "Flat" || "Flat_Type" || "Possession" || "Sold" || "Date_Of_Possession" && currentChartType === "bar") {




                document.getElementById("firstDrillDownOccupancy").style.display = "block";
                document.getElementById("firstDrillDownOccupancy").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;
                apiURL =
                  getTowerDrillSec +
                  idLink +
                  "&tower_name=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log(
                  getTowerDrillSec +
                  idLink +
                  "&tower_name=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                  true
                );
                xhr_object.open("GET", apiURL, true);
                downloadOccupancyLink = ip + "fm-excel-download/get-drill-down-for-occupancy/" + idLink +
                  "&tower_name=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,


                  xhr_object.onload = function () {
                    // Assuming this.responseText contains the JSON response
                    var resTowerDrill = JSON.parse(this.responseText);
                    console.log("Tower Drill Down - ");
                    console.log(resTowerDrill);

                    // Extracting labels and data from the response
                    var labels = Object.values(resTowerDrill.response);
                    var data = Object.keys(resTowerDrill.response);

                    // Creating a bar chart
                    myChart.destroy();
                    myChart = new Chart(Occupancy_sum, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: 'Occupancy',
                          data: data,
                          backgroundColor: "#01c875",
                          borderWidth: 1
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                            title: {
                              display: true,
                              text: labelname,
                              padding: {
                                top: 20,
                              }
                            }
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  };


                xhr_object.send();

                OccupancydrillDownLevel = 2;

              }
              else if (OccupancydrillDownLevel === 2) {

                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                console.log(backgroundColors);

                document.getElementById("firstDrillDownOccupancy").style.display = "none";
                document.getElementById("secondDrilldownOccupancy").style.display = "block";
                document.getElementById("secondDrilldownOccupancy").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getTowerDrillSec +
                  idLink +
                  "&tower_name=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                console.log("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadOccupancyLink = ip + "fm-excel-download/get-drill-down-for-occupancy/" + idLink +
                  "&tower_name=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,

                  xhr_object.onload = function () {
                    // Assuming this.responseText contains the JSON response
                    var resTowerDrill = JSON.parse(this.responseText);
                    console.log("Tower Drill Down - ");
                    console.log(resTowerDrill);

                    // Extracting labels and data from the response
                    var labels = Object.values(resTowerDrill.response);
                    var data = Object.keys(resTowerDrill.response);

                    // Creating a bar chart
                    myChart.destroy();
                    myChart = new Chart(Occupancy_sum, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: 'Occupancy',
                          data: data,
                          backgroundColor: "#01c875",
                          borderWidth: 1
                        }]
                      },
                      options: {
                        responsive: true,
                        interaction: {
                          intersect: false,
                        },
                        scales: {
                          x: {
                            stacked: true,
                            title: {
                              display: true,
                              text: labelname,
                              padding: {
                                top: 20,
                              }
                            }
                          },
                          y: {
                            stacked: true,
                          },
                        },
                        maintainAspectRatio: false,
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                            formatter: function (value, context) {
                              // Hide label if value is zero
                              return value === 0 ? '' : value;
                            }
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });
                  };

                xhr_object.send();
                OccupancydrillDownLevel = 3;
                clickedOccupancy = false;
                return;

              }
            }
            else {
              if (OccupancydrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }
            dataDropdown.style.display = "none";
          });
        } else if (clickedOccupancy == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }

    function restoreOriginalChart() {
      if (originalChartConfig) {
        myChart.destroy(); // Destroy the current chart
        funOccupancy();
        clickedOccupancy = true;
        document.getElementById("firstDrillDownOccupancy").style.display = "none";
        document.getElementById("secondDrilldownOccupancy").style.display = "none";
      }
    }

    refreshIconElement.addEventListener("click", restoreOriginalChart);

  };

  xhr_object.send();

}

// function restoreOriginalChart() {
//   if (Occupancy_sum) {
//     myChart.destroy(); // Destroy the current chart
//     myChart = new Chart(Occupancy_sum);
//   }
// }

let clickedDeliveryVisitor = true;
function funDeliveryVisitor() {
  let DeliveryNoData = document.getElementById("DeliveryNoData");
  let deliveryVisitor = document.getElementById("deliveryVisitor");
  let loaderDelivery = document.getElementById("loaderDelivery");


  // loaderDelivery.style.display = "block";
  // DeliveryNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getDeliveryVisitor + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getDeliveryVisitor +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
    console.log(
      getDeliveryVisitor +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunDeliveryVisitor = JSON.parse(this.responseText);
    console.log("Delivery Visitors - ");
    console.log(resfunDeliveryVisitor);

    // Define colors for the legends
    const colors = ["#01C875", "#FF5733", "#33FF57", "#5733FF", "#FF33A1", "#33FFF6"];

    const labels = Object.keys(resfunDeliveryVisitor.response);
    const dataValues = Object.values(resfunDeliveryVisitor.response);

    originalChartConfigVisitors = {
      type: "bar",
      data: {
        labels: labels,
        datasets: [
          {
            label: labels, // Labels for the legend
            backgroundColor: colors.slice(0, labels.length),
            data: dataValues,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
            labels: {
              generateLabels: function (chart) {
                return labels.map(function (label, index) {
                  return {
                    text: label,
                    fillStyle: colors[index],
                    hidden: false,
                    lineCap: "butt",
                    lineDash: [],
                    lineDashOffset: 0,
                    lineJoin: "miter",
                    lineWidth: 1,
                    strokeStyle: colors[index],
                    pointStyle: "circle",
                    rotation: 0
                  };
                });
              }
            }
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(deliveryVisitor, originalChartConfigVisitors);

    loaderDelivery.style.display = "none";

    if (resfunDeliveryVisitor.response == 0) {
      DeliveryNoData.style.display = "block";
      deliveryVisitor.style.display = "none";
    } else {
      DeliveryNoData.style.display = "none";
      deliveryVisitor.style.display = "block";
    }

    // infoDeliveryVisitorsIcon,DeliveryVisitorsDiv,closeDeliveryVisitors,DeliveryVisitorsInfo
    infoDeliveryVisitorsIcon.addEventListener("click", InfoModal);
    let DeliveryVisitorsDiv = document.getElementById('DeliveryVisitorsDiv');
    let closeDeliveryVisitors = document.getElementById('closeDeliveryVisitors');

    function InfoModal(event) {
      event.stopPropagation();
      DeliveryVisitorsDiv.style.display = "block";
      if (resfunDeliveryVisitor.info) {
        let DeliveryVisitorsInfo = document.getElementById("DeliveryVisitorsInfo");


        DeliveryVisitorsInfo.innerHTML = "<b>Info :</b> " + resfunDeliveryVisitor.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!DeliveryVisitorsDiv.contains(event.target) && event.target.id !== 'infoDeliveryVisitorsIcon') {
        closeDeliveryVisitorsDiv();
      }
    });

    closeDeliveryVisitors.addEventListener("click", closeDeliveryVisitorsDiv);

    function closeDeliveryVisitorsDiv() {
      DeliveryVisitorsDiv.style.display = "none";
    }

    DeliveryVisitorsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let visitorsDeliverydrillDownLevel = 1;
    let clickedDeliveryVisitor = true;

    if (!funDeliveryVisitor.initialized) {
      deliveryVisitor.onclick = function (event) {

        if (clickedDeliveryVisitor == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;

            document.getElementById("listItemLabelVisitors").textContent = `Ticket: ${label}`;

            const dropdown = (document.getElementById("dataDropdown_visitors"));
            dropdown.style.display = "block";
          }

          dataDropdown_visitors.addEventListener("click", function (event) {

            if (event.target.id != "closeDropdown") {
              if (visitorsDeliverydrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);

                document.getElementById("firstDrillDownUnitDelivery").style.display = "block";
                document.getElementById("firstDrillDownUnitDelivery").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getVisitorsDrillSecond +
                  idLink +
                  "&visitor=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                console.log("deactive drill fdown")
                console.log(getVisitorsDrill +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&visitor=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond);
                xhr_object.open("GET", apiURL, true);

                downloadDeliveryVisitorLink = ip + "fm-excel-download/get-drill-down-for-visitors/" + idLink +
                  "&visitor=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resVisitorsDrill = JSON.parse(this.responseText);
                  console.log("Ticket Category Drill Down - ");
                  console.log(resVisitorsDrill);

                  const labels = resVisitorsDrill.response.map(item => item[0]);
                  const dataValues = resVisitorsDrill.response.map(item => item[1]);

                  myChart.destroy();
                  myChart = new Chart(deliveryVisitor, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Data Values',
                        data: dataValues,
                        backgroundColor: [
                          "#77216F",
                          "#01C875",
                          "#E2445B",
                          "#E95420",
                          "#A1CD7A",
                        ],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }
                xhr_object.send();
                visitorsDeliverydrillDownLevel = 2;

              } else if (visitorsDeliverydrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);

                document.getElementById("firstDrillDownUnitDelivery").style.display = "none";
                document.getElementById("secondDrilldownUnitDelivery").style.display = "block";
                document.getElementById("secondDrilldownUnitDelivery").textContent = ` - ${selectedSecondOption}`

                apiURL =
                  getVisitorsDrillSecond +
                  idLink +
                  "&visitor=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadDeliveryVisitorLink = ip + "fm-excel-download/get-drill-down-for-visitors/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&visitor=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resVisitorsDrillSecond = JSON.parse(this.responseText);
                  console.log("deactive ticket");
                  console.log(resVisitorsDrillSecond);

                  const labels = resVisitorsDrillSecond.response.map(item => item[0]);
                  const dataValues = resVisitorsDrillSecond.response.map(item => item[1]);

                  myChart.destroy();
                  myChart = new Chart(deliveryVisitor, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Data Values',
                        data: dataValues,
                        backgroundColor: [
                          "#77216F",
                          "#01C875",
                          "#E2445B",
                          "#E95420",
                          "#A1CD7A",
                        ],
                        borderColor: 'rgba(75, 192, 192, 1)',
                        borderWidth: 1
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelnameSecond,
                            padding: {
                              top: 20,
                            }
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "bottom",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }
                xhr_object.send();
                visitorsDeliverydrillDownLevel = 2;
              }
            }
          });
        }
      }
      funDeliveryVisitor.initialized = true;
    }

    function restoreOriginalChart() {
      if (originalChartConfigVisitors) {
        myChart.destroy();
        funDeliveryVisitor();
        clickedDeliveryVisitor = true;
        dataDropdown_visitors.style.display = "none";
        document.getElementById("firstDrillDownUnitDelivery").style.display = "none";
        document.getElementById("secondDrilldownUnitDelivery").style.display = "none";
      }
    }

    refreshIconElement_Deliveryvisitors.addEventListener("click", restoreOriginalChart);
  }

  xhr_object.send();
}

function funManPower() {
  let ManPowerNoData = document.getElementById("ManPowerNoData");
  let loaderManPower = document.getElementById("loaderManPower");
  let tblManPowerinfo = document.getElementById("tblManPowerinfo");
  let tablebodyManPower = document.getElementById("tablebodyManPower");

  // tblManPowerinfo.style.display = "none";
  // loaderManPower.style.display = "block";
  // ManPowerNoData.style.display = "none";

  // getIncidentManPower
  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentManPower,
      +idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getIncidentManPower +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunManPower = JSON.parse(this.responseText);
    console.log("ManPower - 1");
    console.log(resfunManPower.response);
    console.log("ManPower - 1-------------------================------------");
    console.log(getIncidentManPower + idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond);

    let resfunManPowerArray = resfunManPower.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunManPowerArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td>` +
        resfunManPowerArray[x][0] +
        `</td>` +
        `<td>` +
        resfunManPowerArray[x][1] +
        `</td>`;
      // `<td>` +
      // resfunManPowerArray[x][2] +
      // `</td>` +
      // `<td>` +
      // resfunManPowerArray[x][3] +
      // `</td>`;
      allDetails = allDetails + `</tr>`;
    }
    tablebodyManPower.innerHTML = allDetails;

    loaderManPower.style.display = "none";
    if (resfunManPower.length == 0) {
      ManPowerNoData.style.display = "block";
      tblManPowerinfo.style.display = "none";
    } else {
      ManPowerNoData.style.display = "none";
      tblManPowerinfo.style.display = "inline-table";
    }

    infoManpowerAttendanceIcon.addEventListener("click", InfoModal);
    let ManpowerAttendanceDiv = document.getElementById('ManpowerAttendanceDiv');
    let closeManpowerAttendance = document.getElementById('closeManpowerAttendance');

    function InfoModal(event) {
      event.stopPropagation();
      ManpowerAttendanceDiv.style.display = "block";
      if (resfunManPower.info) {
        let ManpowerAttendanceInfo = document.getElementById("ManpowerAttendanceInfo");
        let ManpowerAttendanceInfo2 = document.getElementById("ManpowerAttendanceInfo2");

        ManpowerAttendanceInfo.innerHTML = "<b>Formula :</b> " + resfunManPower.info.formula;
        ManpowerAttendanceInfo2.innerHTML = "<b>Info :</b> " + resfunManPower.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ManpowerAttendanceDiv.contains(event.target) && event.target.id !== 'infoManpowerAttendanceIcon') {
        closeManpowerAttendanceDiv();
      }
    });

    closeManpowerAttendance.addEventListener("click", closeManpowerAttendanceDiv);

    function closeManpowerAttendanceDiv() {
      ManpowerAttendanceDiv.style.display = "none";
    }

    ManpowerAttendanceDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_manPower

    refreshIconElement_manPower.addEventListener("click", restoreOriginalChartManpower);

    function restoreOriginalChartManpower() {
      loaderManPower.style.display = "block";
      tblManPowerinfo.style.display = "none";
      funManPower();
    }

  };
  xhr_object.send();
}


// // inventory table
function funRCA() {
  let RCANoData = document.getElementById("RCANoData");
  let tblRCAinfo = document.getElementById("tblRCAinfo");
  let tablebodyRCA = document.getElementById("tablebodyRCA");
  let loaderRCA = document.getElementById("loaderRCA");

  // tblRCAinfo.style.display = "none";
  // loaderRCA.style.display = "block";
  // RCANoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsRCATable + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getIncidentsRCATable +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  // console.log("RCA -1 ");
  // console.log(resfunRCA.response);
  xhr_object.onload = function () {
    resfunRCA = JSON.parse(this.responseText);
    console.log("RCA - 1");
    console.log(resfunRCA);

    console.log(getIncidentsRCATable + idLink);

    let resfunRCAArray = resfunRCA.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunRCAArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][0] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][1] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][2] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][3] +
        `</td>`;

      if (resfunRCAArray[x][4] < 0 || resfunRCAArray[x][4] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][4] + `</td>`;
      }
      // `<td>` +
      // resfunRCAArray[x][5] +
      // `</td>`
      if (resfunRCAArray[x][5] < 0 || resfunRCAArray[x][5] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][5] + `</td>`;
      }
      if (resfunRCAArray[x][6] < 0 || resfunRCAArray[x][6] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][6] + `</td>`;
      }
      if (resfunRCAArray[x][7] < 0 || resfunRCAArray[x][7] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][7] + `</td>`;
      }

      if (resfunRCAArray[x][13] < 0 || resfunRCAArray[x][13] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][13] + `</td>`;
      }

      if (resfunRCAArray[x][8] < 0 || resfunRCAArray[x][8] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][8] + `</td>`;
      }

      if (resfunRCAArray[x][9] < 0 || resfunRCAArray[x][9] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][9] + `</td>`;
      }
      if (resfunRCAArray[x][10] < 0 || resfunRCAArray[x][10] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][10] + `</td>`;
      }
      if (resfunRCAArray[x][11] < 0 || resfunRCAArray[x][11] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][11] + `</td>`;
      }
      if (resfunRCAArray[x][12] < 0 || resfunRCAArray[x][12] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][12] + `</td>`;
      }

      allDetails = allDetails + `</tr>`;
    }
    tablebodyRCA.innerHTML = allDetails;

    loaderRCA.style.display = "none";
    if (resfunRCAArray.length == 0) {
      RCANoData.style.display = "block";
      tblRCAinfo.style.display = "none";
    } else {
      RCANoData.style.display = "none";
      tblRCAinfo.style.display = "block";
    }

    // refreshIconElement_incidentSummary


    function restoreOriginalChartIncident() {
      loaderRCA.style.display = "block";
      tblRCAinfo.style.display = "none";
      funRCA();
    }

    refreshIconElement_incidentSummary.addEventListener("click", restoreOriginalChartIncident);
  };
  xhr_object.send();
}

function funGetSafeManHours() {
  let cardSafeManHours = document.getElementById("cardSafeManHours");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getSafeManHours + idLink + "&date=" + globalDateFirst,
    true
  );

  xhr_object.onload = function () {
    resfunGetSafeManHours = JSON.parse(this.responseText);
    console.log("Safe Man Hours - ");
    console.log(resfunGetSafeManHours);
    cardSafeManHours.innerHTML = resfunGetSafeManHours.response + "";

    // infoSafeManIcon,SafeManDiv,closeSafeMan,SafeManInfo

    infoSafeManIcon.addEventListener("click", InfoModal1);
    let SafeManDiv = document.getElementById('SafeManDiv');
    let closeSafeMan = document.getElementById('closeSafeMan');
    function InfoModal1(event) {
      event.stopPropagation();
      SafeManDiv.style.display = "block";
      if (resfunGetSafeManHours.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let SafeManInfo = document.getElementById("SafeManInfo");
        let SafeManInfo2 = document.getElementById("SafeManInfo2");
        let SafeManInfo3 = document.getElementById("SafeManInfo3");

        SafeManInfo.innerHTML = "<b>Formula :</b> " + resfunGetSafeManHours.info.Formula;
        SafeManInfo2.innerHTML = "<b>Info :</b> " + resfunGetSafeManHours.info.info;
        SafeManInfo3.innerHTML = "<b>After Last LTIR attendance days :</b> " + resfunGetSafeManHours.info["After Last LTIR attendance days"];

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!SafeManDiv.contains(event.target) && event.target.id !== 'infoSafeManIcon') {
        closeSafeManDiv();
      }
    });
    closeSafeMan.addEventListener("click", closeSafeManDiv);
    function closeSafeManDiv() {
      SafeManDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    SafeManDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funAssetsBreakdown() {
  let assetsBreakdownNoData = document.getElementById("assetsBreakdownNoData");
  let tblAssetsBreakdowninfo = document.getElementById(
    "tblAssetsBreakdowninfo"
  );
  let tablebodyAssetsBreakdown = document.getElementById(
    "tablebodyAssetsBreakdown"
  );
  let loaderAssetsBreakdown = document.getElementById("loaderAssetsBreakdown");

  // tblAssetsBreakdowninfo.style.display = "none";
  // loaderAssetsBreakdown.style.display = "block";
  // assetsBreakdownNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getAssetsBreakdown + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getAssetsBreakdown +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunAssetsBreakdown = JSON.parse(this.responseText);
    console.log("AssetsBreakdown - ");
    console.log(resfunAssetsBreakdown);

    let resfunAssetsBreakdownArray = resfunAssetsBreakdown.response.values;
    allDetails = ``;
    var index = 0;

    for (let x in resfunAssetsBreakdownArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][0] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][1] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][2] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][3] +
        `</td>`;


      if (
        resfunAssetsBreakdownArray[x][4] < 0 ||
        resfunAssetsBreakdownArray[x][4] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunAssetsBreakdownArray[x][4] + `</td>`;
      }

      if (
        resfunAssetsBreakdownArray[x][5] < 0 ||
        resfunAssetsBreakdownArray[x][5] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunAssetsBreakdownArray[x][5] + `</td>`;
      }
      allDetails = allDetails + `</tr>`;
    }
    tablebodyAssetsBreakdown.innerHTML = allDetails;

    loaderAssetsBreakdown.style.display = "none";
    if (resfunAssetsBreakdownArray.length == 0) {
      assetsBreakdownNoData.style.display = "block";
      tblAssetsBreakdowninfo.style.display = "none";
    } else {
      assetsBreakdownNoData.style.display = "none";
      tblAssetsBreakdowninfo.style.display = "inline-table";
    }

    // infoAssetBreakdownTableIcon,AssetBreakdownTableDiv,closeAssetBreakdownTable,AssetBreakdownTableInfo
    infoAssetBreakdownTableIcon.addEventListener("click", InfoModal);
    let AssetBreakdownTableDiv = document.getElementById('AssetBreakdownTableDiv');
    let closeAssetBreakdownTable = document.getElementById('closeAssetBreakdownTable');

    function InfoModal(event) {
      event.stopPropagation();
      AssetBreakdownTableDiv.style.display = "block";
      if (resfunAssetsBreakdown.info) {
        let AssetBreakdownTableInfo = document.getElementById("AssetBreakdownTableInfo");

        AssetBreakdownTableInfo.innerHTML = "<b>Info :</b> " + resfunAssetsBreakdown.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!AssetBreakdownTableDiv.contains(event.target) && event.target.id !== 'infoAssetBreakdownTableIcon') {
        closeAssetBreakdownTableDiv();
      }
    });

    closeAssetBreakdownTable.addEventListener("click", closeAssetBreakdownTableDiv);

    function closeAssetBreakdownTableDiv() {
      AssetBreakdownTableDiv.style.display = "none";
    }

    AssetBreakdownTableDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_assetBreakdown

    refreshIconElement_assetBreakdown.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      funAssetsBreakdown();
    }
  };
  xhr_object.send();
}


function funExecutiveEscalation() {
  let executiveEscalationNoData = document.getElementById("executiveEscalationNoData");
  let tblExecutiveEscalationinfo = document.getElementById(
    "tblExecutiveEscalationinfo"
  );
  let tablebodyExecutiveEscalation = document.getElementById(
    "tablebodyExecutiveEscalation"
  );
  let loaderExecutiveEscalation = document.getElementById("loaderExecutiveEscalation");

  // tblExecutiveEscalationinfo.style.display = "none";
  // loaderExecutiveEscalation.style.display = "block";
  // executiveEscalationNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getExecutiveEscalation + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getExecutiveEscalation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunExecutiveEscalation = JSON.parse(this.responseText);
    console.log("Executive Escalation - ");
    console.log(resfunExecutiveEscalation);

    let resfunExecutiveEscalationArray = resfunExecutiveEscalation.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunExecutiveEscalationArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][0] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][1] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][2] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][3] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][4] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][5] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][6] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][8] +
        `</td>`;

      allDetails = allDetails + `</tr>`;
    }
    tablebodyExecutiveEscalation.innerHTML = allDetails;

    loaderExecutiveEscalation.style.display = "none";
    if (resfunExecutiveEscalationArray.length == 0) {
      executiveEscalationNoData.style.display = "block";
      tblExecutiveEscalationinfo.style.display = "none";
    } else {
      executiveEscalationNoData.style.display = "none";
      tblExecutiveEscalationinfo.style.display = "inline-table";
    }


    infoExecutiveEscalationIcon.addEventListener("click", InfoModal);
    let ExecutiveEscalationDiv = document.getElementById('ExecutiveEscalationDiv');
    let closeExecutiveEscalation = document.getElementById('closeExecutiveEscalation');

    function InfoModal(event) {
      event.stopPropagation();
      ExecutiveEscalationDiv.style.display = "block";
      if (resfunExecutiveEscalation.info) {
        let ExecutiveEscalationInfo = document.getElementById("ExecutiveEscalationInfo");
        let ExecutiveEscalationInfo2 = document.getElementById("ExecutiveEscalationInfo2");

        ExecutiveEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunExecutiveEscalation.info.formula;
        ExecutiveEscalationInfo2.innerHTML = "<b>Info :</b> " + resfunExecutiveEscalation.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ExecutiveEscalationDiv.contains(event.target) && event.target.id !== 'infoExecutiveEscalationIcon') {
        closeExecutiveEscalationDiv();
      }
    });

    closeExecutiveEscalation.addEventListener("click", closeExecutiveEscalationDiv);

    function closeExecutiveEscalationDiv() {
      ExecutiveEscalationDiv.style.display = "none";
    }

    ExecutiveEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_executive

    function restoreOriginalChartExecutive() {
      loaderExecutiveEscalation.style.display = "block";
      funExecutiveEscalation();
    }

    refreshIconElement_executive.addEventListener("click", restoreOriginalChartExecutive);
  };
  xhr_object.send();
}


// tblfacilityinfo,tablebodyfacilityinfo,loaderfacilityinfo,facilityinfoNoData

function funFacilityInfo() {
  let facilityinfoNoData = document.getElementById("facilityinfoNoData");
  let tblfacilityinfo = document.getElementById("tblfacilityinfo");
  let tablebodyfacilityinfo = document.getElementById("tablebodyfacilityinfo");
  let loaderfacilityinfo = document.getElementById("loaderfacilityinfo");

  // tblfacilityinfo.style.display = "none";
  // loaderfacilityinfo.style.display = "block";
  // facilityinfoNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getFacilityInfo + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getFacilityInfo +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunFacilityInfo = JSON.parse(this.responseText);
    console.log("Facility Info - ");
    console.log(resfunFacilityInfo);

    let resfunFacilityInfoArray = resfunFacilityInfo.facilities_info;
    let allDetails = '';

    for (let index = 0; index < resfunFacilityInfoArray.length; index++) {
      let facilityName = resfunFacilityInfoArray[index].facility_name;
      let bookingCount = resfunFacilityInfoArray[index].booking_count;
      let bookingBy = resfunFacilityInfoArray[index].booked_by;
      let bookingStatus = resfunFacilityInfoArray[index].booking_status;
      let tower = resfunFacilityInfoArray[index].tower;
      // let flat = resfunFacilityInfoArray[index].flat;
      let scheduleDate = resfunFacilityInfoArray[index].schedule_date;
      let scheduleslot = resfunFacilityInfoArray[index].schedule_slot;


      allDetails +=
        `<tr>` +
        `<td>` + (index + 1) + `</td>` +
        `<td>` + facilityName + `</td>` +
        // `<td>` + bookingCount + `</td>` +
        `<td>` + bookingBy + `</td>` +
        `<td>` + bookingStatus + `</td>` +
        `<td>` + tower + `</td>` +
        // `<td>` + flat + `</td>` +
        `<td>` + scheduleDate + `</td>` +
        `<td>` + scheduleslot + `</td>` +
        `</tr>`;
    }
    tablebodyfacilityinfo.innerHTML = allDetails;

    loaderfacilityinfo.style.display = "none";
    if (resfunFacilityInfoArray.length == 0) {
      facilityinfoNoData.style.display = "block";
      tblfacilityinfo.style.display = "none";
    } else {
      facilityinfoNoData.style.display = "none";
      tblfacilityinfo.style.display = "table"; // Use "table" instead of "inline-table"
    }
    // refreshIconElement_FacilitiesInfo


    infoFacilitiesInfoIcon.addEventListener("click", InfoModal);
    let FacilitiesInfoDiv = document.getElementById('FacilitiesInfoDiv');
    let closeFacilitiesInfo = document.getElementById('closeFacilitiesInfo');
    function InfoModal(event) {
      event.stopPropagation();
      FacilitiesInfoDiv.style.display = "block";
      if (resfunFacilityInfo.info) {
        let FacilitiesInfoInfo = document.getElementById("FacilitiesInfoInfo");
        let FacilitiesInfoInfo2 = document.getElementById("FacilitiesInfoInfo2");


        FacilitiesInfoInfo.innerHTML = "<b>Formula :</b> " + resfunFacilityInfo.info.formula;
        FacilitiesInfoInfo2.innerHTML = "<b>Info  :</b> " + resfunFacilityInfo.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!FacilitiesInfoDiv.contains(event.target) && event.target.id !== 'infoFacilitiesInfoIcon') {
        closeFacilitiesInfoDiv();
      }
    });
    closeFacilitiesInfo.addEventListener("click", closeFacilitiesInfoDiv);
    function closeFacilitiesInfoDiv() {
      FacilitiesInfoDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FacilitiesInfoDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    refreshIconElement_FacilitiesInfo.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      loaderfacilityinfo.style.display = "block";
      tblfacilityinfo.style.display = "none";
      funFacilityInfo();
    }
  };
  xhr_object.send();
}

let clickedPyramid = true;
function funPyramid(type, firstDate, secondDate) {
  let chartPyramidNoData = document.getElementById("chartPyramidNoData");
  let chartPyramid = document.getElementById("chartPyramid");
  let loaderPyramid = document.getElementById("loaderPyramid");
  let pyr = document.getElementById("pyr");

  // chartPyramid.style.display = "none";
  // loaderPyramid.style.display = "block";
  // chartPyramidNoData.style.display = "none";
  console.log(resfunPyramid);

  // if (globalType == "daily") {
  //   pyr.innerHTML = "  Level Wise Incident " + globalDateFirst;
  // } else {
  //   pyr.innerHTML = " Level Wise Incident " + globalDateFirst + " to " + globalDateSecond;
  // }

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getPyramid + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getPyramid + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getPyramid +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    // console.log(
    //   getPyramid + idLink + "&from_date=" + firstDate + "&to_date=" + secondDate
    // );
  }

  xhr_object.onload = function () {
    resfunPyramid = JSON.parse(this.responseText);

    // let valueChartName = Object.keys(resfunPyramid.response);
    // let valueChartY = Object.values(resfunPyramid.response);
    const valueChartName = Object.keys(resfunPyramid.response);
    const valueChartY = Object.values(resfunPyramid.response);

    console.log("Pyramid- ");
    console.log(resfunPyramid);
    console.log(valueChartName);
    originalChartConfigIncidentLevel = {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            // label:"Incident",
            data: valueChartY,
            axis: "y",
            fill: true,
            backgroundColor: ["#D44B52", "#F69380", "#FDAB3D", "#01C875"],
            borderWidth: 1,
          },
        ],
      },
      options: {
        indexAxis: "y",
        responsive: true,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              generateLabels: function (chart) {
                const data = chart.data;
                if (data.labels.length && data.datasets.length) {
                  return data.labels.map((label, i) => ({
                    text: label,
                    fillStyle: data.datasets[0].backgroundColor[i],
                    hidden: false,
                    lineCap: 'butt',
                    lineDash: [],
                    lineDashOffset: 0,
                    lineJoin: 'miter',
                    lineWidth: 0,
                    strokeStyle: 'rgba(0,0,0,0)',
                    // Custom legend item with rectangle point style
                    pointStyle: 'rect',
                    rotation: 0
                  }));
                }
                return [];
              }
            },
            display: true,
            position: "bottom",
            align: "center"
          },
        },
      },
      plugins: [ChartDataLabels],
    };


    let myChart = new Chart(chartPyramid, originalChartConfigIncidentLevel)
    loaderPyramid.style.display = "none";
    if (resfunPyramid.response == 0) {
      chartPyramidNoData.style.display = "block";
      chartPyramid.style.display = "none";
    } else {
      chartPyramidNoData.style.display = "none";
      chartPyramid.style.display = "block";
    }


    // infoLevelWiseIncidentsIcon,LevelWiseIncidentsDiv,closeLevelWiseIncidents,LevelWiseIncidentsInfo

    infoLevelWiseIncidentsIcon.addEventListener("click", InfoModal);
    let LevelWiseIncidentsDiv = document.getElementById('LevelWiseIncidentsDiv');
    let closeLevelWiseIncidents = document.getElementById('closeLevelWiseIncidents');

    function InfoModal(event) {
      event.stopPropagation();
      LevelWiseIncidentsDiv.style.display = "block";
      if (resfunPyramid.info) {
        let LevelWiseIncidentsInfo = document.getElementById("LevelWiseIncidentsInfo");
        let LevelWiseIncidentsInfo2 = document.getElementById("LevelWiseIncidentsInfo2");

        LevelWiseIncidentsInfo.innerHTML = "<b>Info :</b> " + resfunPyramid.info.info;
        LevelWiseIncidentsInfo2.innerHTML = "<b>Incident level :</b> " + resfunPyramid.info.incident_level;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!LevelWiseIncidentsDiv.contains(event.target) && event.target.id !== 'infoLevelWiseIncidentsIcon') {
        closeLevelWiseIncidentsDiv();
      }
    });

    closeLevelWiseIncidents.addEventListener("click", closeLevelWiseIncidentsDiv);

    function closeLevelWiseIncidentsDiv() {
      LevelWiseIncidentsDiv.style.display = "none";
    }

    LevelWiseIncidentsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElement_levelIncidents


    function restoreOriginalChartIncident() {

      if (originalChartConfigIncidentLevel) {
        myChart.destroy();
        funPyramid();
      }
    }

    refreshIconElement_levelIncidents.addEventListener("click", restoreOriginalChartIncident);

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let clickedPyramid = true;
    let IncidentWisedrillDownLevel = 1;

    if (!funPyramid.initialized) {
      chartPyramid.onclick = function (event) {

        if (clickedPyramid == false) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            label = myChart.data.labels[firstPoint.index];
            value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelIncidentLevel").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            const dropdown = (document.getElementById("dataDropdown_incidentlevel"));
            dropdown.style.display = "block";
            console.log(backgroundColors);
          }

          dataDropdown_incidentlevel.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (IncidentWisedrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                label = myChart.data.labels[firstPoint.index];
                labelname = label;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);


                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getIncidentLevelDrillSecond +
                  idLink +
                  "&level=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.open("GET", apiURL, true);

                downloadPyramidLink = ip + "fm-excel-download/get-drill-down-for-levelWiseIncidents/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&level=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;



                xhr_object.onload = function () {
                  resIncidentLevelDrill = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down - 1");
                  console.log(resIncidentLevelDrill);

                  const labels = resIncidentLevelDrill.response.map(item => item[1]);
                  const data = resIncidentLevelDrill.response.map(item => item[0]);


                  myChart.destroy();
                  myChart = new Chart(chartPyramid, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: backgroundColors,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }

                xhr_object.send();
                IncidentWisedrillDownLevel = 2;
              }
              else if (IncidentWisedrillDownLevel === 2) {
                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                apiURL =
                  getIncidentLevelDrillSecond +
                  idLink +
                  "&level=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadPyramidLink = ip + "fm-excel-download/get-drill-down-for-levelWiseIncidents/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&level=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resIncidentLevelDrill = JSON.parse(this.responseText);
                  console.log("Tickets Drill Down - ");
                  console.log(resIncidentLevelDrill);

                  const labels = resIncidentLevelDrill.response.map(item => item[1]);
                  const data = resIncidentLevelDrill.response.map(item => item[0]);


                  myChart.destroy();
                  myChart = new Chart(chartPyramid, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: "#F69380",
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                }

                xhr_object.send();
                IncidentWisedrillDownLevel = 3;
                clickedPyramid = false;
                return;

              }
            }
            else {
              if (IncidentWisedrillDownLevel === 1) {
                restoreOriginalChartTicket();
              }
            }

            dataDropdown_incidentlevel.style.display = "none";
          });
        } else if (clickedPyramid == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChartTicket() {
      if (originalChartConfigIncidentLevel) {
        myChart.destroy(); // Destroy the current chart
        funPyramid();
        clickedPyramid = true;
        IncidentWisedrillDownLevel = 1;
      }
    }

    refreshIconElement_incidentlevel.addEventListener("click", restoreOriginalChartTicket);
  };
  xhr_object.send();
}


function funPyramidTop(type, firstDate, secondDate) {
  let chartPyramidNoDataTop = document.getElementById("chartPyramidNoDataTop");
  let chartPyramidTop = document.getElementById("chartPyramidTop");
  let loaderPyramidTop = document.getElementById("loaderPyramidTop");
  let pyr = document.getElementById("pyr");

  // chartPyramidTop.style.display = "none";
  // loaderPyramidTop.style.display = "block";
  // chartPyramidNoDataTop.style.display = "none";


  // if (globalType == "daily") {
  //   pyr.innerHTML = "  Level Wise Incident " + globalDateFirst;
  // } else {
  //   pyr.innerHTML = " Level Wise Incident " + globalDateFirst + " to " + globalDateSecond;
  // }

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getPyramidTop + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getPyramidTop + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getPyramidTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    // console.log(
    //   getPyramid + idLink + "&from_date=" + firstDate + "&to_date=" + secondDate
    // );
  }

  xhr_object.onload = function () {
    resfunPyramidTop = JSON.parse(this.responseText);

    let valueChartName = Object.keys(resfunPyramidTop.response);
    let valueChartY = Object.values(resfunPyramidTop.response);
    console.log("Pyramid- ");
    console.log(resfunPyramidTop);
    console.log(valueChartName);

    const backgroundColor = [
      "#77216F",
      "#01C875",
      "#E2445B",
      "#E95420",
      "#A1CD7A",
    ];
    const datasets = valueChartName.map((label, index) => ({
      label: label,
      data: valueChartY,
      fill: true,
      axis: "y",
      backgroundColor: backgroundColor[index],
      borderWidth: 1,
    }));
    // let total = valueChartName + valueChartY;
    // const centerText = {
    //   id: 'centerText',
    //   afterDatasetsDraw(chart, args, options) {
    //     const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
    //     ctx.save();

    //     ctx.font = 'bolder 18px Arial';
    //     ctx.fillStyle = 'rgba(0, 0, 0, 1)';
    //     ctx.textAlign = 'center';
    //     ctx.fillText('Total: ' + total, width / 2, height / 2);
    //   }
    // }
    // if (myChart !=null){
    //     myChart.destory();
    // }

    let myChart;
    myChart = new Chart(chartPyramidTop, {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            label: valueChartName,
            data: valueChartY,
            axis: "y",
            fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],

            borderWidth: 1,
          },
        ],
      },
      // data: {
      //   labels: valueChartName,
      //   datasets: datasets,
      // },
      options: {
        indexAxis: "y",
        responsive: true,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true, // Enable point style icons
              generateLabels: function (chart) {
                const data = chart.data;
                if (data.labels.length && data.datasets.length) {
                  return data.labels.map((label, i) => ({
                    text: label,
                    fillStyle: data.datasets[0].backgroundColor[i],
                    hidden: false,
                    lineCap: 'butt',
                    lineDash: [],
                    lineDashOffset: 0,
                    lineJoin: 'miter',
                    lineWidth: 0,
                    strokeStyle: 'rgba(0,0,0,0)',
                    pointStyle: 'circle',
                    rotation: 0
                  }));
                }
                return [];
              }
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    });
    // if (myChart !=null){
    //     myChart.destory();
    // }
    loaderPyramidTop.style.display = "none";
    if (resfunPyramidTop.response == 0) {
      chartPyramidNoDataTop.style.display = "block";
      chartPyramidTop.style.display = "none";
    } else {
      chartPyramidNoDataTop.style.display = "none";
      chartPyramidTop.style.display = "block";
    }


    infoLevelWiseIncidentsIconTop.addEventListener("click", InfoModal);
    let LevelWiseIncidentsDivTop = document.getElementById('LevelWiseIncidentsDivTop');
    let closeLevelWiseIncidentsTop = document.getElementById('closeLevelWiseIncidentsTop');
    function InfoModal(event) {
      event.stopPropagation();
      LevelWiseIncidentsDivTop.style.display = "block";
      if (resfunPyramidTop.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunCarbonEmissionScope2.info.formula);
        let LevelWiseIncidentsInfoTop = document.getElementById("LevelWiseIncidentsInfoTop");
        let LevelWiseIncidentsInfoTop2 = document.getElementById("LevelWiseIncidentsInfoTop2");

        LevelWiseIncidentsInfoTop.innerHTML = "<b>Info : </b>" + resfunPyramidTop.info.info;
        LevelWiseIncidentsInfoTop2.innerHTML = "<b>Incident level :</b> " + resfunPyramidTop.info.incident_level;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!LevelWiseIncidentsDivTop.contains(event.target) && event.target.id !== 'infoLevelWiseIncidentsIconTop') {
        closeLevelWiseIncidentsDivTop();
      }
    });
    closeLevelWiseIncidentsTop.addEventListener("click", closeLevelWiseIncidentsDivTop);
    function closeLevelWiseIncidentsDivTop() {
      LevelWiseIncidentsDivTop.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    LevelWiseIncidentsDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    // refreshIconElementLevelWiseIncidents


    function restoreOriginal() {
      if (chartPyramidTop) {
        myChart.destroy();
        funPyramidTop()
      }
    }

    refreshIconElementLevelWiseIncidentsTop.addEventListener("click", restoreOriginal);


  };


  xhr_object.send();
}
// inventory
// function funIncidentII(type, firstDate, secondDate) {
//   let incidentSpan = document.getElementById("incidentSpan");
//   let loaderIncidentII = document.getElementById("loaderIncidentII");
//   let incidentIINoData = document.getElementById("incidentIINoData");
//   let incident_II_pie = document.getElementById("incident_II_pie");

//   // incident_II_pie.style.display ="none";
//   loaderIncidentII.style.display = "block";
//   incidentIINoData.style.display = "none";

//   let xhr_object = new XMLHttpRequest();

//   if (globalType == "daily") {
//     xhr_object.open(
//       "GET",
//       getIncidentII + idLink + "&date=" + globalDateFirst,
//       true
//     );
//     console.log("incidentII");
//     console.log(getIncidentII + idLink + "&date=" + globalDateFirst);
//   } else {
//     xhr_object.open(
//       "GET",
//       getIncidentII +
//       idLink +
//       "&from_date=" +
//       globalDateFirst +
//       "&to_date=" +
//       globalDateSecond,
//       true
//     );
//     console.log(
//       getIncidentII +
//       idLink +
//       "&from_date=" +
//       globalDateFirst +
//       "&to_date=" +
//       globalDateSecond
//     );
//   }

//   xhr_object.onload = function () {
//     resfunIncidentII = JSON.parse(this.responseText);

//     console.log("Incident II- ");
//     console.log(resfunIncidentII.response);

//     let sum = 0;

//     let valueName = [];
//     let valueY = [];

//     let arrayPie = [];

//     for (let i = 0; i < resfunIncidentII.response.length; i++) {
//       valueName[i] = resfunIncidentII.response[i].name;
//       valueY[i] = resfunIncidentII.response[i].y;
//     }

//     for (let i = 0; i < valueName.length; i++) {
//       if (valueY[i] == null) {
//         arrayPie.push({ name: valueName[i], y: 0 });
//       } else {
//         arrayPie.push({
//           name: valueName[i],
//           y: valueY[i],
//         });
//       }
//     }

//     let incidentChartColors = [
//       "#F8EA94",
//       "#A1CD7A",
//       "#F2C06C",
//       "#D44B52",
//       "#F69380",
//       "#FF933C",
//       "#FFBD3C",
//       "#B4FF3C",
//       "#4BFF3C",
//       "#F69380",
//       "#3CFF93",
//       "#3CDEFF",
//       "#3C4BFF",
//       "#BD3CFF",
//       "#FF3CFC",
//       "#5F8900",
//       "#008913",
//       "#007C89",
//       "#280089",
//       "#890069",
//     ];

//     // let legendList = "";
//     // for (let i = 0; i < valueName.length; i++) {
//     //   if (valueName[i] != null) {
//     //     legendList +=
//     //       '<i class="bi  bi-circle-fill " style="color:' +
//     //       incidentChartColors[i] +
//     //       ';"></i> ' +
//     //       valueName[i] +
//     //       "-" +
//     //       valueY[i];
//     //     "<br/>" + "";
//     //   }
//     // }
//     // incidentSpan.innerHTML = legendList;

//     let total = valueName + valueY;
//     const centerT = {
//       id: "centerT",
//       afterDatasetsDraw(chart, args, options) {
//         const {
//           ctx,
//           chartArea: { left, right, top, bottom, width, height },
//         } = chart;
//         ctx.save();

//         ctx.font = "bolder 18px Arial";
//         ctx.fillStyle = "rgba(0, 0, 0, 1)";
//         ctx.textAlign = "center";
//         ctx.fillText("Total: " + total, width, height);
//       },
//     };
//     new Chart(incident_II_pie, {
//       type: "pie",
//       data: {
//         labels: valueName,
//         datasets: [
//           {
//             label: "Incident Pyramid",
//             data: valueY,
//             backgroundColor: incidentChartColors,
//             // resfunIncidentII.values,
//             radius: "80%",
//             borderWidth: 1,
//           },
//         ],
//       },
//       options: {
//         indexAxis: "y",
//         responsive: true,
//         maintainAspectRatio: false,
//         plugins: {
//           datalabels: {
//             color: "#ffffff",
//             font: {
//               size: "14",
//               weight: "bold",
//             },
//           },
//           legend: {
//             display: true,
//             position: "bottom",
//           },
//         },
//       },
//       plugins: [ChartDataLabels],
//     });
//     // console.log("arraypie")
//     // console.log(arrayPie);

//     // let sum = 0;

//     // if (Charts !=null){
//     //     Charts.destory();
//     // }

//     for (let i = 0; i < valueY.length; i += 1) {
//       if (valueY[i] == null) {
//         let a = 0;
//         sum += a;
//       } else {
//         sum += valueY[i];
//       }
//     }
//     loaderIncidentII.style.display = "none";
//     if (sum == 0) {
//       incidentIINoData.style.display = "block";
//       incident_II_pie.style.display = "none";
//     } else {
//       incidentIINoData.style.display = "none";
//       incident_II_pie.style.display = "block";
//     }
//   };
//   xhr_object.send();
// }

function funRootCause(type, firstDate, secondDate) {
  let incidentRoot = document.getElementById("incidentRoot");
  let loaderRootCause = document.getElementById("loaderRootCause");
  let rootCauseNoData = document.getElementById("rootCauseNoData");
  let root_Cause_pie = document.getElementById("root_Cause_pie");

  // root_Cause_pie.style.display = "none";
  // loaderRootCause.style.display = "block";
  // rootCauseNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getRootCause + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log("incidentII");
    console.log(getRootCause + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getRootCause +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getRootCause +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunRootCause = JSON.parse(this.responseText);

    console.log("RootCause ");
    console.log(resfunRootCause);

    let sum = 0;

    let valueN = [];
    let valueYa = [];

    let arrayP = [];

    for (let i = 0; i < resfunRootCause.response.length; i++) {
      valueN[i] = resfunRootCause.response[i].name;
      valueYa[i] = resfunRootCause.response[i].y;
    }

    for (let i = 0; i < valueN.length; i++) {
      if (valueYa[i] == null) {
        arrayP.push({ name: valueN[i], y: 0 });
      } else {
        arrayP.push({
          name: valueN[i],
          y: valueYa[i],
        });
      }
    }

    let incidentRootColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];

    // let legendList = "";
    // for (let i = 0; i < valueN.length; i++) {
    //   if (valueN[i] != null) {
    //     legendList +=
    //       '<i class="bi  bi-circle-fill " style="color:' +
    //       incidentRootColors[i] +
    //       ';"></i> ' +
    //       valueN[i] +
    //       "-" +
    //       valueYa[i];
    //     "<br/>" + "<br/>";
    //   }
    // }
    // incidentRoot.innerHTML = legendList;

    let total = valueN + valueYa;
    const centerTexts = {
      id: "centerTexts",
      afterDatasetsDraw(chart, args, options) {
        const {
          ctx,
          chartArea: { left, right, top, bottom, width, height },
        } = chart;
        ctx.save();

        ctx.font = "bolder 18px Arial";
        ctx.fillStyle = "rgba(0, 0, 0, 1)";
        ctx.textAlign = "center";
        ctx.fillText("Total: " + total, width, height);
      },
    };
    originalChartConfigroot = {
      type: "pie",

      data: {
        labels: valueN,
        datasets: [
          {
            label: "Incident Root Cause",
            data: valueYa,
            backgroundColor: incidentRootColors,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        indexAxis: "y",
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(root_Cause_pie, originalChartConfigroot)
    // console.log("arraypie");
    // console.log(arrayP);

    for (let i = 0; i < valueYa.length; i += 1) {
      if (valueYa[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueYa[i];
      }
    }

    loaderRootCause.style.display = "none";
    if (sum == 0) {
      rootCauseNoData.style.display = "block";
      root_Cause_pie.style.display = "none";
    } else {
      rootCauseNoData.style.display = "none";
      root_Cause_pie.style.display = "block";
    }

    // refreshIconElement_primaryRoot


    function restoreOriginalChartRoot() {

      if (originalChartConfigroot) {
        myChart.destroy();
        funRootCause();
      }
    }

    refreshIconElement_primaryRoot.addEventListener("click", restoreOriginalChartRoot);


  };
  xhr_object.send();
}




function funBodyInjuryChart() {

  let bodyInjuryChart = document.getElementById("bodyInjuryChart");
  let loaderBodyInjuryChart = document.getElementById("loaderBodyInjuryChart");
  let bodyInjuryChartNoData = document.getElementById("bodyInjuryChartNoData");

  // root_Cause_pie.style.display = "none";
  // loaderBodyInjuryChart.style.display = "block";
  // bodyInjuryChartNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getBodyInjuryChart
      + idLink + "&date=" + globalDateFirst,
      true
    );
    // console.log("incidentII");
    // console.log(getRootCause + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getBodyInjuryChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getBodyInjuryChart +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );

  }

  xhr_object.onload = function () {
    resBodyInjuryChart = JSON.parse(this.responseText);

    console.log("Injury Chat =++++++++++++++++++++++========================+++++++++++++++++++++++++++++++++++++++++++++++++++++ ");
    console.log(resBodyInjuryChart);
    console.log(resBodyInjuryChart.response)

    bodyInjuryChart.src = resBodyInjuryChart.response;
    console.log("------hey");
    console.log(bodyInjuryChart);
    console.log(bodyInjuryChart.src);

    loaderBodyInjuryChart.style.display = "none";
    bodyInjuryChartNoData.style.display = "none";
    bodyInjuryChart.style.display = "block";
    // infoBodyInjuryChartIcon,BodyInjuryChartDiv,closeBodyInjuryChart,BodyInjuryChartInfo
    infoBodyInjuryChartIcon.addEventListener("click", InfoModal);
    let BodyInjuryChartDiv = document.getElementById('BodyInjuryChartDiv');
    let closeBodyInjuryChart = document.getElementById('closeBodyInjuryChart');

    function InfoModal(event) {
      event.stopPropagation();
      BodyInjuryChartDiv.style.display = "block";
      if (resfunInventoryReportGreen.info) {
        let BodyInjuryChartInfo = document.getElementById("BodyInjuryChartInfo");

        BodyInjuryChartInfo.innerHTML = "<b>Info :</b> " + resfunInventoryReportGreen.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!BodyInjuryChartDiv.contains(event.target) && event.target.id !== 'infoBodyInjuryChartIcon') {
        closeBodyInjuryChartDiv();
      }
    });

    closeBodyInjuryChart.addEventListener("click", closeBodyInjuryChartDiv);

    function closeBodyInjuryChartDiv() {
      BodyInjuryChartDiv.style.display = "none";
    }

    BodyInjuryChartDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_bodyInjury

    refreshIconElement_bodyInjury.addEventListener("click", restoreOriginalChartBodyInjury);

    function restoreOriginalChartBodyInjury() {
      loaderBodyInjuryChart.style.display = "block";
      bodyInjuryChart.style.display = "none";
      funBodyInjuryChart();
    }


  };
  xhr_object.send();
}



// Dropdown------------------------------------------------

// -----------------
// building_id not site_id is used in charts
// loaderTotalVisitors,totalVisitorsNoData,total-visitors
function funTotalVisitors() {
  let totalVisitorsNoData = document.getElementById("totalVisitorsNoData");
  let total_visitors = document.getElementById("total-visitors");
  let loaderTotalVisitors = document.getElementById("loaderTotalVisitors");
  let dt2_tv = document.getElementById("dt2_tv");

  // let dp = document.getElementById("drop");

  let xhr_object_dropdown = new XMLHttpRequest();

  // xhr_object_dropdown.open("GET", getTotalVisitorsDorpdown + idLink, true);

  // xhr_object_dropdown.onload = function () {
  //   resfunTotalVisitorsDropdown = JSON.parse(this.responseText);
  //   let siteoption = `<option value="Select Building" selected>Select Building</option>`;
  //   var index = 0;
  //   let responseBuildings = resfunTotalVisitorsDropdown.response;
  //   console.log(responseBuildings);
  //   for (let x in responseBuildings) {
  //     index += 1;
  //     siteoption +=
  //       `<option value="` +
  //       responseBuildings[x].id +
  //       `">` +
  //       responseBuildings[x].name +
  //       `</option>`;
  //   }
  //   dp.innerHTML= siteoption;

  // xhr_object_dropdown.send();

  // loaderTotalVisitors.style.display = "none";
  // totalVisitorsNoData.style.display = "block";

  // dp.onchange = function () {
  //   globalVisitorBuildingId = dp.value;
  //   console.log(dp.value);
  //   if (globalType == "daily") {
  //     dt2_tv.innerHTML = "Total Visitors " + globalDateFirst;
  //   } else {
  //     dt2_tv.innerHTML =
  //       "Total Visitors " + globalDateFirst + " to " + globalDateSecond;
  //   }

  //   loaderTotalVisitors.style.display = "block";
  //   totalVisitorsNoData.style.display = "none";

  // let xhr_object = new XMLHttpRequest();

  // if (globalType == "daily") {
  //   xhr_object.open(
  //     "GET",
  //     getTotalVisitors +
  //       "?building_id=" +
  //       dp.value +
  //       "&date=" +
  //       globalDateFirst,
  //     true
  //   );
  //   console.log(" get Total Visitor");
  //   console.log(
  //     getTotalVisitors +
  //       "?building_id=" +
  //       dp.value +
  //       "&date=" +
  //       globalDateFirst
  //   );
  // } else {
  //   xhr_object.open(
  //     "GET",
  //     getTotalVisitors +
  //       "?building_id=" +
  //       dp.value +
  //       "&from_date=" +
  //       globalDateFirst +
  //       "&to_date=" +
  //       globalDateSecond,
  //     true
  //   );
  //   console.log(
  //     getTotalVisitors +
  //       "?building_id=" +
  //       dp.value +
  //       "&from_date=" +
  //       globalDateFirst +
  //       "&to_date=" +
  //       globalDateSecond
  //   );
  // }
};




// xhr_object.onload = function () {
//   resfunTotalVisitors = JSON.parse(this.responseText);

//   console.log("Total Visitors  - ");
//   console.log(resfunTotalVisitors);

//   // Added now
//   new Chart(total_visitors, {
//     type: "bar",
//     data: {
//       labels: Object.keys(resfunTotalVisitors.response),
//       datasets: [
//         {
//           label: "Visitors",
//           backgroundColor: [
//             "#77216F",
//             "#01C875",
//             "#E2445B",
//             "#E95420",
//             "#A1CD7A",
//           ],
//           data: Object.values(resfunTotalVisitors.response),
//           borderWidth: 1,
//         },
//       ],
//     },
//     options: {
//       responsive: true,
//       interaction: {
//         intersect: false,
//       },
//       scales: {
//         x: {
//           stacked: true,
//         },
//         y: {
//           stacked: true,
//         },
//       },
//       maintainAspectRatio: false,
//       scales: {
//         x: {
//           ticks: {
//             callback: function (value) {
//               return this.getLabelForValue(value).substr(0, 15);
//             },
//           },
//         },
//       },
//       plugins: {
//         datalabels: {
//           color: "#000000",
//           anchor: "end",
//           align: "end",
//           offset: -6,
//           font: {
//             size: "10",
//             weight: "bold",
//           },
//         },
//         legend: {
//           display: true,
//           position: "no",
//         },
//       },
//     },
//     plugins: [ChartDataLabels],
//   });

//   loaderTotalVisitors.style.display = "none";

//   let sum = 0;
//   let resValues = Object.values(resfunTotalVisitors.response);

//   for (let i = 0; i < resValues.length; i += 1) {
//     sum = resValues[i] + sum;
//   }

//   // if (sum == 0) {
//   //   totalVisitorsNoData.style.display = "block";
//   //   total_visitors.style.display = "none";
//   // } else {
//   totalVisitorsNoData.style.display = "none";
//   total_visitors.style.display = "block";
//   // }
// };

// xhr_object.send();





// let clickedGoodsIn = true;




function funGoodsIn() {
  let goodsInNoData = document.getElementById("goodsInNoData");
  let goods_in = document.getElementById("goods_in");
  let loaderGoodsIn = document.getElementById("loaderGoodsIn");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getGoodsIn + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log("getGoodsIn");
    console.log(getGoodsIn + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getGoodsIn +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunGoodsIn = JSON.parse(this.responseText);

    let valueGoodsInName = Object.keys(resfunGoodsIn.response);
    let valueGoodsInY = Object.values(resfunGoodsIn.response);

    console.log("Goods in- ");
    console.log(resfunGoodsIn);
    // console.log(valueGoodsInName);

    originalChartGoodsIn = {
      type: "bar",
      data: {
        labels: valueGoodsInName,
        datasets: [
          {
            label: "Goods In",
            // `data: Object.values(resfunGoodsIn.response),`
            // axis: "y",
            // fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: valueGoodsInY,
            borderWidth: 1,
          },
        ],
      },
      options: {
        // indexAxis: "y",
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#ffffff",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(goods_in, originalChartGoodsIn)
    // alert("my first chart");
    loaderGoodsIn.style.display = "none";
    // goodsInNoData.style.display = "none";
    // goods_in.style.display = "block";

    // alert("going to drill down");


    // let sum = 0;
    // let resValue = Object.values(resfunGoodsIn.response);

    // for (let i = 0; i < resValue.length; i += 1) {
    //   sum = resValue[i] + sum;
    // }
    // if (sum == 0) {
    //   goodsInNoData.style.display = "block";
    //   goods_in.style.display = "none";
    // } else {
    //   goodsInNoData.style.display = "none";
    //   goods_in.style.display = "block";
    // }
    // infoGoodsInIcon,GoodsInDiv,closeGoodsIn,GoodsInInfo

    infoGoodsInIcon.addEventListener("click", InfoModal);
    let GoodsInDiv = document.getElementById('GoodsInDiv');
    let closeGoodsIn = document.getElementById('closeGoodsIn');

    function InfoModal(event) {
      event.stopPropagation();
      GoodsInDiv.style.display = "block";
      if (resfunGoodsIn.info) {
        let GoodsInInfo = document.getElementById("GoodsInInfo");

        GoodsInInfo.innerHTML = "<b>Info :</b> " + resfunGoodsIn.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!GoodsInDiv.contains(event.target) && event.target.id !== 'infoGoodsInIcon') {
        closeGoodsInDiv();
      }
    });

    closeGoodsIn.addEventListener("click", closeGoodsInDiv);

    function closeGoodsInDiv() {
      GoodsInDiv.style.display = "none";
    }

    GoodsInDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let GoodIndrillDownLevel = 1;
    let clickedGoodsIn = true;

    // alert("in the way to drill down");

    // if (!funGoodsIn.initialized) {
    goods_in.onclick = function (event) {
      console.log("-------------------i am here---------------------------------")
      if (clickedGoodsIn == true) {

        const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

        if (points.length) {
          firstPoint = points[0];
          const label = myChart.data.labels[firstPoint.index];
          const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

          console.log(`Clicked on ${label} with value ${value}`);
          selectedlabelValue = label;
          document.getElementById("listItemLabelGoodsIn").textContent = `Ticket: ${label}`;
          myChart.update();
          // document.getElementById("listItemValue").textContent = `Value: ${value}`;

          // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
          // dropdown.show();

          const dropdown = (document.getElementById("dataDropdown_goodsIn"));
          dropdown.style.display = "block";


        }

        dataDropdown_goodsIn.addEventListener("click", function (event) {

          // if (selectedOption === "Tower" || "Flat_Type" || "Status" || "Created_By" || "Proactive/Reactive" || "Category" || "Sub_Category" || "Assign_To" || "Priority" || "Ticket_Type" || "Related_To" && currentChartType === "bar") {
          if (event.target.id != "closeDropdown") {
            if (GoodIndrillDownLevel === 1) {
              selectedOption = event.target.id;
              firstPoint = points[0];
              labelname = myChart.data.labels[firstPoint.index];
              backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
              console.log(selectedOption);




              document.getElementById("firstDrillDownGoodsIn").style.display = "block";
              document.getElementById("firstDrillDownGoodsIn").textContent = ` - ${selectedOption}`

              let xhr_object = new XMLHttpRequest();
              let apiURL;

              apiURL =
                getGoodsInDrill +
                idLink +
                "&first_drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&sec_drill_down_on=" +
                "" +
                "&sec_drilldown_by=" +
                "" +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond;

              console.log("TicketCategoryDrill  1");
              console.log(apiURL);
              xhr_object.open("GET", apiURL, true);



              downloadGoodInLink = ip + "fm-excel-download/get-goods-inward-drill-down-excel/" + idLink +
                "&first_drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&sec_drilldown_by=" +
                "" +
                "&sec_drill_down_on=" +
                "" +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond;


              xhr_object.onload = function () {
                resfunGoodsInDrill = JSON.parse(this.responseText);
                console.log("resfunGoodsInDrill Drill Down -1 ");
                console.log(resfunGoodsInDrill);


                const labels = resfunGoodsInDrill.response.map(item => item[1]);
                const data = resfunGoodsInDrill.response.map(item => item[0]);

                myChart.destroy();
                myChart = new Chart(goods_in, {
                  type: "bar",
                  data: {
                    labels: labels,
                    datasets: [{
                      label: "Goods In",
                      data: data,
                      backgroundColor: ["#e2445b"],
                    }]
                  },
                  options: {
                    responsive: true,
                    interaction: {
                      intersect: false,
                    },
                    scales: {
                      x: {
                        title: {
                          display: true,
                        }

                      },
                      y: {
                        stacked: true,
                      },
                    },
                    maintainAspectRatio: false,
                    plugins: {
                      datalabels: {
                        color: "#000000",
                        anchor: "end",
                        align: "end",
                        offset: -6,
                        font: {
                          size: "10",
                          weight: "bold",
                        },
                        formatter: function (value, context) {
                          // Hide label if value is zero
                          return value === 0 ? '' : value;
                        }
                      },
                      legend: {
                        display: false,
                        position: "no",
                      },
                    },
                  },
                  plugins: [ChartDataLabels],
                });

              }

              xhr_object.send();

              GoodIndrillDownLevel = 2;
            } else if (GoodIndrillDownLevel === 2) {

              // alert(selectedOption);
              // alert(labelname);
              // alert(selectedlabelValue);
              const firstPoint = points[0];
              // alert(firstPoint.index);
              const selectedSecondOption = event.target.id;
              const labelSecond = myChart.data.labels[firstPoint.index];
              const labelnameSecond = labelSecond;
              backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
              console.log(selectedSecondOption);
              console.log(selectedlabelValue);
              // console.log(backgroundColors);

              document.getElementById("firstDrillDownGoodsIn").style.display = "none";
              document.getElementById("secondDrilldownGoodsIn").style.display = "block";
              document.getElementById("secondDrilldownGoodsIn").textContent = ` - ${selectedSecondOption}`

              apiURL =
                getGoodsInDrill +
                idLink +
                "&first_drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&sec_drilldown_by=" +
                selectedSecondOption +
                "&sec_drill_down_on=" +
                selectedlabelValue +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond;
              // alert("second drill down api");
              console.log(apiURL);

              xhr_object.open("GET", apiURL, true);

              downloadGoodInLink = ip + "fm-excel-download/get-goods-inward-drill-down-excel/" +
                idLink +
                "&first_drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&sec_drilldown_by=" +
                selectedSecondOption +
                "&sec_drill_down_on=" +
                selectedlabelValue +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond;


              xhr_object.onload = function () {
                resfunGoodsInDrill = JSON.parse(this.responseText);
                console.log("resfunGoodsInDrill Drill Down -1 ");
                console.log(resfunGoodsInDrill);


                const labels = resfunGoodsInDrill.response.map(item => item[1]);
                const data = resfunGoodsInDrill.response.map(item => item[0]);

                myChart.destroy();
                myChart = new Chart(goods_in, {
                  type: "bar",
                  data: {
                    labels: labels,
                    datasets: [{
                      label: "Goods In",
                      data: data,
                      backgroundColor: ["#e2445b"],
                    }]
                  },
                  options: {
                    responsive: true,
                    interaction: {
                      intersect: false,
                    },
                    maintainAspectRatio: false,
                    scales: {
                      x: {
                        title: {
                          display: true,
                        }
                      },
                    },
                    plugins: {
                      datalabels: {
                        color: "#000000",
                        anchor: "end",
                        align: "end",
                        offset: -6,
                        font: {
                          size: "10",
                          weight: "bold",
                        },
                        formatter: function (value, context) {
                          // Hide label if value is zero
                          return value === 0 ? '' : value;
                        }
                      },
                      legend: {
                        display: false,
                        position: "no",
                      },
                    },
                  },
                  plugins: [ChartDataLabels],
                });

              }
              xhr_object.send();
              GoodIndrillDownLevel = 3;
              clickedGoodsIn = false;
              return;
            }
          }
          else {
            if (GoodIndrillDownLevel === 1) {
              restoreOriginalChart();
            }
          }

          dataDropdown_goodsIn.style.display = "none";


        });

      } else if (clickedGoodsIn == false) {
        alert("You have reached the maximum drill-down level.");
      }


    };
    // }
    function restoreOriginalChart() {
      if (originalChartGoodsIn) {
        myChart.destroy(); // Destroy the current chart
        funGoodsIn();
        clickedGoodsIn = true;

        document.getElementById("firstDrillDownGoodsIn").style.display = "none";
        document.getElementById("secondDrilldownGoodsIn").style.display = "none";
      }
    }

    refreshIconElement_goodsIn.addEventListener("click", restoreOriginalChart);




  };
  xhr_object.send();
}


let clickedGoodsOut = true;
function funGoodsOut() {
  let goodsOutNoData = document.getElementById("goodsOutNoData");
  let goods_out = document.getElementById("goods_out");
  let loaderGoodsOut = document.getElementById("loaderGoodsOut");
  // let dt2_go = document.getElementById("dt2_go");

  // loaderGoodsOut.style.display = "none";
  // goods_out.style.display = "block";
  // goodsOutNoData.style.display = "none";

  // if (globalType == "daily") {
  //   dt2_go.innerHTML = " Goods Outward " + globalDateFirst;
  // } else {
  //   dt2_go.innerHTML =
  //     " Goods Outward " + globalDateFirst + " to " + globalDateSecond;
  // }

  // loaderGoodsOut.style.display = "block";
  // goodsOutNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getGoodsOut + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log("getGoodsOut");
    console.log(getGoodsOut + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getGoodsOut +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunGoodsOut = JSON.parse(this.responseText);

    // let valueGoodsOutName = Object.keys(resfunGoodsOut.response);
    // let valueGoodsOutY = Object.values(resfunGoodsOut.response);
    console.log("Goods Out- ");
    console.log(resfunGoodsOut);
    // console.log(valueGoodsOutName);

    originalChartGoodsOut = {
      type: "bar",
      data: {
        labels: Object.keys(resfunGoodsOut.response),
        datasets: [
          {
            // label:"Incident",
            data: Object.values(resfunGoodsOut.response),
            axis: "y",
            fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],

            borderWidth: 1,
          },
        ],
      },
      options: {
        // indexAxis: "y",
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#ffffff",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(goods_out, originalChartGoodsOut)

    loaderGoodsOut.style.display = "none";

    let sum = 0;
    let resValueOut = Object.values(resfunGoodsOut.response);
    for (let i = 0; i < resValueOut.length; i += 1) {
      sum = resValueOut[i] + sum;
    }
    if (sum == 0) {
      goodsOutNoData.style.display = "block";
      goods_out.style.display = "none";
    } else {
      goodsOutNoData.style.display = "none";
      goods_out.style.display = "block";
    }

    // infoGoodsOutIcon,GoodsOutDiv,closeGoodsOut,GoodsOutInfo

    infoGoodsOutIcon.addEventListener("click", InfoModal);
    let GoodsOutDiv = document.getElementById('GoodsOutDiv');
    let closeGoodsOut = document.getElementById('closeGoodsOut');

    function InfoModal(event) {
      event.stopPropagation();
      GoodsOutDiv.style.display = "block";
      if (resfunGoodsOut.info) {
        let GoodsOutInfo = document.getElementById("GoodsOutInfo");

        GoodsOutInfo.innerHTML = "<b>Info :</b> " + resfunGoodsOut.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!GoodsOutDiv.contains(event.target) && event.target.id !== 'infoGoodsOutIcon') {
        closeGoodsOutDiv();
      }
    });

    closeGoodsOut.addEventListener("click", closeGoodsOutDiv);

    function closeGoodsOutDiv() {
      GoodsOutDiv.style.display = "none";
    }

    GoodsOutDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // dt2_go // showGoodsOut(),loaderGoodsOut,goodsOutNoData,goods-out
    // refreshIconElement_goodsOut  dataDropdown_goodsOut listItemLabelGoodsOut clickedGoodsOut  originalChartGoodsOut
    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let GoodOutdrillDownLevel = 1;
    let clickedGoodsOut = true;
    if (!funGoodsOut.initialized) {
      goods_out.onclick = function (event) {

        if (clickedGoodsOut == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelGoodsOut").textContent = `Ticket: ${label}`;
            myChart.update();
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown_goodsOut"));
            dropdown.style.display = "block";


          }

          dataDropdown_goodsOut.addEventListener("click", function (event) {

            // if (selectedOption === "Tower" || "Flat_Type" || "Status" || "Created_By" || "Proactive/Reactive" || "Category" || "Sub_Category" || "Assign_To" || "Priority" || "Ticket_Type" || "Related_To" && currentChartType === "bar") {
            if (event.target.id != "closeDropdown") {
              if (GoodOutdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);





                document.getElementById("firstDrillDownGoodsOut").style.display = "block";
                document.getElementById("firstDrillDownGoodsOut").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getGoodsOutDrill +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  "" +
                  "&sec_drill_down_on=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log("TicketCategoryDrill  1");
                console.log(apiURL);
                xhr_object.open("GET", apiURL, true);



                downloadGoodOutLink = ip + "fm-excel-download/get-goods-outward-drill-down-excel/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  "" +
                  "&sec_drill_down_on=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resfunGoodsOutDrill = JSON.parse(this.responseText);
                  console.log("resfunGoodsOutDrill Drill Down -1 ");
                  console.log(resfunGoodsOutDrill);


                  const labels = resfunGoodsOutDrill.response.map(item => item[1]);
                  const data = resfunGoodsOutDrill.response.map(item => item[0]);

                  myChart.destroy();
                  myChart = new Chart(goods_out, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Goods Out",
                        data: data,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: false,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                GoodOutdrillDownLevel = 2;
              } else if (GoodOutdrillDownLevel === 2) {

                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownGoodsOut").style.display = "none";
                document.getElementById("secondDrilldownGoodsOut").style.display = "block";
                document.getElementById("secondDrilldownGoodsOut").textContent = ` - ${selectedSecondOption}`

                apiURL =
                  getGoodsOutDrill +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadGoodOutLink = ip + "fm-excel-download/get-goods-outward-drill-down-excel/" +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resfunGoodsOutDrill = JSON.parse(this.responseText);
                  console.log("resfunGoodsOutDrill Drill Down -1 ");
                  console.log(resfunGoodsOutDrill);


                  const labels = resfunGoodsOutDrill.response.map(item => item[1]);
                  const data = resfunGoodsOutDrill.response.map(item => item[0]);

                  myChart.destroy();
                  myChart = new Chart(goods_out, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Goods Out",
                        data: data,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: false,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                clickedGoodsOut = false;
                GoodOutdrillDownLevel = 3;
                return;
              }
            }
            else {
              if (GoodOutdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }
            dataDropdown_goodsOut.style.display = "none";

          });

        } else if (clickedGoodsOut == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartGoodsOut) {
        myChart.destroy(); // Destroy the current chart
        funGoodsOut();
        clickedGoodsOut = true;
        // GoodOutdrillDownLevel = 1;


        document.getElementById("firstDrillDownGoodsOut").style.display = "none";
        document.getElementById("secondDrilldownGoodsOut").style.display = "none";
      }
    }

    refreshIconElement_goodsOut.addEventListener("click", restoreOriginalChart);



  };
  xhr_object.send();
}

function funCardTotalRegisteredUsers() {
  let cardRegisterdUser = document.getElementById("cardRegisterdUser");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getTotalusers + idLink, true);

  xhr_object.onload = function () {
    totalUsrers = JSON.parse(this.responseText);
    console.log("Asset Total - ");
    console.log(totalUsrers);
    cardRegisterdUser.innerHTML = totalUsrers.response + "";

    const infoTotalRegisteredIcon = document.getElementById('infoTotalRegisteredIcon');
    infoTotalRegisteredIcon.addEventListener("click", InfoModal);

    const TotalRegisteredDiv = document.getElementById('TotalRegisteredDiv');
    const closeTotalRegistered = document.getElementById('closeTotalRegistered');

    function InfoModal(event) {
      event.stopPropagation();
      TotalRegisteredDiv.style.display = "block";

      if (totalUsrers.info) {
        console.log(totalUsrers.info);

        const TotalRegisteredInfo = document.getElementById("TotalRegisteredInfo");
        const TotalRegisteredInfo2 = document.getElementById("TotalRegisteredInfo2");

        TotalRegisteredInfo.innerHTML = "<b>Info :</b> " + totalUsrers.info.info;
        TotalRegisteredInfo2.innerHTML = "<b>Formula :</b> " + totalUsrers.info.formula;

      } else {
        console.error("Info not found in response.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalRegisteredDiv.contains(event.target) && event.target.id !== 'infoTotalRegisteredIcon') {
        closeTotalRegisteredDiv();
      }
    });

    closeTotalRegistered.addEventListener("click", closeTotalRegisteredDiv);

    function closeTotalRegisteredDiv() {
      TotalRegisteredDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalRegisteredDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function funCardTotalDownloads() {
  let cardDownloads = document.getElementById("cardDownloads");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getTotalDownloads + idLink, true);
  console.log("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");
  console.log(getTotalDownloads + idLink);
  xhr_object.onload = function () {
    restotalDownloads = JSON.parse(this.responseText);
    console.log("Asset Dowenload adata - ");
    console.log(totalDownloads);
    cardDownloads.innerHTML = restotalDownloads.response + "";
  };

  const infoTotalDownloadsIcon = document.getElementById('infoTotalDownloadsIcon');
  if (infoTotalDownloadsIcon) {
    infoTotalDownloadsIcon.addEventListener("click", InfoModal);
  }

  const TotalDownloadsDiv = document.getElementById('TotalDownloadsDiv');
  const closeTotalDownloads = document.getElementById('closeTotalDownloads');

  function InfoModal(event) {
    event.stopPropagation();
    TotalDownloadsDiv.style.display = "block";

    if (restotalDownloads.info) {
      console.log(restotalDownloads.info);

      const TotalDownloadsInfo = document.getElementById("TotalDownloadsInfo");
      const TotalDownloadsInfo2 = document.getElementById("TotalDownloadsInfo2");

      TotalDownloadsInfo.innerHTML = "<b>Info :</b> " + restotalDownloads.info.info;
      TotalDownloadsInfo2.innerHTML = "<b>Formula :</b> " + restotalDownloads.info.formula;

    } else {
      console.error("Info not found in response.");
    }
  }

  document.addEventListener("click", function (event) {
    if (!TotalDownloadsDiv.contains(event.target) && event.target.id !== 'infoTotalDownloadsIcon') {
      closeTotalDownloadsDiv();
    }
  });


  if (closeTotalDownloads) {
    closeTotalDownloads.addEventListener("click", closeTotalDownloadsDiv);
  }



  function closeTotalDownloadsDiv() {
    TotalDownloadsDiv.style.display = "none";
  }

  if (TotalDownloadsDiv) {
    TotalDownloadsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  }


  xhr_object.send();
}

// Zonewise
let clickedSiteWiseEscalation = true;
function funSiteWiseEscalation() {
  let SiteWiseEscalationNoData = document.getElementById("SiteWiseEscalationNoData");
  let SiteWiseEscalation = document.getElementById("SiteWiseEscalation");
  let loaderSiteWiseEscalation = document.getElementById("loaderSiteWiseEscalation");
  // let occupancy = document.getElementById("occupancy");

  // loaderSiteWiseEscalation.style.display = "block";
  // SiteWiseEscalationNoData.style.display = "none";

  // if (globalType == "daily") {
  //   occupancy.innerHTML = "Chart for " + globalDateFirst;
  // } else {
  //   occupancy.innerHTML =
  //     "Chart for " + globalDateFirst + " to " + globalDateSecond;
  // }


  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getSiteWiseEscalation + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getSiteWiseEscalation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
    console.log(
      getSiteWiseEscalation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunSiteWiseEscalation = JSON.parse(this.responseText);
    console.log("Site Wise Escalation - ");
    console.log(resfunSiteWiseEscalation);

    let xLabelsArray = Object.keys(resfunSiteWiseEscalation.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }
    // Added now
    originalChartConfigZoneWise = {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Site Wise",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunSiteWiseEscalation.response),
            borderWidth: 1,

          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(SiteWiseEscalation, originalChartConfigZoneWise)

    loaderSiteWiseEscalation.style.display = "none";

    if (Object.keys(resfunSiteWiseEscalation.response).length == 0) {
      SiteWiseEscalationNoData.style.display = "block";
      SiteWiseEscalation.style.display = "none";
    } else {
      SiteWiseEscalationNoData.style.display = "none";
      SiteWiseEscalation.style.display = "block";
    }


    infoZoneWiseEscalationIcon.addEventListener("click", InfoModal);
    let ZoneWiseEscalationDiv = document.getElementById('ZoneWiseEscalationDiv');
    let closeZoneWiseEscalation = document.getElementById('closeZoneWiseEscalation');
    function InfoModal(event) {
      event.stopPropagation();
      ZoneWiseEscalationDiv.style.display = "block";
      if (resfunSiteWiseEscalation.info) {
        let ZoneWiseEscalationInfo = document.getElementById("ZoneWiseEscalationInfo");
        let ZoneWiseEscalationInfo2 = document.getElementById("ZoneWiseEscalationInfo2");


        ZoneWiseEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunSiteWiseEscalation.info.formula;
        ZoneWiseEscalationInfo2.innerHTML = "<b>Info  : </b>" + resfunSiteWiseEscalation.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!ZoneWiseEscalationDiv.contains(event.target) && event.target.id !== 'infoZoneWiseEscalationIcon') {
        closeZoneWiseEscalationtDiv();
      }
    });
    closeZoneWiseEscalation.addEventListener("click", closeZoneWiseEscalationtDiv);
    function closeZoneWiseEscalationtDiv() {
      ZoneWiseEscalationDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ZoneWiseEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElement_ZoneWise

    refreshIconElement_ZoneWise.addEventListener("click", restoreOriginalChartZoneWise);

    function restoreOriginalChartZoneWise() {
      if (originalChartConfigZoneWise) {
        myChart.destroy();
        loaderSiteWiseEscalation.style.display = "block";
        funSiteWiseEscalation();

      }
    }


  };


  xhr_object.send();
}

let clickedOpenCloseEscalation = true;
// let clickedOpenCloseEscalation = true;
function funOpenCloseEscalation() { // loaderOpenCloseEscalation,OpenCloseEscalationNoData,OpenCloseEscalation

  // let refreshIconElement_openClose = document.getElementById("refreshIconElement_openClose");

  let OpenCloseEscalationNoData = document.getElementById("OpenCloseEscalationNoData");
  let OpenCloseEscalation = document.getElementById("OpenCloseEscalation");
  let loaderOpenCloseEscalation = document.getElementById("loaderOpenCloseEscalation");
  // let dt1 = document.getElementById("dt1");


  // loaderOpenCloseEscalation.style.display = "block";
  // OpenCloseEscalationNoData.style.display = "none";

  // if (globalType == "daily") {
  //   dt1.innerHTML = "Tickets for " + globalDateFirst;
  // } else {
  //   dt1.innerHTML =
  //     "Tickets for " + globalDateFirst + " to " + globalDateSecond;
  // }
  // dataDropdown_openCloseSecond
  // const dataDropdown_openClose = document.getElementById("dataDropdown_openClose");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getOpenCloseEscalation + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getOpenCloseEscalation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getOpenCloseEscalation +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  xhr_object.onload = function () {
    resfunOpenCloseEscalation = JSON.parse(this.responseText);

    console.log("Open & Close Escalation - ");
    console.log(resfunOpenCloseEscalation);


    let total = resfunOpenCloseEscalation.response.Open + resfunOpenCloseEscalation.response.Closed;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // let xValues = [], yValues = [];

    // xValues = Object.keys(resfunChartTicket.response.open);
    // yValues = Object.values(resfunChartTicket.response);

    // Added Now
    originalChartOpenCloseEscalation = {
      type: "doughnut",
      data: {
        labels: ["Open", "Closed"],
        datasets: [
          {
            label: "Escalation",
            backgroundColor: ["#e2445b", "#01c875"],
            data: [
              // resfunChartTicket.response.total,
              resfunOpenCloseEscalation.response.Open,
              resfunOpenCloseEscalation.response.Closed
            ],
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels, centerText],
    };

    let myChart = new Chart(OpenCloseEscalation, originalChartOpenCloseEscalation)


    loaderOpenCloseEscalation.style.display = "none";


    if (resfunOpenCloseEscalation.response.length == 0) {
      OpenCloseEscalationNoData.style.display = "block";
      OpenCloseEscalation.style.display = "none";
    } else {
      // OpenCloseEscalationNoData.style.display = "none";
      OpenCloseEscalation.style.display = "block";
    }
    // if(resfunOpenCloseEscalation.response.length == 1) {
    //   OpenCloseEscalationNoData.style.display = "none";
    //   OpenCloseEscalation.style.display = "block";
    // }

    infoOpenCloseEscalationIcon.addEventListener("click", InfoModal);
    let OpenCloseEscalationDiv = document.getElementById('OpenCloseEscalationDiv');
    let closeOpenCloseEscalation = document.getElementById('closeOpenCloseEscalation');
    function InfoModal(event) {
      event.stopPropagation();
      OpenCloseEscalationDiv.style.display = "block";
      if (resfunOpenCloseEscalation.info) {
        let OpenCloseEscalationInfo = document.getElementById("OpenCloseEscalationInfo");
        let OpenCloseEscalationInfo2 = document.getElementById("OpenCloseEscalationInfo2");


        OpenCloseEscalationInfo.innerHTML = "<b>Formula :</b> " + resfunOpenCloseEscalation.info.formula;
        OpenCloseEscalationInfo2.innerHTML = "<b>Info  : </b>" + resfunOpenCloseEscalation.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!OpenCloseEscalationDiv.contains(event.target) && event.target.id !== 'infoOpenCloseEscalationIcon') {
        closeOpenCloseEscalationDiv();
      }
    });
    closeOpenCloseEscalation.addEventListener("click", closeOpenCloseEscalationDiv);
    function closeOpenCloseEscalationDiv() {
      OpenCloseEscalationDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OpenCloseEscalationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    // --------
    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let OpenCloseEscalationdrillDownLevel = 1;
    let clickedOpenCloseEscalation = true;

    // let OpenCloseEscalationdrillDownLevel = 1;

    if (!funOpenCloseEscalation.initialized) {
      OpenCloseEscalation.onclick = function (event) {

        if (clickedOpenCloseEscalation == true) {

          // alert('hi')
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            // document.getElementById("listItemLabelOpenClose").textContent = `Ticket: ${label}`;
            const listItemLabelOpenClose = document.getElementById("listItemLabelOpenClose");
            if (listItemLabelOpenClose) {
              listItemLabelOpenClose.textContent = `Ticket: ${label}`;
            }

            myChart.update();

            const dropdown = (document.getElementById("dataDropdown_openClose"));
            dropdown.style.display = "block";


          }



          dataDropdown_openClose.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (OpenCloseEscalationdrillDownLevel === 1) {
                console.log(event.target.id);
                selectedOption = event.target.id;
                // handleDropdownClick(selectedOption);
                firstPoint = points[0]; // Assuming points is defined elsewhere

                labelname = myChart.data.labels[firstPoint.index];
                // const labelname = label;
                // const selectedSecondOption = event.target.id;
                // const labelSecond = myChart.data.labels[firstPoint.index];
                // const labelnameSecond = labelSecond; 
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);
                // console.log(selectedSecondOption);




                document.getElementById("firstDrillDownopenEscalation").style.display = "block";
                document.getElementById("firstDrillDownopenEscalation").textContent = ` - ${selectedOption}`



                let xhr_object = new XMLHttpRequest();
                let apiURL;
                // "&drilldown_by=" +
                // selectedOption +
                apiURL =
                  getOpenCloseDrill
                  +
                  idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  '' +
                  "&sec_drill_down_on=" +
                  '',

                  // downloadTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-tickets/" + idLink + 
                  // "&from_date=" +
                  //   globalDateFirst +
                  //   "&to_date=" +
                  //   globalDateSecond +
                  //   "&status=" +
                  //   labelname +
                  //   "&first_drilldown_by=" +
                  //   selectedOption +
                  //   "&sec_drilldown_by=" +
                  //   "" +
                  //   "&sec_drill_down_on=" +
                  //   "",

                  xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resfunOpenCloseDrill = JSON.parse(this.responseText);
                  console.log("Open Close Escalation Drill Down - ");
                  console.log(resfunOpenCloseDrill);

                  const labels = resfunOpenCloseDrill.response.map(item => item[1]);
                  const dataValues = resfunOpenCloseDrill.response.map(item => item[0]);
                  console.log(labels);
                  console.log(dataValues);
                  myChart.destroy();
                  myChart = new Chart(OpenCloseEscalation, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: dataValues,
                        backgroundColor: backgroundColors,
                        borderWidth: 1,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            },
                          },
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          },
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                };

                xhr_object.send();
                OpenCloseEscalationdrillDownLevel = 2;

              }
              else if (OpenCloseEscalationdrillDownLevel === 2) {
                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownopenEscalation").style.display = "none";
                document.getElementById("secondDrilldownopenEscalation").style.display = "block";
                document.getElementById("secondDrilldownopenEscalation").textContent = ` - ${selectedSecondOption}`


                apiURL =
                  getOpenCloseDrill
                  +
                  idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption,
                  // alert("second drill down api");

                  downloadTicketsLink = ip + "fm-excel-download/get-drill-down-for-chart-tickets/" +
                  idLink +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&sec_drilldown_by=" +
                  selectedSecondOption,
                  // alert(downloadTicketsLink);

                  console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                xhr_object.onload = function () {
                  resfunOpenCloseDrill = JSON.parse(this.responseText);
                  console.log("Open close 2 Drill Down - ");
                  console.log(resfunOpenCloseDrill);

                  const labels = resfunOpenCloseDrill.response.map(item => item[1]);
                  const dataValues = resfunOpenCloseDrill.response.map(item => item[0]);
                  console.log(labels);
                  console.log(dataValues);

                  myChart.destroy();
                  myChart = new Chart(OpenCloseEscalation, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: dataValues,
                        backgroundColor: backgroundColors,
                        borderWidth: 1,
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                          title: {
                            display: true,
                            text: labelname,
                            padding: {
                              top: 20,
                            },
                          },
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          },
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                };

                xhr_object.send();
                OpenCloseEscalationdrillDownLevel = 3;
                clickedOpenCloseEscalation = false;
                return;
              }
            }
            else {
              if (OpenCloseEscalationdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }


            dataDropdown_openClose.style.display = "none";
          });
        } else if (clickedOpenCloseEscalation == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    // ---------
    // refreshIconElement_openClose.addEventListener("click", restoreOriginalChartTicket);
    // OpenCloseEscalation.style.display = "block";
    function restoreOriginalChart() {

      if (originalChartOpenCloseEscalation) {
        myChart.destroy(); // Destroy the current chart
        clickedOpenCloseEscalation = true;
        funOpenCloseEscalation();
        document.getElementById("firstDrillDownopenEscalation").style.display = "none";
        document.getElementById("secondDrilldownopenEscalation").style.display = "none";
      }
    }

    refreshIconElement_openClose.addEventListener("click", restoreOriginalChart);


  };

  xhr_object.send();
}


let clickedCategoryWiseEscalation = true;
function funCategoryWiseEscalation() { // CategoryEscalation,loaderCategoryEscalation,NoDataCategoryEscalation
  let NoDataCategoryEscalation = document.getElementById("NoDataCategoryEscalation");
  let CategoryEscalation = document.getElementById("CategoryEscalation");
  let loaderCategoryEscalation = document.getElementById("loaderCategoryEscalation");
  // let dt1 = document.getElementById("dt1");

  // loaderCategoryEscalation.style.display = "block";
  // NoDataCategoryEscalation.style.display = "none";

  // if (globalType == "daily") {
  //   dt1.innerHTML = "Tickets for " + globalDateFirst;
  // } else {
  //   dt1.innerHTML =
  //     "Tickets for " + globalDateFirst + " to " + globalDateSecond;
  // }

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getCategoryEscalation + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getCategoryEscalation +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  console.log("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww");
  console.log(
    getCategoryEscalation +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond
  );

  xhr_object.onload = function () {
    resfunCategoryWiseEscalation = JSON.parse(this.responseText);

    console.log("Category Wise Executive Escalation - ");
    console.log(resfunCategoryWiseEscalation);


    let xValues = [], yValues = [];

    xValues = Object.keys(resfunCategoryWiseEscalation.response);
    yValues = Object.values(resfunCategoryWiseEscalation.response);

    let CategoryEscalationPieColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];


    // Added Now
    originalChartConfigTopCategoryEscalation = {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [
          {
            label: "Category",
            backgroundColor: CategoryEscalationPieColors,
            data: yValues,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(CategoryEscalation, originalChartConfigTopCategoryEscalation)

    loaderCategoryEscalation.style.display = "none";
    NoDataCategoryEscalation.style.display = "none";
    CategoryEscalation.style.display = "block";


    infoCategoryWiseExecutiveIcon.addEventListener("click", InfoModal);
    let CategoryWiseExecutiveDiv = document.getElementById('CategoryWiseExecutiveDiv');
    let closeCategoryWiseExecutive = document.getElementById('closeCategoryWiseExecutive');
    function InfoModal(event) {
      event.stopPropagation();
      CategoryWiseExecutiveDiv.style.display = "block";
      if (resfunCategoryWiseEscalation.info) {
        let CategoryWiseExecutiveInfo = document.getElementById("CategoryWiseExecutiveInfo");
        let CategoryWiseExecutiveInfo2 = document.getElementById("CategoryWiseExecutiveInfo2");


        CategoryWiseExecutiveInfo.innerHTML = "<b>Formula :</b> " + resfunCategoryWiseEscalation.info.formula;
        CategoryWiseExecutiveInfo2.innerHTML = "<b>Info  : </b>" + resfunCategoryWiseEscalation.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CategoryWiseExecutiveDiv.contains(event.target) && event.target.id !== 'infoCategoryWiseExecutiveIcon') {
        closeCategoryWiseExecutiveDiv();
      }
    });
    closeCategoryWiseExecutive.addEventListener("click", closeCategoryWiseExecutiveDiv);
    function closeCategoryWiseExecutiveDiv() {
      CategoryWiseExecutiveDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CategoryWiseExecutiveDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    // refreshIconElement_categoryExecutive

    refreshIconElement_categoryExecutive.addEventListener("click", restoreOriginalChartcategoryExecutive);

    function restoreOriginalChartcategoryExecutive() {
      if (originalChartConfigTopCategoryEscalation) {
        myChart.destroy();
        loaderCategoryEscalation.style.display = "block";
        funCategoryWiseEscalation();

      }
    }
  };

  xhr_object.send();
}

function funAuditScore() {
  let AuditScoreNoData = document.getElementById("AuditScoreNoData");
  let tblAuditScoreinfo = document.getElementById(
    "tblAuditScoreinfo"
  );
  let tablebodyAuditScore = document.getElementById(
    "tablebodyAuditScore"
  );
  let loaderAuditScore = document.getElementById("loaderAuditScore");


  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getAuditScore + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getAuditScore +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    // Assuming your API response is in the correct format
    let resfunAuditScore = JSON.parse(this.responseText);

    console.log("Audit Score - ");
    console.log(resfunAuditScore);

    let resfunAuditScoreArray = resfunAuditScore.response;
    allDetails = ``;

    for (let i = 0; i < resfunAuditScoreArray.length; i++) {
      let rowData = resfunAuditScoreArray[i];
      allDetails +=
        `<tr>` +
        `<td>` + (i + 1) + `</td>` +
        `<td>` + rowData[0] + `</td>` +
        `<td>` + (rowData[1] ? rowData[1] : '-') + `</td>` +
        `<td>` + (rowData[2] ? new Date(rowData[2]).toLocaleDateString() : '-') + `</td>` +
        `<td>` + (rowData[3] ? rowData[3] : '-') + `</td>` +
        `<td>` + (rowData[4] ? rowData[4] : '-') + `</td>` +
        `</tr>`;
    }
    tablebodyAuditScore.innerHTML = allDetails;


    loaderAuditScore.style.display = "none";
    if (Object.keys(resfunAuditScoreArray).length === 0) {
      AuditScoreNoData.style.display = "block";
      tblAuditScoreinfo.style.display = "none";
    } else {
      AuditScoreNoData.style.display = "none";
      tblAuditScoreinfo.style.display = "inline-table";
    }

    infoServicePartnerEvaluationIcon.addEventListener("click", InfoModal);
    let ServicePartnerEvaluationDiv = document.getElementById('ServicePartnerEvaluationDiv');
    let closeServicePartnerEvaluation = document.getElementById('closeServicePartnerEvaluation');

    function InfoModal(event) {
      event.stopPropagation();
      ServicePartnerEvaluationDiv.style.display = "block";
      if (resfunAuditScore.info) {
        let ServicePartnerEvaluationInfo = document.getElementById("ServicePartnerEvaluationInfo");
        let ServicePartnerEvaluationInfo2 = document.getElementById("ServicePartnerEvaluationInfo2");

        ServicePartnerEvaluationInfo.innerHTML = "<b>Formula :</b> " + resfunAuditScore.info.formula;
        ServicePartnerEvaluationInfo2.innerHTML = "<b>Info :</b> " + resfunAuditScore.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ServicePartnerEvaluationDiv.contains(event.target) && event.target.id !== 'infoServicePartnerEvaluationIcon') {
        closeServicePartnerEvaluationDiv();
      }
    });

    closeServicePartnerEvaluation.addEventListener("click", closeServicePartnerEvaluationDiv);

    function closeServicePartnerEvaluationDiv() {
      ServicePartnerEvaluationDiv.style.display = "none";
    }

    ServicePartnerEvaluationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // refreshIconElement_servicePartner


    refreshIconElement_servicePartner.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      funAuditScore();
    }
  };

  xhr_object.send();
}

// let clickedClusterStats = true;
function funClusterStats() {
  let loaderClusterStats = document.getElementById("loaderClusterStats");
  let barChartClusterStats = document.getElementById("cluster-stats");
  let clusterStatsNoData = document.getElementById("clusterStatsNoData");

  let dt3 = document.getElementById("dt3");

  // if (globalDateFirst != 0 && globalDateFirst != globalDateSecond) {
  //   dt3.innerHTML =
  //     "Cluster Stats : " +
  //     globalDateFirst +
  //     " to " +
  //     globalDateSecond;
  // } else {
  //   dt3.innerHTML = "Cluster Stats : " + globalDateFirst;
  // }

  // barChartClusterStats.style.display = "none";
  // loaderClusterStats.style.display = "block";
  // clusterStatsNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getClusterStats +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  console.log(getClusterStats +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, "-------------------------cluster-------------------------");

  xhr_object.onload = function () {
    resfunClusterStats = JSON.parse(this.responseText);
    console.log("Cluster Stats - ");
    console.log(resfunClusterStats);


    let responseValues = [];
    let responseLabels = [];

    // Extracting data from the response
    resfunClusterStats.response1.forEach(item => {
      // Check if the first element is not null
      if (item[0] !== null) {
        responseLabels.push(item[0]);
        responseValues.push(item[1]);
      }
    });
    let currentChartType = "bar"

    const orginalClusterStats = {
      type: "bar",
      data: {
        labels: responseLabels,
        datasets: [
          {
            label: "Cluster",
            backgroundColor: ["#E95420"],
            data: responseValues,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: "Cluster",
            },
          },
          y: {
            title: {
              display: true,
              text: "Total steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(barChartClusterStats, orginalClusterStats)

    loaderClusterStats.style.display = "none";
    if (resfunClusterStats.length == 0) {
      clusterStatsNoData.style.display = "block";
      barChartClusterStats.style.display = "none";
    } else {
      clusterStatsNoData.style.display = "none";
      barChartClusterStats.style.display = "block";
    }


    // infoClusterWiseTotalStepsTakenIcon,ClusterWiseTotalStepsTakenDiv,closeClusterWiseTotalStepsTaken,ClusterWiseTotalStepsTakenInfo

    infoClusterWiseTotalStepsTakenIcon.addEventListener("click", InfoModal);
    let ClusterWiseTotalStepsTakenDiv = document.getElementById('ClusterWiseTotalStepsTakenDiv');
    let closeClusterWiseTotalStepsTaken = document.getElementById('closeClusterWiseTotalStepsTaken');
    function InfoModal(event) {
      event.stopPropagation();
      ClusterWiseTotalStepsTakenDiv.style.display = "block";
      if (resfunClusterStats.info) {
        let ClusterWiseTotalStepsTakenInfo = document.getElementById("ClusterWiseTotalStepsTakenInfo");



        ClusterWiseTotalStepsTakenInfo.innerHTML = "<b>Info :</b> " + resfunClusterStats.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!ClusterWiseTotalStepsTakenDiv.contains(event.target) && event.target.id !== 'infoClusterWiseTotalStepsTakenIcon') {
        closeClusterWiseTotalStepsTakenDiv();
      }
    });
    closeClusterWiseTotalStepsTaken.addEventListener("click", closeClusterWiseTotalStepsTakenDiv);
    function closeClusterWiseTotalStepsTakenDiv() {
      ClusterWiseTotalStepsTakenDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ClusterWiseTotalStepsTakenDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
    if (!funClusterStats.initialized) {
      barChartClusterStats.onclick = function (event) {
        let clickedClusterStats = true;
        if (clickedClusterStats == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);

            document.getElementById("listItemLabelCusterStats").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;
            myChart.update();


          }
          const dropdown = (document.getElementById("dataDropdown_custerStats"));
          dropdown.style.display = "block";


          dataDropdown_custerStats.addEventListener("click", function (event) {
            const selectedOption = event.target.id;
            const firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const labelname = label;
            console.log(selectedOption);
            if (event.target.id != "closeDropdown") {
              if (selectedOption === "User_Name" && currentChartType === "bar") {
                let xhr_object = new XMLHttpRequest();
                xhr_object.open(
                  "GET",
                  getCusterStatsDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                  true
                );
                console.log(
                  getCusterStatsDrill +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,
                );
                // alert(downloadClusterWiseTotalLink);

                downloadClusterWiseTotalLink = ip + "stepathon/get-cluster-wise-total-steps-taken-drill-down-download/" + idLink +
                  idLink +
                  "&drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond,



                  xhr_object.onload = function () {
                    resCusterStats = JSON.parse(this.responseText);
                    console.log("CusterStats Drill Down - ");
                    console.log(resCusterStats);

                    const labels = resCusterStats.response.map(item => item[1]);
                    const data = resCusterStats.response.map(item => item[0]);

                    myChart.destroy();
                    barChartClusterStats.style.display = "block";
                    myChart = new Chart(barChartClusterStats, {
                      type: "bar",
                      data: {
                        labels: labels,
                        datasets: [{
                          label: "User Name",
                          data: data,
                          backgroundColor: ["#e2445b"],
                        }]
                      },
                      options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                          x: {
                            title: {
                              display: true,
                              text: "User Name",
                            },
                          },
                          y: {
                            title: {
                              display: true,
                              text: "Total Steps Taken",
                            },
                          },
                        },
                        plugins: {
                          datalabels: {
                            color: "#000000",
                            anchor: "end",
                            align: "end",
                            offset: -6,
                            font: {
                              size: "10",
                              weight: "bold",
                            },
                          },
                          legend: {
                            display: true,
                            position: "no",
                          },
                        },
                      },
                      plugins: [ChartDataLabels],
                    });

                  }

                xhr_object.send();
                clickedClusterStats = false;
                // funClusterStats.initialized =true;
              }
            }
            else {
              restoreOriginalClusterStats();
            }

            dataDropdown_custerStats.style.display = "none";
          });
        }


      };
    }
    function restoreOriginalClusterStats() {
      if (orginalClusterStats) {
        myChart.destroy(); // Destroy the current chart
        funClusterStats();
        clickedClusterStats = true;
      }
    }

    refreshIconElement_custerStats.addEventListener("click", restoreOriginalClusterStats);

  };
  xhr_object.send();
}

let clickedDailyStepStats = true;
function funDailyStepStats() {
  let loaderDailyStep = document.getElementById("loaderDailyStep");
  let barChartDailyStep = document.getElementById("barChartDailyStep");
  let dailyStepNoData = document.getElementById("dailyStepNoData");

  // barChartDailyStep.style.display = "none";
  // loaderDailyStep.style.display = "block";
  // dailyStepNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getDailyStepStats +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );
  console.log(
    getDailyStepStats +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunDailyStepStats = JSON.parse(this.responseText);
    console.log("Function employee--------- - ");
    console.log(resfunDailyStepStats);


    let responseValues = [];
    let responseLabels = [];

    // Extracting data from the response
    resfunDailyStepStats.response1.forEach(item => {
      // Check if the first element is not null
      if (item[0] !== null) {
        responseLabels.push(item[0]);
        responseValues.push(item[1]);
      }
    });
    let currentChartType = "bar"
    originalChartConfigDailyStepStats = {
      type: "bar",
      data: {
        labels: responseLabels,
        datasets: [
          {
            label: "Function",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: responseValues,
            borderRadius: 15,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          yAxes: [
            {
              ticks: {
                beginAtZero: true,
              },
            },
          ],
          y: {
            title: {
              display: true,
              text: "Cumulative steps taken",
            },
          },
          x: {
            title: {
              display: true,
              text: "Date",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(barChartDailyStep, originalChartConfigDailyStepStats)

    loaderDailyStep.style.display = "none";
    if (resfunDailyStepStats.length == 0) {
      dailyStepNoData.style.display = "block";
      barChartDailyStep.style.display = "none";
    } else {
      dailyStepNoData.style.display = "none";
      barChartDailyStep.style.display = "block";
    }

    // infoFunctionWiseTotalStepsTakenIcon,FunctionWiseTotalStepsTakenDiv,closeFunctionWiseTotalStepsTaken,FunctionWiseTotalStepsTakenInfo

    infoFunctionWiseTotalStepsTakenIcon.addEventListener("click", InfoModal);
    let FunctionWiseTotalStepsTakenDiv = document.getElementById('FunctionWiseTotalStepsTakenDiv');
    let closeFunctionWiseTotalStepsTaken = document.getElementById('closeFunctionWiseTotalStepsTaken');
    function InfoModal(event) {
      event.stopPropagation();
      FunctionWiseTotalStepsTakenDiv.style.display = "block";
      if (resfunDailyStepStats.info) {
        let FunctionWiseTotalStepsTakenInfo = document.getElementById("FunctionWiseTotalStepsTakenInfo");



        FunctionWiseTotalStepsTakenInfo.innerHTML = "<b>Info :</b> " + resfunDailyStepStats.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!FunctionWiseTotalStepsTakenDiv.contains(event.target) && event.target.id !== 'infoFunctionWiseTotalStepsTakenIcon') {
        closeFunctionWiseTotalStepsTakenDiv();
      }
    });
    closeFunctionWiseTotalStepsTaken.addEventListener("click", closeFunctionWiseTotalStepsTakenDiv);
    function closeFunctionWiseTotalStepsTakenDiv() {
      FunctionWiseTotalStepsTakenDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FunctionWiseTotalStepsTakenDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // if (!funDailyStepStats.initialized) {
    barChartDailyStep.onclick = function (event) {
      let clickedDailyStepStats = true;
      if (clickedDailyStepStats == true) {
        const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

        if (points.length) {
          const firstPoint = points[0];
          const label = myChart.data.labels[firstPoint.index];
          const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

          console.log(`Clicked on ${label} with value ${value}`);

          document.getElementById("listItemLabelDailyStepStats").textContent = `Ticket: ${label}`;
          // document.getElementById("listItemValue").textContent = `Value: ${value}`;
          // myChart.update();
          const dropdown = (document.getElementById("dataDropdown_dailyStepStats"));
          dropdown.style.display = "block";
        }


        dataDropdown_dailyStepStats.addEventListener("click", function (event) {
          const selectedOption = event.target.id;
          const firstPoint = points[0];
          const label = myChart.data.labels[firstPoint.index];
          const labelname = label;
          console.log(selectedOption);
          if (event.target.id != "closeDropdown") {
            if (selectedOption === "User_Name" && currentChartType === "bar") {
              let xhr_object = new XMLHttpRequest();
              xhr_object.open(
                "GET",
                getDailyStepStatsDrill +
                idLink +
                "&drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,
                true
              );

              console.log(
                getDailyStepStatsDrill +
                idLink +
                "&drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,
              );
              // alert(downloadFunctionWiseTotalLink);

              downloadFunctionWiseTotalLink = ip + "stepathon/get-function-wise-step-count-drill-down-download/" +
                idLink +
                "&drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,



                xhr_object.onload = function () {
                  resDailyStepStatsDrill = JSON.parse(this.responseText);
                  console.log("DailyStepStats Drill Down - ");
                  console.log(resDailyStepStatsDrill);

                  const labels = resDailyStepStatsDrill.response.map(item => item[1]);
                  const data = resDailyStepStatsDrill.response.map(item => item[0]);

                  myChart.destroy();
                  barChartDailyStep.style.display = "block";
                  myChart = new Chart(barChartDailyStep, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });
                  clickedDailyStepStats = false;
                }

              xhr_object.send();
              // funDailyStepStats.initialized =true;
            }
          }
          else {
            restoreOriginalChartTicket();
          }

          dataDropdown_dailyStepStats.style.display = "none";

        });
      } else if (clickedDailyStepStats == false) {
        alert("You have reached the maximum drill-down level.");
      }


    };

    function restoreOriginalChartTicket() {
      if (originalChartConfigDailyStepStats) {
        myChart.destroy();
        funDailyStepStats();
        clickedDailyStepStats = true;
      }
    }

    refreshIconElement_dailyStepStats.addEventListener("click", restoreOriginalChartTicket);

  };
  xhr_object.send();
}

let clickedGenderParticipation = true;
function fungenderParticipation() {
  let genderNoData = document.getElementById("genderNoData");
  let genderParticipation = document.getElementById("genderParticipation");
  let loaderGender = document.getElementById("loaderGender");

  // loaderGender.style.display = "block";
  // genderNoData.style.display = "none";
  // genderParticipation.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET",
    getGender +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfungenderParticipation = JSON.parse(this.responseText);
    console.log("Gender Participation");
    console.log(resfungenderParticipation);

    // Get the counts of male and female participants
    let femaleCount = parseInt(resfungenderParticipation.response1.female);
    let maleCount = parseInt(resfungenderParticipation.response1.male);

    // Update the pie chart data
    originalGenderParticipation = {
      type: "pie",
      data: {
        labels: ["Female", "Male"],
        datasets: [
          {
            label: "Gender",
            backgroundColor: ["#e2445b", "#01c875"],
            data: [femaleCount, maleCount], // Use the raw counts here
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              return value === 0 ? "" : value; // Display the raw count value
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };
    let myChart = new Chart(genderParticipation, originalGenderParticipation)
    loaderGender.style.display = "none";

    if (femaleCount + maleCount === 0) {
      genderNoData.style.display = "block";
      genderParticipation.style.display = "none";
    } else {
      genderNoData.style.display = "none";
      genderParticipation.style.display = "block";
    }


    // infoGenderParticipationIcon,GenderParticipationDiv,closeGenderParticipation,GenderParticipationInfo


    infoGenderParticipationIcon.addEventListener("click", InfoModal);
    let GenderParticipationDiv = document.getElementById('GenderParticipationDiv');
    let closeGenderParticipation = document.getElementById('closeGenderParticipation');
    function InfoModal(event) {
      event.stopPropagation();
      GenderParticipationDiv.style.display = "block";
      if (resfungenderParticipation.info) {
        let GenderParticipationInfo = document.getElementById("GenderParticipationInfo");



        GenderParticipationInfo.innerHTML = "<b>Info :</b> " + resfungenderParticipation.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!GenderParticipationDiv.contains(event.target) && event.target.id !== 'infoGenderParticipationIcon') {
        closeGenderParticipationDiv();
      }
    });
    closeGenderParticipation.addEventListener("click", closeGenderParticipationDiv);
    function closeGenderParticipationDiv() {
      GenderParticipationDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    GenderParticipationDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let clickedGenderParticipation = true;
    if (!fungenderParticipation.initialized) {
      genderParticipation.onclick = function (event) {

        if (clickedGenderParticipation == true) {
          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelGenderParticipation").textContent = `Ticket: ${label}`;
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;
            // const backgroundColor = myChart.data.datasets[0].backgroundColor[firstPoint.index];
            myChart.update();

            // console.log(backgroundColor);
          };

          const dropdown = (document.getElementById("dataDropdown_genderParticipation"));
          dropdown.style.display = "block";


          dataDropdown_genderParticipation.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              console.log("---------------------------------------")
              selectedOption = event.target.id;
              firstPoint = points[0];
              labelname = myChart.data.labels[firstPoint.index];
              backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
              // cticket - b1onsole.log(backgroundColors);
              console.log(selectedOption);


              secondDrilldownGender


              document.getElementById("firstDrillDownGender").style.display = "block";
              document.getElementById("firstDrillDownGender").textContent = ` - ${selectedOption}`


              let xhr_object = new XMLHttpRequest();
              let apiURL;
              // First-level drill-down API
              // firstdrillDownSelectedOption  = 
              apiURL =
                getGenderParticipationDrill +
                idLink +
                "&drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond;
              console.log("GenderParticipation drill down 1");
              console.log(apiURL);

              downloadGenderParticipationLink = ip + "stepathon/get-gender-participation-drill-down-download/" +
                idLink +
                "&drilldown_by=" +
                selectedOption +
                "&status=" +
                labelname +
                "&from_date=" +
                globalDateFirst +
                "&to_date=" +
                globalDateSecond,

                // alert("ifirst download")
                console.log(downloadGenderParticipationLink)

              xhr_object.open("GET", apiURL, true);

              xhr_object.onload = function () {
                resGenderParticipationDrill = JSON.parse(this.responseText);
                console.log("GenderParticipation Drill Down I- ");
                console.log(resGenderParticipationDrill);

                const labels = resGenderParticipationDrill.response.map(item => item[1]);
                const data = resGenderParticipationDrill.response.map(item => item[0]);
                // const labelname = label;
                myChart.destroy();
                myChart = new Chart(genderParticipation, {
                  type: "bar",
                  data: {
                    labels: labels,
                    datasets: [{
                      label: "Data",
                      data: data,
                      backgroundColor: backgroundColors,
                    }]
                  },
                  options: {
                    responsive: true,
                    interaction: {
                      intersect: false,
                    },
                    scales: {
                      x: {
                        stacked: true,
                      },
                      y: {
                        stacked: true,
                      },
                    },
                    maintainAspectRatio: false,
                    scales: {
                      x: {
                        title: {
                          display: true,
                          text: labelname,
                          padding: {
                            top: 20,
                          }
                        }
                      },
                    },
                    plugins: {
                      datalabels: {
                        color: "#000000",
                        anchor: "end",
                        align: "end",
                        offset: -6,
                        font: {
                          size: "10",
                          weight: "bold",
                        },
                        formatter: function (value, context) {
                          // Hide label if value is zero
                          return value === 0 ? '' : value;
                        }
                      },
                      legend: {
                        display: true,
                        position: "no",
                      },
                    },
                  },
                  plugins: [ChartDataLabels],
                });

              }
              xhr_object.send();

              dataDropdown_genderParticipation.style.display = "none";
            }
            else {
              restoreOriginalGenderParticipation();
            }

            dataDropdown_genderParticipation.style.display = "none";

          });

        } else if (clickedGenderParticipation == false) {
          alert("You have reached the maximum drill-down level.");
        }

      };
    }
    function restoreOriginalGenderParticipation() {

      if (originalGenderParticipation) {
        myChart.destroy(); // Destroy the current chart
        fungenderParticipation();
        downloadGenderParticipationLink = ip +
          "stepathon/get-gender-participation-download/" + idLink +
          "&from_date=" +
          globalDateFirst +
          "&to_date=" +
          globalDateSecond;
        clickedGenderParticipation = true;
        document.getElementById("firstDrillDownGender").style.display = "none";
      }
    }

    refreshIconElement_genderParticipation.addEventListener("click", restoreOriginalGenderParticipation);



  };

  xhr_object.send();

}

let clickedTrendsOverMonths = true;
// refreshIconElement_trendOverMonth   dataDropdown_trendOverMonth  listItemLabelTrendOverMonth
function funInventoryOverMonthSites() {
  let loaderTrendsMonths = document.getElementById("loaderTrendsMonths");
  let TrendsMonthsNoData = document.getElementById("TrendsMonthsNoData");
  let trendsOverMonths = document.getElementById("trendsOverMonths");

  // ---------------------------------------------------
  // trendsOverMonths.style.display = "block";
  // loaderTrendsMonths.style.display = "block";
  // TrendsMonthsNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      gettrendsOverMonths + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      gettrendsOverMonths + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object.open(
      "GET",
      gettrendsOverMonths +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      gettrendsOverMonths +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfuntrendsOverMonths = JSON.parse(this.responseText);
    console.log("Inventory Trends Over Months - ");
    console.log(resfuntrendsOverMonths);


    let months = Object.keys(resfuntrendsOverMonths.response);
    let consumptionData = Object.values(resfuntrendsOverMonths.response).map(
      (item) => item.trend_over_month
    );


    // Added now
    originalChartTrendsOverMonths = {
      type: "bar",
      data: {
        labels: months,
        datasets: [
          {
            label: "Inventory Consumption",
            backgroundColor: ["#77216f"],
            data: consumptionData,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Months',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            // ticks: {
            //   callback: function (value) {
            //     return value + "%"
            //   }
            // },
            title: {
              display: true,
              text: 'Total Cost'
            }
          }
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value
              }
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(trendsOverMonths, originalChartTrendsOverMonths)

    loaderTrendsMonths.style.display = "none";
    TrendsMonthsNoData.style.display = "none";
    trendsOverMonths.style.display = "block";


    // infoTrendOverTheMonthsIcon,TrendOverTheMonthsDiv,closeTrendOverTheMonths,TrendOverTheMonthsInfo
    infoTrendOverTheMonthsIcon.addEventListener("click", InfoModal);
    let TrendOverTheMonthsDiv = document.getElementById('TrendOverTheMonthsDiv');
    let closeTrendOverTheMonths = document.getElementById('closeTrendOverTheMonths');
    function InfoModal(event) {
      event.stopPropagation();
      TrendOverTheMonthsDiv.style.display = "block";
      if (resfuntrendsOverMonths.info) {
        let TrendOverTheMonthsInfo = document.getElementById("TrendOverTheMonthsInfo");
        let TrendOverTheMonthsInfo2 = document.getElementById("TrendOverTheMonthsInfo2");



        TrendOverTheMonthsInfo.innerHTML = "<b>Info :</b> " + resfuntrendsOverMonths.info.info;
        TrendOverTheMonthsInfo2.innerHTML = "<b>Formula :</b> " + resfuntrendsOverMonths.info.formula;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TrendOverTheMonthsDiv.contains(event.target) && event.target.id !== 'infoTrendOverTheMonthsIcon') {
        closeTrendOverTheMonthsDiv();
      }
    });
    closeTrendOverTheMonths.addEventListener("click", closeTrendOverTheMonthsDiv);
    function closeTrendOverTheMonthsDiv() {
      TrendOverTheMonthsDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TrendOverTheMonthsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let InventoryOverMonthSitesdrillDownLevel = 1;
    let clickedTrendsOverMonths = true;

    if (!funInventoryOverMonthSites.initialized) {
      trendsOverMonths.onclick = function (event) {

        if (clickedTrendsOverMonths == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelTrendOverMonth").textContent = `Ticket: ${label}`;
            myChart.update();
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown_trendOverMonth"));
            dropdown.style.display = "block";


          }

          dataDropdown_trendOverMonth.addEventListener("click", function (event) {

            if (event.target.id != "closeDropdown") {
              if (InventoryOverMonthSitesdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);




                document.getElementById("firstDrillDownInventoryMonths").style.display = "block";
                document.getElementById("firstDrillDownInventoryMonths").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getInventoryOverMonthDrill +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log("TicketCategoryDrill  1");
                console.log(apiURL);
                xhr_object.open("GET", apiURL, true);



                downloadTrendsMonthsLink = ip + "supervisor-monthly/get-inventory-consumption-over-months-drill-down-excel/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  "" +
                  "&sec_drill_down_on=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  const resTrendsOverMonthsDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverMonths Drill Down -1 ");
                  console.log(resTrendsOverMonthsDrill);

                  const labels = resTrendsOverMonthsDrill.response.map(item => item[1]);
                  const data = resTrendsOverMonthsDrill.response.map(item => item[0]);

                  // Destroy the existing chart if it exists
                  if (myChart) {
                    myChart.destroy();
                  }

                  // Create a new chart
                  myChart = new Chart(trendsOverMonths, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Frequency',
                        data: data,
                        backgroundColor: "#77216f",
                      }],
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: 'Product',
                          }
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      plugins: {
                        legend: {
                          display: true,
                          position: "no",
                        },
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                      },
                    },
                  });
                };

                xhr_object.send();

                InventoryOverMonthSitesdrillDownLevel = 2;
              } else if (InventoryOverMonthSitesdrillDownLevel === 2) {

                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownInventoryMonths").style.display = "none";
                document.getElementById("secondDrilldownInventoryMonths").style.display = "block";
                document.getElementById("secondDrilldownInventoryMonths").textContent = ` - ${selectedSecondOption}`

                apiURL =
                  getInventoryOverMonthDrillSecond +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadTrendsMonthsLink = ip + "supervisor-monthly/get-inventory-consumption-over-months-drill-down-excel/" +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;


                xhr_object.onload = function () {
                  const resTrendsOverMonthsDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverMonths Drill Down -2 ");
                  console.log(resTrendsOverMonthsDrill);

                  const labels = resTrendsOverMonthsDrill.response.map(item => item[1]);
                  const data = resTrendsOverMonthsDrill.response.map(item => item[0]);

                  // Destroy the existing chart if it exists
                  if (myChart) {
                    myChart.destroy();
                  }

                  // Create a new chart
                  myChart = new Chart(trendsOverMonths, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Frequency',
                        data: data,
                        backgroundColor: "#77216f",
                      }],
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: 'Product',
                          }
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      plugins: {
                        legend: {
                          display: true,
                          position: "no",
                        },
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                      },
                    },
                  });
                };


                xhr_object.send();
                InventoryOverMonthSitesdrillDownLevel = 3;
                clickedTrendsOverMonths = false;
                return;
              }
            }
            else {
              if (InventoryOverMonthSitesdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }

            dataDropdown_trendOverMonth.style.display = "none";

          });

        } else if (clickedTrendsOverMonths == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartTrendsOverMonths) {
        myChart.destroy(); // Destroy the current chart
        funInventoryOverMonthSites();
        clickedTrendsOverMonths = true;
        document.getElementById("firstDrillDownInventoryMonths").style.display = "none";
        document.getElementById("secondDrilldownInventoryMonths").style.display = "none";
      }
    }

    refreshIconElement_trendOverMonth.addEventListener("click", restoreOriginalChart);

  };
  xhr_object.send();


}

let clickedTrendsOverSites = true;
function funInventoryOverSites() {
  let loaderTrendsSites = document.getElementById("loaderTrendsSites");
  let TrendsSitesNoData = document.getElementById("TrendsSitesNoData");
  let trendsOverSites = document.getElementById("trendsOverSites");


  // -------------------------------------------------------
  // TrendsOverSites

  // trendsOverSites.style.display = "block";
  // loaderTrendsSites.style.display = "block";
  // TrendsSitesNoData.style.display = "none";

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      gettrendsOverSites + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      gettrendsOverSites + idLink + "&date=" + globalDateFirst
    );
  }
  else {
    xhr_object1.open(
      "GET",
      gettrendsOverSites +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      gettrendsOverSites +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }



  xhr_object1.onload = function () {
    resfuntrendsOverSites = JSON.parse(this.responseText);
    console.log("Inventory Trends Over Sites - ");
    console.log(resfuntrendsOverSites);

    // let responseValues = [resfuntrendsOverSites.response[0]];
    // let responseLabels = [resfuntrendsOverSites.response[1]];

    let responseLabels = Object.keys(resfuntrendsOverSites.response); // Get the first key in response object
    let responseValues = Object.values(resfuntrendsOverSites.response);


    // Added now
    originalChartTrendsOverSites = {
      type: "bar",
      data: {
        labels: responseLabels,
        datasets: [
          {
            label: "Trends over Months",
            backgroundColor: ["#E95420"],
            data: responseValues,
            borderWidth: 1,
            borderColor: "#E95420",
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        // interaction: {
        //   intersect: false,
        // },

        scales: {
          x: {
            // ticks: {
            //   callback: function (value) {
            //     return this.getLabelForValue(value).substr(0, 15);
            //   },
            // },
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }

          },
          y: {
            beginAtZero: true,
            // ticks: {
            //   callback: function (value) {
            //     return value + "%"
            //   }
            // },
            title: {
              display: true,
              text: 'Total Cost'
            }
          }
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            ticks: {
              callback: function (value) {
                return value
              }
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(trendsOverSites, originalChartTrendsOverSites)
    let listItemLabelTrendsOverSites = document.getElementById("listItemLabelTrendsOverSites")

    loaderTrendsSites.style.display = "none";
    TrendsSitesNoData.style.display = "none";
    trendsOverSites.style.display = "block";

    // if ((resfuntrendsOverSites.response).length == 0) {
    //   loaderTrendsSites.style.display = "none";
    //   TrendsSitesNoData.style.display = "none";
    //   trendsOverSites.style.display = "block";

    // } else {
    //   loaderTrendsSites.style.display = "none";
    //   trendsOverSites.style.display = "block";
    // }

    // infoTrendOverTheSitesIcon,TrendOverTheSitesDiv,closeTrendOverTheSites,TrendOverTheSitesInfo

    infoTrendOverTheSitesIcon.addEventListener("click", InfoModal);
    let TrendOverTheSitesDiv = document.getElementById('TrendOverTheSitesDiv');
    let closeTrendOverTheSites = document.getElementById('closeTrendOverTheSites');
    function InfoModal(event) {
      event.stopPropagation();
      TrendOverTheSitesDiv.style.display = "block";
      if (resfuntrendsOverSites.info) {
        let TrendOverTheSitesInfo = document.getElementById("TrendOverTheSitesInfo");
        let TrendOverTheSitesInfo2 = document.getElementById("TrendOverTheSitesInfo2");



        TrendOverTheSitesInfo.innerHTML = "<b>Info :</b> " + resfuntrendsOverSites.info.info;
        TrendOverTheSitesInfo2.innerHTML = "<b>Formula :</b> " + resfuntrendsOverSites.info.formula;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TrendOverTheSitesDiv.contains(event.target) && event.target.id !== 'infoTrendOverTheSitesIcon') {
        closeTrendOverTheSitesDiv();
      }
    });
    closeTrendOverTheSites.addEventListener("click", closeTrendOverTheSitesDiv);
    function closeTrendOverTheSitesDiv() {
      TrendOverTheSitesDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TrendOverTheSitesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let TrendsOverSitesdrillDownLevel = 1;
    let clickedTrendsOverSites = true;

    if (!funInventoryOverSites.initialized) {
      trendsOverSites.onclick = function (event) {

        if (clickedTrendsOverSites == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelTrendsOverSites").textContent = `Ticket: ${label}`;
            // console.log(label)
            // listItemLabelTrendsOverSites.textContent = ` ${label}`;
            console.log(label)
            myChart.update();
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown_trendsOverSites"));
            dropdown.style.display = "block";
          }

          dataDropdown_trendsOverSites.addEventListener("click", function (event) {
            if (event.target.id != "closeDropdown") {
              if (TrendsOverSitesdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);




                document.getElementById("firstDrillDownInventorySites").style.display = "block";
                document.getElementById("firstDrillDownInventorySites").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                // "&drilldown_by=" +
                // getTrendsOverSitesDrill
                apiURL =
                  getTrendsOverSitesDrillSecond
                  +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log("TicketCategoryDrill  1");
                console.log(apiURL);
                xhr_object.open("GET", apiURL, true);

                downloadTrendsSitesLink = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down-excel/" + idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  "" +
                  "&sec_drill_down_on=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resTrendsOverSitesDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverSitesDrill Drill Down -1 ");
                  console.log(resTrendsOverSitesDrill);

                  const labels = resTrendsOverSitesDrill.response.map(item => item[1]);
                  const data = resTrendsOverSitesDrill.response.map(item => item[0]);


                  myChart.destroy();
                  myChart = new Chart(trendsOverSites, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Frequency',
                        data: data,
                        backgroundColor: "#E95420",
                      }],
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }

                xhr_object.send();
                TrendsOverSitesdrillDownLevel = 2;
              }
              else if (TrendsOverSitesdrillDownLevel === 2) {
                const firstPoint = points[0];
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownInventorySites").style.display = "none";
                document.getElementById("secondDrilldownInventorySites").style.display = "block";
                document.getElementById("secondDrilldownInventorySites").textContent = ` - ${selectedSecondOption}`

                let xhr_object = new XMLHttpRequest();
                apiURL =
                  getTrendsOverSitesDrillSecond +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadTrendsSitesLink = ip + "supervisor-monthly/get-inventory-consumption-over-site-drill-down-excel/" +
                  idLink +
                  "&status=" +
                  labelname +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;


                xhr_object.onload = function () {
                  resTrendsOverSitesDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverSitesDrill Drill Down -2 ");
                  console.log(resTrendsOverSitesDrill);

                  const labels = resTrendsOverSitesDrill.response.map(item => item[1]);
                  const data = resTrendsOverSitesDrill.response.map(item => item[0]);


                  myChart.destroy();
                  myChart = new Chart(trendsOverSites, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: 'Frequency',
                        data: data,
                        backgroundColor: "#E95420",
                      }],
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }

                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                          title: {
                            display: true,
                            text: labelname,
                          }
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }


                xhr_object.send();
                TrendsOverSitesdrillDownLevel = 3;
                clickedTrendsOverSites = false;
                return;
              }
            }
            else {
              if (TrendsOverSitesdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }

            dataDropdown_trendsOverSites.style.display = "none";
          });

        } else if (clickedTrendsOverSites == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartTrendsOverSites) {
        myChart.destroy(); // Destroy the current chart
        funInventoryOverSites();
        clickedTrendsOverSites = true;
        document.getElementById("firstDrillDownInventorySites").style.display = "none";
        document.getElementById("secondDrilldownInventorySites").style.display = "none";

      }
    }

    refreshIconElement_trendsOverSites.addEventListener("click", restoreOriginalChart);


  };
  xhr_object1.send();


}

// showTotalVisitors2(),loaderTotalVisitorsII,totalVisitorsNoDataII,total-visitors-II  refreshIconElement_totalVisitorII  dataDropdown_totalVisitorII  listItemLabelTotalVisitorII

let clickedTotalVisitors2 = true;
function funTotalVisitors2() {
  let totalVisitorsNoDataII = document.getElementById("totalVisitorsNoDataII");
  let total_visitors_II = document.getElementById("total-visitors-II");
  let loaderTotalVisitorsII = document.getElementById("loaderTotalVisitorsII");
  let dt2_tv = document.getElementById("dt2_tv");

  // loaderTotalVisitorsII.style.display = "none";
  // totalVisitorsNoDataII.style.display = "block";

  // if (globalType == "daily") {
  //   dt2_tv.innerHTML = "Total Visitors " + globalDateFirst;
  // } else {
  //   dt2_tv.innerHTML =
  //     "Total Visitors " + globalDateFirst + " to " + globalDateSecond;
  // }

  // loaderTotalVisitorsII.style.display = "block";
  // totalVisitorsNoDataII.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getTotalVisitorsII + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(" get Total Visitor");
    console.log(getTotalVisitorsII + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object.open(
      "GET",
      getTotalVisitorsII +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalVisitorsII +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunTotalVisitorsII = JSON.parse(this.responseText);

    console.log("Total Visitors  - ");
    console.log(resfunTotalVisitorsII);

    let label_key = Object.keys(resfunTotalVisitorsII.response);
    let data_value = Object.values(resfunTotalVisitorsII.response);

    originalChartTotalVisitorII = {
      type: "bar",
      data: {
        labels: label_key,
        datasets: [
          {
            label: "Visitors",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: data_value,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    };

    let myChart = new Chart(total_visitors_II, originalChartTotalVisitorII)

    loaderTotalVisitorsII.style.display = "none";
    totalVisitorsNoDataII.style.display = "none";
    total_visitors_II.style.display = "block";


    // infoTotalVisitorsIIIcon,TotalVisitorsIIDiv,closeTotalVisitorsII,TotalVisitorsIIInfo
    infoTotalVisitorsIIIcon.addEventListener("click", InfoModal);
    let TotalVisitorsIIDiv = document.getElementById('TotalVisitorsIIDiv');
    let closeTotalVisitorsII = document.getElementById('closeTotalVisitorsII');
    function InfoModal(event) {
      event.stopPropagation();
      TotalVisitorsIIDiv.style.display = "block";
      if (resfunTotalVisitorsII.info) {
        let TotalVisitorsIIInfo = document.getElementById("TotalVisitorsIIInfo");
        let TotalVisitorsIIInfo2 = document.getElementById("TotalVisitorsIIInfo2");


        TotalVisitorsIIInfo.innerHTML = "<b>Formula :</b> " + resfunTotalVisitorsII.info.formula;
        TotalVisitorsIIInfo2.innerHTML = "<b>Info  : </b>" + resfunTotalVisitorsII.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TotalVisitorsIIDiv.contains(event.target) && event.target.id !== 'infoTotalVisitorsIIIcon') {
        closeTotalVisitorsIIDiv();
      }
    });
    closeTotalVisitorsII.addEventListener("click", closeTotalVisitorsIIDiv);
    function closeTotalVisitorsIIDiv() {
      TotalVisitorsIIDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalVisitorsIIDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    // let sum = 0;
    // let resValues = Object.values(resfunTotalVisitorsII.response);

    // for (let i = 0; i < resValues.length; i += 1) {
    //   sum = resValues[i] + sum;
    // }

    // // if (sum == 0) {
    // //   totalVisitorsNoDataII.style.display = "block";
    // //   total_visitors_II.style.display = "none";
    // // } else {
    //   totalVisitorsNoDataII.style.display = "none";
    //   total_visitors_II.style.display = "block";
    // // }
    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;
    let clickedTotalVisitors2 = true;
    let TotalVisitorIIdrillDownLevel = 1;
    // refreshIconElement_totalVisitorII  dataDropdown_totalVisitorII  listItemLabelTotalVisitorII TotalVisitorIIdrillDownLevel  originalChartTotalVisitorII  total_visitors_II
    if (!funTotalVisitors2.initialized) {
      total_visitors_II.onclick = function (event) {

        if (clickedTotalVisitors2 == true) {

          const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

          if (points.length) {
            firstPoint = points[0];
            const label = myChart.data.labels[firstPoint.index];
            const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];

            console.log(`Clicked on ${label} with value ${value}`);
            selectedlabelValue = label;
            document.getElementById("listItemLabelTotalVisitorII").textContent = `Ticket: ${label}`;
            myChart.update();
            // document.getElementById("listItemValue").textContent = `Value: ${value}`;

            // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
            // dropdown.show();

            const dropdown = (document.getElementById("dataDropdown_totalVisitorII"));
            dropdown.style.display = "block";


          }

          dataDropdown_totalVisitorII.addEventListener("click", function (event) {

            // if (selectedOption === "Tower" || "Flat_Type" || "Status" || "Created_By" || "Proactive/Reactive" || "Category" || "Sub_Category" || "Assign_To" || "Priority" || "Ticket_Type" || "Related_To" && currentChartType === "bar") {
            if (event.target.id != "closeDropdown") {
              if (TotalVisitorIIdrillDownLevel === 1) {
                selectedOption = event.target.id;
                firstPoint = points[0];
                labelname = myChart.data.labels[firstPoint.index];
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedOption);




                document.getElementById("firstDrillDownVisitors").style.display = "block";
                document.getElementById("firstDrillDownVisitors").textContent = ` - ${selectedOption}`

                let xhr_object = new XMLHttpRequest();
                let apiURL;

                apiURL =
                  getTotalVisitorsIIDrillDown +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drill_down_on=" +
                  "" +
                  "&sec_drilldown_by=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                console.log("TicketCategoryDrill  1");
                console.log(apiURL);
                xhr_object.open("GET", apiURL, true);



                downloadTotalVisitorIILink = ip + "fm-excel-download/get-site-wise-visitors-drill-down-excel/" + idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  "" +
                  "&sec_drill_down_on=" +
                  "" +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;


                xhr_object.onload = function () {
                  resfunTotalVisitorsIIDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverMonths Drill Down -1 ");
                  console.log(resfunTotalVisitorsIIDrill);

                  const labels = resfunTotalVisitorsIIDrill.response.map(item => item[1]);
                  const data = resfunTotalVisitorsIIDrill.response.map(item => item[0]);
                  myChart.destroy();
                  myChart = new Chart(total_visitors_II, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }
                xhr_object.send();
                TotalVisitorIIdrillDownLevel = 2;
              } else if (TotalVisitorIIdrillDownLevel === 2) {

                // alert(selectedOption);
                // alert(labelname);
                // alert(selectedlabelValue);
                const firstPoint = points[0];
                // alert(firstPoint.index);
                const selectedSecondOption = event.target.id;
                const labelSecond = myChart.data.labels[firstPoint.index];
                const labelnameSecond = labelSecond;
                backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
                console.log(selectedSecondOption);
                console.log(selectedlabelValue);
                // console.log(backgroundColors);

                document.getElementById("firstDrillDownVisitors").style.display = "none";
                document.getElementById("secondDrilldownVisitors").style.display = "block";
                document.getElementById("secondDrilldownVisitors").textContent = ` - ${selectedSecondOption}`

                apiURL =
                  getTotalVisitorsIIDrillDown +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;
                // alert("second drill down api");
                console.log(apiURL);

                xhr_object.open("GET", apiURL, true);

                downloadTotalVisitorIILink = ip + "fm-excel-download/get-site-wise-visitors-drill-down-excel/" +
                  idLink +
                  "&first_drilldown_by=" +
                  selectedOption +
                  "&status=" +
                  labelname +
                  "&sec_drilldown_by=" +
                  selectedSecondOption +
                  "&sec_drill_down_on=" +
                  selectedlabelValue +
                  "&from_date=" +
                  globalDateFirst +
                  "&to_date=" +
                  globalDateSecond;

                xhr_object.onload = function () {
                  resfunTotalVisitorsIIDrill = JSON.parse(this.responseText);
                  console.log("TrendsOverMonths Drill Down -2 ");
                  console.log(resfunTotalVisitorsIIDrill);

                  const labels = resfunTotalVisitorsIIDrill.response.map(item => item[1]);
                  const data = resfunTotalVisitorsIIDrill.response.map(item => item[0]);
                  myChart.destroy();
                  myChart = new Chart(total_visitors_II, {
                    type: "bar",
                    data: {
                      labels: labels,
                      datasets: [{
                        label: "Data",
                        data: data,
                        backgroundColor: ["#e2445b"],
                      }]
                    },
                    options: {
                      responsive: true,
                      interaction: {
                        intersect: false,
                      },
                      scales: {
                        x: {
                          stacked: true,
                        },
                        y: {
                          stacked: true,
                        },
                      },
                      maintainAspectRatio: false,
                      scales: {
                        x: {
                        },
                      },
                      plugins: {
                        datalabels: {
                          color: "#000000",
                          anchor: "end",
                          align: "end",
                          offset: -6,
                          font: {
                            size: "10",
                            weight: "bold",
                          },
                          formatter: function (value, context) {
                            // Hide label if value is zero
                            return value === 0 ? '' : value;
                          }
                        },
                        legend: {
                          display: true,
                          position: "no",
                        },
                      },
                    },
                    plugins: [ChartDataLabels],
                  });

                }
                xhr_object.send();
                TotalVisitorIIdrillDownLevel = 3;
                clickedTotalVisitors2 = false;
                return;
              }
            }
            else {
              if (TotalVisitorIIdrillDownLevel === 1) {
                restoreOriginalChart();
              }
            }

            dataDropdown_totalVisitorII.style.display = "none";
          });

        } else if (clickedTotalVisitors2 == false) {
          alert("You have reached the maximum drill-down level.");
        }


      };
    }
    function restoreOriginalChart() {
      if (originalChartTotalVisitorII) {
        myChart.destroy();
        funTotalVisitors2();
        clickedTotalVisitors2 = true;
        document.getElementById("firstDrillDownVisitors").style.display = "none";
        document.getElementById("secondDrilldownVisitors").style.display = "none";
      }
    }

    refreshIconElement_totalVisitorII.addEventListener("click", restoreOriginalChart);


    // refreshIconElement_totalVisitorII  dataDropdown_totalVisitorII  listItemLabelTotalVisitorII
  };

  xhr_object.send();
}



function funSitePermit() {
  // loaderSitePermit,SitePermitNoData,sitePermit
  let SitePermitNoData = document.getElementById("SitePermitNoData");
  let sitePermit = document.getElementById("sitePermit");
  let loaderSitePermit = document.getElementById(
    "loaderSitePermit"
  );


  // loaderSitePermit.style.display = "block";
  // SitePermitNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getSitePermit + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getSitePermit + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getSitePermit +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getSitePermit +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  // xhr_object.onload = function () {
  //   // Parse the JSON response
  //   var resfunSitePermit = JSON.parse(this.responseText);

  //   console.log("Permit Site------------------- - ");
  //   console.log(resfunSitePermit);

  //   const locations = Object.keys(resfunSitePermit.response);
  //   const categories = resfunSitePermit.response[locations[0]].map(item => item[1]);
  //   const data = categories.map((category, index) => (
  //     locations.map(location => resfunSitePermit.response[location].find(item => item[index] === category))
  //   ));


  //   // Your existing code to generate random color
  //   function getRandomColor() {
  //     const letters = "0123456789ABCDEF";
  //     let color = "#";
  //     for (let i = 0; i < 6; i++) {
  //       color += letters[Math.floor(Math.random() * 16)];
  //     }
  //     return color;
  //   }

  //   // Create a new Chart
  //   new Chart(sitePermit, {
  //     type: "bar",
  //     data: {
  //       labels: locations,
  //       datasets: categories.map((category, index) => ({
  //         label: category,
  //         data: data.map(locationData => locationData[index]),
  //         backgroundColor: getRandomColor(),
  //         stack: "Stack 0",
  //       })),
  //     },
  //     options: {
  //       responsive: true,
  //       interaction: {
  //         intersect: false,
  //       },
  //       scales: {
  //         x: {
  //           beginAtZero: true,
  //           title: {
  //             display: true,
  //             text: 'Sites',
  //             padding: {
  //               top: 20,
  //             },
  //           },
  //         },
  //         y: {
  //           stacked: true, // Stack bars on the y-axis
  //           beginAtZero: true,
  //           title: {
  //             display: true,
  //             text: 'Type of Permits created'
  //           },
  //         },
  //       },
  //       maintainAspectRatio: false,
  //       plugins: {
  //         datalabels: {
  //           color: "#000000",
  //           anchor: "end",
  //           align: "end",
  //           offset: -6,
  //           font: {
  //             size: "10",
  //             weight: "bold",
  //           },
  //         },
  //         legend: {
  //           labels: {
  //             usePointStyle: true,
  //           },
  //           display: true,
  //           position: "top",
  //           align: "end"
  //         },
  //       },
  //     },
  //   });


  //   loaderSitePermit.style.display = "none";

  //   // if (labels.length === 0) {
  //   //   SitePermitNoData.style.display = "block";
  //   //   sitePermit.style.display = "none";
  //   // } else {
  //     SitePermitNoData.style.display = "none";
  //     sitePermit.style.display = "block";
  //   // }
  // };


  xhr_object.onload = function () {
    // Parse the JSON response
    var resfunSitePermit = JSON.parse(this.responseText);

    console.log("Permit Site------------------- - ");
    console.log(resfunSitePermit);

    const locations = Object.keys(resfunSitePermit.response);
    const categories = Array.from(
      new Set(
        locations.flatMap(
          (location) => resfunSitePermit.response[location].map((item) => item[1])
        )
      )
    );

    const data = locations.map((location) =>
      categories.map((category) => {
        const foundItem = resfunSitePermit.response[location].find(
          (item) => item[1] === category
        );
        return foundItem ? foundItem[0] : 0;
      })
    );

    // Your existing code to generate random color
    function getRandomColor() {
      const letters = "0123456789ABCDEF";
      let color = "#";
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    // Create a new Chart
    originalChartConfigSitePermit = {
      type: "bar",
      data: {
        labels: locations,
        datasets: categories.map((category, index) => ({
          label: category,
          data: data.map((locationData) => locationData[index]),
          backgroundColor: getRandomColor(),
          stack: "Stack 0",
        })),
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: "Sites",
              padding: {
                top: 20,
              },
            },
          },
          y: {
            stacked: true, // Stack bars on the y-axis
            beginAtZero: true,
            title: {
              display: true,
              text: "Type of Permits created",
            },
          },
        },
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true,
            },
            display: true,
            position: "top",
            align: "end",
          },
        },
      },
    };

    let myChart = new Chart(sitePermit, originalChartConfigSitePermit)

    loaderSitePermit.style.display = "none";

    // if (labels.length === 0) {
    //   SitePermitNoData.style.display = "block";
    //   sitePermit.style.display = "none";
    // } else {
    SitePermitNoData.style.display = "none";
    sitePermit.style.display = "block";
    // }

    // refreshIconElement_permitSite

    refreshIconElement_permitSite.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      if (originalChartConfigSitePermit) {
        myChart.destroy();
        loaderSitePermit.style.display = "block";
        funSitePermit();

      }
    }

    infoPermitPerSiteIcon.addEventListener("click", InfoModal);
    let PermitPerSiteDiv = document.getElementById('PermitPerSiteDiv');
    let closePermitPerSite = document.getElementById('closePermitPerSite');
    function InfoModal(event) {
      event.stopPropagation();
      PermitPerSiteDiv.style.display = "block";
      if (resfunSitePermit.info) {
        let PermitPerSiteInfo = document.getElementById("PermitPerSiteInfo");
        let PermitPerSiteInfo2 = document.getElementById("PermitPerSiteInfo2");

        PermitPerSiteInfo.innerHTML = "<b>Formula :</b> " + resfunSitePermit.info.formula;
        PermitPerSiteInfo2.innerHTML = "<b>Info :</b> " + resfunSitePermit.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!PermitPerSiteDiv.contains(event.target) && event.target.id !== 'infoPermitPerSiteIcon') {
        closePermitPerSiteDiv();
      }
    });
    closePermitPerSite.addEventListener("click", closePermitPerSiteDiv);
    function closePermitPerSiteDiv() {
      PermitPerSiteDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PermitPerSiteDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };

  xhr_object.send();

  function getRandomColor() {
    return "#" + Math.floor(Math.random() * 16777215).toString(16);
  }


}



function funGetZeroIncidentDaysTop() {
  let cardZeroIncidentDaysTop = document.getElementById("cardZeroIncidentDaysTop");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open("GET", getZeroIncidentDaysTop + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getZeroIncidentDaysTop + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    const resfunGetZeroIncidentDaysTop = JSON.parse(this.responseText);
    console.log("Zero Incidents - ");
    console.log(resfunGetZeroIncidentDaysTop);

    const cardZeroIncidentDaysTop = document.getElementById('cardZeroIncidentDaysTop');
    cardZeroIncidentDaysTop.innerHTML = resfunGetZeroIncidentDaysTop.response.join(' ');

    const infoIncidentZeroIconTop = document.getElementById('infoIncidentZeroIconTop');
    infoIncidentZeroIconTop.addEventListener("click", InfoModal);

    const IncidentZeroDivTop = document.getElementById('IncidentZeroDivTop');
    const closeIncidentZeroTop = document.getElementById('closeIncidentZeroTop');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentZeroDivTop.style.display = "block";

      if (resfunGetZeroIncidentDaysTop.info) {
        console.log(resfunGetZeroIncidentDaysTop.info);

        const IncidentZeroInfoTop = document.getElementById("IncidentZeroInfoTop");
        const IncidentZeroInfoTop2 = document.getElementById("IncidentZeroInfoTop2");
        const IncidentZeroInfoTop3 = document.getElementById("IncidentZeroInfoTop3");


        IncidentZeroInfoTop.innerHTML = "<b>Info :</b> " + resfunGetZeroIncidentDaysTop.info["Info"];
        IncidentZeroInfoTop2.innerHTML = "<b>Last incident date :</b> " + resfunGetZeroIncidentDaysTop.info["Last incident date"];
        IncidentZeroInfoTop3.innerHTML = "<b>Last incident id : </b>" + resfunGetZeroIncidentDaysTop.info["Last incident id"];

      } else {
        console.error("Info not found in response.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentZeroDivTop.contains(event.target) && event.target.id !== 'infoIncidentZeroIconTop') {
        closeIncidentZeroDivTop();
      }
    });

    closeIncidentZeroTop.addEventListener("click", closeIncidentZeroDivTop);

    function closeIncidentZeroDivTop() {
      IncidentZeroDivTop.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    IncidentZeroDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };

  xhr_object.send();

}


function Refresh_a122() {
  let cardZeroIncidentDaysTop = document.getElementById("cardZeroIncidentDaysTop");
  let loader = document.getElementById("loader_a122");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardZeroIncidentDaysTop.innerHTML = ""; // Clear the content while loading
    let xhr_object = new XMLHttpRequest();
    // xhr_object.open("GET", getCustomerAverage + idLink, true);

    if (globalType == "daily") {
      xhr_object.open("GET", getZeroIncidentDaysTop + idLink + "&date=" + globalDateFirst, true);
    } else {
      xhr_object.open("GET", getZeroIncidentDaysTop + idLink + "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond, true);
    }

    xhr_object.onload = function () {
      resfunGetZeroIncidentDaysTop = JSON.parse(this.responseText);
      console.log("Zero Incidents - ");
      console.log(resfunGetZeroIncidentDaysTop);
      // Check if response exists and if it's greater than 0 hours
      if (resfunGetZeroIncidentDaysTop.response && parseFloat(resfunGetZeroIncidentDaysTop.response) > 0) {
        cardZeroIncidentDaysTop.innerHTML = resfunGetZeroIncidentDaysTop.response + "";
      } else {
        cardZeroIncidentDaysTop.innerHTML = "No data available";
        cardZeroIncidentDaysTop.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };


    xhr_object.send();
  }

  // Initial data fetch
  fetchData();


}


function funGetIncidentPerSqFtTop() {
  let cardIncidentPerSqFtTop = document.getElementById("cardIncidentPerSqFtTop");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getIncidentPerSqFtTop + idLink, true);

  xhr_object.onload = function () {
    resfunGetIncidentPerSqFtTop = JSON.parse(this.responseText);
    console.log("Incidents Per Sq. Ft. - ");
    console.log(resfunGetIncidentPerSqFtTop);
    cardIncidentPerSqFtTop.innerHTML = resfunGetIncidentPerSqFtTop.response + "";

    infoIncidentSqIconTop.addEventListener("click", InfoModal);
    let IncidentSqDivTop = document.getElementById('IncidentSqDivTop');
    let closeIncidentSqTop = document.getElementById('closeIncidentSqTop');
    function InfoModal(event) {
      event.stopPropagation();
      IncidentSqDivTop.style.display = "block";
      if (resfunGetIncidentPerSqFtTop.info) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        console.log(resfunGetIncidentPerSqFtTop.info.formula);
        let IncidentSqInfoTop = document.getElementById("IncidentSqInfoTop");
        let IncidentSqInfoTop2 = document.getElementById("IncidentSqInfoTop2");
        let IncidentSqInfo3 = document.getElementById("IncidentSqInfoTop3");
        let IncidentSqInfoTop4 = document.getElementById("IncidentSqInfoTop4");
        let IncidentSqInfoTop5 = document.getElementById("IncidentSqInfoTop5");

        IncidentSqInfoTop.innerHTML = "<b>Formula :</b> " + resfunGetIncidentPerSqFtTop.info.formula;
        IncidentSqInfoTop2.innerHTML = "<b>Info :</b> " + resfunGetIncidentPerSqFtTop.info["info"];
        // IncidentSqInfo3.innerHTML = "Type of incident : " + resfunGetIncidentPerSqFt.info["Type of incident"];
        IncidentSqInfoTop4.innerHTML = "<b>Incidents : </b>" + resfunGetIncidentPerSqFtTop.info["incidents"];
        IncidentSqInfoTop5.innerHTML = "<b>Area: </b>" + resfunGetIncidentPerSqFtTop.info["area"];

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!IncidentSqDivTop.contains(event.target) && event.target.id !== 'infoIncidentSqIconTop') {
        closeIncidentSqDivTop();
      }
    });
    closeIncidentSqTop.addEventListener("click", closeIncidentSqDivTop);
    function closeIncidentSqDivTop() {
      IncidentSqDivTop.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    IncidentSqDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();
}

function Refresh_a123() {
  let cardIncidentPerSqFtTop = document.getElementById("cardIncidentPerSqFtTop");
  let loader = document.getElementById("loader_a123");

  // Function to fetch data
  function fetchData() {
    loader.style.display = "block"; // Show loader
    cardIncidentPerSqFtTop.innerHTML = ""; // Clear the content while loading
    let xhr_object = new XMLHttpRequest();
    // xhr_object.open("GET", getCustomerAverage + idLink, true);

    xhr_object.open("GET", getIncidentPerSqFtTop + idLink, true);

    xhr_object.onload = function () {
      resfunGetIncidentPerSqFtTop = JSON.parse(this.responseText);
      console.log("Incidents Per Sq. Ft. - ");
      console.log(resfunGetIncidentPerSqFtTop);
      // Check if response exists and if it's greater than 0 hours
      if (resfunGetIncidentPerSqFtTop.response && parseFloat(resfunGetIncidentPerSqFtTop.response) > 0) {
        cardIncidentPerSqFtTop.innerHTML = resfunGetIncidentPerSqFtTop.response + "";
      } else {
        cardIncidentPerSqFtTop.innerHTML = "No data available";
        cardIncidentPerSqFtTop.style.fontSize = "30px";
      }

      loader.style.display = "none"; // Hide loader
    };


    xhr_object.send();
  }

  // Initial data fetch
  fetchData();


}


function funPermitStatus() {
  // permitStatus,loaderPermitStatus,PermitStatusNoData
  let PermitStatusNoData = document.getElementById("PermitStatusNoData");
  let permitStatus = document.getElementById("permitStatus");
  let loaderPermitStatus = document.getElementById(
    "loaderPermitStatus"
  );


  // loaderPermitStatus.style.display = "block";
  // PermitStatusNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getPermitStatus + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(
      getPermitStatus + idLink + "&date=" + globalDateFirst
    );
  } else {
    xhr_object.open(
      "GET",
      getPermitStatus +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getPermitStatus +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }

  xhr_object.onload = function () {
    resfunPermitStatus = JSON.parse(this.responseText);

    console.log("Permit Status------------------------ - ");
    console.log(resfunPermitStatus);

    let total = resfunPermitStatus.response.Total;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // Specify colors for each segment
    // var backgroundColors = ["#5ae717", "yellow", "red"];

    // Create a new Chart
    originalChartConfigPermit = {
      type: "doughnut",
      data: {
        labels: ["Closed", "Extended", "Open"],
        datasets: [
          {
            label: "Permit Status",
            backgroundColor: ["#5ae717", "yellow", "red"],
            data: [
              resfunPermitStatus.response.Closed,
              resfunPermitStatus.response.Extended,
              resfunPermitStatus.response.Open,

            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            // anchor: "end",
            // align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels, centerText],
    };

    let myChart = new Chart(permitStatus, originalChartConfigPermit)

    loaderPermitStatus.style.display = "none";

    // if (labels.length === 0) {
    PermitStatusNoData.style.display = "none";
    //   permitStatus.style.display = "none";
    // } else {
    //   PermitStatusNoData.style.display = "none";
    permitStatus.style.display = "block";
    // }

    // Manually draw total in the center
    var ctx = myChart.ctx;
    var centerX = myChart.width / 2;
    var centerY = myChart.height / 2;

    ctx.font = "16px Arial";
    ctx.fillStyle = "#000000";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText("Total: " + total, centerX, centerY);

    // refreshIconElement_permitStatus

    refreshIconElement_permitStatus.addEventListener("click", restoreOriginalChartPermit);

    function restoreOriginalChartPermit() {
      if (originalChartConfigPermit) {
        myChart.destroy();
        funPermitStatus();

      }
    }

    infoPermitStatusIcon.addEventListener("click", InfoModal);
    let PermitStatusDiv = document.getElementById('PermitStatusDiv');
    let closePermitStatus = document.getElementById('closePermitStatus');
    function InfoModal(event) {
      event.stopPropagation();
      PermitStatusDiv.style.display = "block";
      if (resfunPermitStatus.info) {
        let PermitStatusInfo = document.getElementById("PermitStatusInfo");
        let PermitStatusInfo2 = document.getElementById("PermitStatusInfo2");

        PermitStatusInfo.innerHTML = "<b>Formula :</b> " + resfunPermitStatus.info.formula;
        PermitStatusInfo2.innerHTML = "<b>Info :</b> " + resfunPermitStatus.info.info;


        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!PermitStatusDiv.contains(event.target) && event.target.id !== 'infoPermitStatusIcon') {
        closePermitStatusDiv();
      }
    });
    closePermitStatus.addEventListener("click", closePermitStatusDiv);
    function closePermitStatusDiv() {
      PermitStatusDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PermitStatusDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };








  xhr_object.send();




}



function funOutstanding() {
  let OutstandingNoData = document.getElementById("OutstandingNoData");
  let tblOutstandinginfo = document.getElementById("tblOutstandinginfo");
  let tablebodyOutstanding = document.getElementById("tablebodyOutstanding");
  let loaderOutstanding = document.getElementById("loaderOutstanding");

  // tblOutstandinginfo.style.display = "none";
  // loaderOutstanding.style.display = "block";
  // OutstandingNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getOutstandingTable + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getOutstandingTable +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }

  xhr_object.onload = function () {
    resfunOutstanding = JSON.parse(this.responseText);
    console.log("OutStanding Amount TABLE------");
    console.log(resfunOutstanding);

    console.log(getIncidentsRCATable + idLink);

    let resfunOutstandingArray = resfunOutstanding.client_outstanding;
    let allDetails = "";

    for (let x in resfunOutstandingArray) {
      allDetails +=
        `<tr>` +
        `<td style="text-align: left;">` + resfunOutstandingArray[x].site_name + `</td>` +
        `<td>` + resfunOutstandingArray[x].outstanding_amount + `</td>` +
        `<td>` + resfunOutstandingArray[x].percentage + `%</td>` +
        `</tr>`;
    }

    tablebodyOutstanding.innerHTML = allDetails;

    loaderOutstanding.style.display = "none";
    if (resfunOutstandingArray.length == 0) {
      OutstandingNoData.style.display = "block";
      tblOutstandinginfo.style.display = "none";
    } else {
      OutstandingNoData.style.display = "none";
      tblOutstandinginfo.style.display = "inline-table";
    }


    refreshIconElement_ClientWise.addEventListener("click", restoreOriginalChart);

    function restoreOriginalChart() {
      loaderOutstanding.style.display = "block";
      tblOutstandinginfo.style.display = "none";
      funOutstanding();
    }
    // refreshIconElement_ClientWise

    let infoClientWiseOutstandingIcon = document.getElementById('infoClientWiseOutstandingIcon');

    // Check if the element exists before adding the event listener
    if (infoClientWiseOutstandingIcon) {
      infoClientWiseOutstandingIcon.addEventListener("click", InfoModal);
    }

    let ClientWiseOutstandingDiv = document.getElementById('ClientWiseOutstandingDiv');
    let closeClientWiseOutstanding = document.getElementById('closeClientWiseOutstanding');

    function InfoModal(event) {
      event.stopPropagation();
      ClientWiseOutstandingDiv.style.display = "block";
      if (resfunOutstanding.info) {
        let ClientWiseOutstandingInfo = document.getElementById("ClientWiseOutstandingInfo");
        let ClientWiseOutstandingInfo2 = document.getElementById("ClientWiseOutstandingInfo2");

        ClientWiseOutstandingInfo.innerHTML = "<b>Formula :</b> " + resfunOutstanding.info.formula;
        ClientWiseOutstandingInfo2.innerHTML = "<b>Info :</b> " + resfunOutstanding.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ClientWiseOutstandingDiv.contains(event.target) && event.target.id !== 'infoClientWiseOutstandingIcon') {
        closeClientWiseOutstandingDiv();
      }
    });
    if (closeClientWiseOutstanding) {
      closeClientWiseOutstanding.addEventListener("click", closeClientWiseOutstandingDiv);
    }


    function closeClientWiseOutstandingDiv() {
      ClientWiseOutstandingDiv.style.display = "none";
    }

    if (ClientWiseOutstandingDiv) {
      ClientWiseOutstandingDiv.addEventListener("click", function (event) {
        event.stopPropagation();
      });
    }
  }

  xhr_object.send();
}


function funInventory() {  // overStock,underStock,totalInventory titleInventory,capitalBlock , valueConsumable,valueSpares
  console.log("inventoryyyyyyyyyyyyyyyyyyyy");
  let titleInventory = document.getElementById("titleInventory");
  let overStock = document.getElementById("overStock");
  let underStock = document.getElementById("underStock");
  let totalInventory = document.getElementById("totalInventory");
  let capitalBlock = document.getElementById("capitalBlock");
  let purchaseOrder = document.getElementById("purchaseOrder");
  let workOrder = document.getElementById("workOrder");
  let valueConsumable = document.getElementById("valueConsumable");
  let valueSpares = document.getElementById("valueSpares");
  // if (globalType == "daily") {
  //   titleInventory.innerHTML =
  //     "Inventory  for " + convertDateFormat(globalDateFirst);
  // } else {
  //   titleInventory.innerHTML =
  //     "Inventory for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
  // }

  // ----------------------------------------------

  let xhr_object1 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object1.open(
      "GET",
      gettotalInventory + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(gettotalInventory + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object1.open(
      "GET",
      gettotalInventory +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      gettotalInventory +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object1.onload = function () {
    resfuntotalInventory = JSON.parse(this.responseText);
    console.log("Total Value of Inventory - ");
    console.log(resfuntotalInventory);

    totalInventory.innerHTML =
      resfuntotalInventory.total_inventory_response;

    capitalBlock.innerHTML =
      resfuntotalInventory.capital_block;


    infoTotalValueOfInventoryIcon.addEventListener("click", InfoModal);
    let TotalValueOfInventoryDiv = document.getElementById('TotalValueOfInventoryDiv');
    let closeTotalValueOfInventory = document.getElementById('closeTotalValueOfInventory');
    function InfoModal(event) {
      event.stopPropagation();
      TotalValueOfInventoryDiv.style.display = "block";
      if (resfuntotalInventory.info_total_value_of_inventory) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let TotalValueOfInventoryInfo = document.getElementById("TotalValueOfInventoryInfo");
        let TotalValueOfInventoryInfo2 = document.getElementById("TotalValueOfInventoryInfo2");
        let TotalValueOfInventoryInfo3 = document.getElementById("TotalValueOfInventoryInfo3");

        TotalValueOfInventoryInfo.innerHTML = "<b>Formula :</b> " + resfuntotalInventory.info_total_value_of_inventory.formula;
        TotalValueOfInventoryInfo2.innerHTML = "<b>Info :</b> " + resfuntotalInventory.info_total_value_of_inventory.info;
        TotalValueOfInventoryInfo3.innerHTML = "<b>Total value of inventory :</b> " + resfuntotalInventory.info_total_value_of_inventory.total_value_of_inventory;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TotalValueOfInventoryDiv.contains(event.target) && event.target.id !== 'infoTotalValueOfInventoryIcon') {
        closeTotalValueOfInventoryDiv();
      }
    });
    closeTotalValueOfInventory.addEventListener("click", closeTotalValueOfInventoryDiv);
    function closeTotalValueOfInventoryDiv() {
      TotalValueOfInventoryDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalValueOfInventoryDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    infoCapitalBlockedIcon.addEventListener("click", InfoModal2);
    let CapitalBlockedDiv = document.getElementById('CapitalBlockedDiv');
    let closeCapitalBlocked = document.getElementById('closeCapitalBlocked');
    function InfoModal2(event) {
      event.stopPropagation();
      CapitalBlockedDiv.style.display = "block";
      if (resfuntotalInventory.info_total_cost_capital_block) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let CapitalBlockedInfo = document.getElementById("CapitalBlockedInfo");
        let CapitalBlockedInfo2 = document.getElementById("CapitalBlockedInfo2");
        let CapitalBlockedInfo3 = document.getElementById("CapitalBlockedInfo3");

        CapitalBlockedInfo.innerHTML = "<b>Formula : </b>" + resfuntotalInventory.info_total_cost_capital_block.formula;
        CapitalBlockedInfo2.innerHTML = "<b>Info : </b>" + resfuntotalInventory.info_total_cost_capital_block.info;
        CapitalBlockedInfo3.innerHTML = "<b>Capital blocked of overstocking :</b> " + resfuntotalInventory.info_total_cost_capital_block.capital_blocked_of_overstocking;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CapitalBlockedDiv.contains(event.target) && event.target.id !== 'infoCapitalBlockedIcon') {
        closeCapitalBlockedDiv();
      }
    });
    closeCapitalBlocked.addEventListener("click", closeCapitalBlockedDiv);
    function closeCapitalBlockedDiv() {
      CapitalBlockedDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CapitalBlockedDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };
  xhr_object1.send();

  // infoTotalValueOfInventoryIcon ,TotalValueOfInventoryDiv ,closeTotalValueOfInventory,TotalValueOfInventoryInfo
  // infoCapitalBlockedIcon ,CapitalBlockedDiv , closeCapitalBlocked,CapitalBlockedInfo

  //---------------------------------------------------------

  let xhr_object2 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object2.open(
      "GET",
      getOverUnderStock + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getOverUnderStock + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object2.open(
      "GET",
      getOverUnderStock +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getOverUnderStock +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object2.onload = function () {
    console.log("stockkkkkkkkkkkkkkkkkkk");
    // resfunOverUnderStock = JSON.parse(this.responseText);
    resfunOverUnderStock = JSON.parse(this.responseText);
    console.log("Over Under Stock - ");
    console.log(resfunOverUnderStock);
    overStock.innerHTML =
      resfunOverUnderStock.over_stock_response;

    underStock.innerHTML =
      resfunOverUnderStock.under_stock_response;


    infoOverStockItemsIcon.addEventListener("click", InfoModal);
    let OverStockItemsDiv = document.getElementById('OverStockItemsDiv');
    let closeOverStockItems = document.getElementById('closeOverStockItems');
    function InfoModal(event) {
      event.stopPropagation();
      OverStockItemsDiv.style.display = "block";
      if (resfunOverUnderStock.info_over_stock) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let OverStockItemsInfo = document.getElementById("OverStockItemsInfo");
        let OverStockItemsInfo2 = document.getElementById("OverStockItemsInfo2");
        let OverStockItemsInfo3 = document.getElementById("OverStockItemsInfo3");

        OverStockItemsInfo.innerHTML = "<b>Formula : </b>" + resfunOverUnderStock.info_over_stock.formula;
        OverStockItemsInfo2.innerHTML = "<b>Info :</b> " + resfunOverUnderStock.info_over_stock.info;
        OverStockItemsInfo3.innerHTML = "<b>Over stock :</b> " + resfunOverUnderStock.info_over_stock.over_stock;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!OverStockItemsDiv.contains(event.target) && event.target.id !== 'infoOverStockItemsIcon') {
        closeOverStockItemsDiv();
      }
    });
    closeOverStockItems.addEventListener("click", closeOverStockItemsDiv);
    function closeOverStockItemsDiv() {
      OverStockItemsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OverStockItemsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    infoUnderStockItemsIcon.addEventListener("click", InfoModal2);
    let UnderStockItemsDiv = document.getElementById('UnderStockItemsDiv');
    let closeUnderStockItems = document.getElementById('closeUnderStockItems');
    function InfoModal2(event) {
      event.stopPropagation();
      UnderStockItemsDiv.style.display = "block";
      if (resfunOverUnderStock.info_under_stock) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let UnderStockItemsInfo = document.getElementById("UnderStockItemsInfo");
        let UnderStockItemsInfo2 = document.getElementById("UnderStockItemsInfo2");
        let UnderStockItemsInfo3 = document.getElementById("UnderStockItemsInfo3");

        UnderStockItemsInfo.innerHTML = "<b>Formula : </b>" + resfunOverUnderStock.info_under_stock.formula;
        UnderStockItemsInfo2.innerHTML = "<b>Info : </b>" + resfunOverUnderStock.info_under_stock.info;
        UnderStockItemsInfo3.innerHTML = "<b>Under stock : </b>" + resfunOverUnderStock.info_under_stock.over_stock;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!UnderStockItemsDiv.contains(event.target) && event.target.id !== 'infoUnderStockItemsIcon') {
        closeUnderStockItemsDiv();
      }
    });

    closeUnderStockItems.addEventListener("click", closeUnderStockItemsDiv);
    function closeUnderStockItemsDiv() {
      UnderStockItemsDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    UnderStockItemsDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };
  xhr_object2.send();
  // infoOverStockItemsIcon,OverStockItemsDiv,closeOverStockItems,OverStockItemsInfo
  // infoUnderStockItemsIcon,UnderStockItemsDiv,closeUnderStockItems,UnderStockItemsInfo

  let xhr_object3 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object3.open(
      "GET",
      getPurchaseOrder + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getPurchaseOrder + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object3.open(
      "GET",
      getPurchaseOrder +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getPurchaseOrder +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object3.onload = function () {
    resfunpurchaseOrder = JSON.parse(this.responseText);
    console.log("Purchase Order - ");
    console.log(resfunpurchaseOrder);
    purchaseOrder.innerHTML = resfunpurchaseOrder.puchase_order_response;

    workOrder.innerHTML = resfunpurchaseOrder.work_order_response;


    infoWorkOrderIcon.addEventListener("click", InfoModal);
    let WorkOrderDiv = document.getElementById('WorkOrderDiv');
    let closeWorkOrder = document.getElementById('closeWorkOrder');
    function InfoModal(event) {
      event.stopPropagation();
      WorkOrderDiv.style.display = "block";
      if (resfunpurchaseOrder.info_work_order) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let WorkOrderInfo = document.getElementById("WorkOrderInfo");
        let WorkOrderInfo2 = document.getElementById("WorkOrderInfo2");
        let WorkOrderInfo3 = document.getElementById("WorkOrderInfo3");

        WorkOrderInfo.innerHTML = "<b>Formula : </b>" + resfunpurchaseOrder.info_work_order.formula;
        WorkOrderInfo2.innerHTML = "<b>Info : </b>" + resfunpurchaseOrder.info_work_order.info;
        WorkOrderInfo3.innerHTML = "<b>Work order :</b> " + resfunpurchaseOrder.info_work_order.work_order;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!WorkOrderDiv.contains(event.target) && event.target.id !== 'infoWorkOrderIcon') {
        closeWorkOrderDiv();
      }
    });

    closeWorkOrder.addEventListener("click", closeWorkOrderDiv);
    function closeWorkOrderDiv() {
      WorkOrderDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    WorkOrderDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });




    infoPurchaseOrderIcon.addEventListener("click", InfoModal2);
    let PurchaseOrderDiv = document.getElementById('PurchaseOrderDiv');
    let closePurchaseOrder = document.getElementById('closePurchaseOrder');
    function InfoModal2(event) {
      event.stopPropagation();
      PurchaseOrderDiv.style.display = "block";
      if (resfunpurchaseOrder.info_purchase_order) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let PurchaseOrderInfo = document.getElementById("PurchaseOrderInfo");
        let PurchaseOrderInfo2 = document.getElementById("PurchaseOrderInfo2");
        let PurchaseOrderInfo3 = document.getElementById("PurchaseOrderInfo3");

        PurchaseOrderInfo.innerHTML = "<b>Formula : </b>" + resfunpurchaseOrder.info_purchase_order.formula;
        PurchaseOrderInfo2.innerHTML = "<b>Info :</b> " + resfunpurchaseOrder.info_purchase_order.info;
        PurchaseOrderInfo3.innerHTML = "<b>Purchase order :</b> " + resfunpurchaseOrder.info_purchase_order.purchase_order;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!PurchaseOrderDiv.contains(event.target) && event.target.id !== 'infoPurchaseOrderIcon') {
        closePurchaseOrderDiv();
      }
    });

    closePurchaseOrder.addEventListener("click", closePurchaseOrderDiv);
    function closePurchaseOrderDiv() {
      PurchaseOrderDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PurchaseOrderDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object3.send();
  // infoWorkOrderIcon,WorkOrderDiv,closeWorkOrder,WorkOrderInfo
  // infoPurchaseOrderIcon ,PurchaseOrderDiv,closePurchaseOrder,PurchaseOrderInfo

  // --------------------------------------------------------------

  let xhr_object4 = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object4.open(
      "GET",
      getTotalValues + idLink + "&date=" + globalDateFirst,
      true
    );
    console.log(getTotalValues + idLink + "&date=" + globalDateFirst);
  } else {
    xhr_object4.open(
      "GET",
      getTotalValues +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
    console.log(
      getTotalValues +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond
    );
  }
  xhr_object4.onload = function () {
    resfuntotalValue = JSON.parse(this.responseText);
    console.log("Total Values - ");
    console.log(resfuntotalValue);
    valueConsumable.innerHTML = resfuntotalValue.consumable_response;

    valueSpares.innerHTML = resfuntotalValue.spare_response;


    infoValueofConsumablesIcon.addEventListener("click", InfoModal);
    let ValueofConsumablesDiv = document.getElementById('ValueofConsumablesDiv');
    let closeValueofConsumables = document.getElementById('closeValueofConsumables');
    function InfoModal(event) {
      event.stopPropagation();
      ValueofConsumablesDiv.style.display = "block";
      if (resfuntotalValue.info_total_value_of_consumable) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let ValueofConsumablesInfo = document.getElementById("ValueofConsumablesInfo");
        let ValueofConsumablesInfo2 = document.getElementById("ValueofConsumablesInfo2");
        let ValueofConsumablesInfo3 = document.getElementById("ValueofConsumablesInfo3");

        ValueofConsumablesInfo.innerHTML = "<b>Formula : </b>" + resfuntotalValue.info_total_value_of_consumable.formula;
        ValueofConsumablesInfo2.innerHTML = "<b>Info :</b> " + resfuntotalValue.info_total_value_of_consumable.info;
        ValueofConsumablesInfo3.innerHTML = "<b>Total value of consumable : </b>" + resfuntotalValue.info_total_value_of_consumable.total_value_of_consumable;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ValueofConsumablesDiv.contains(event.target) && event.target.id !== 'infoValueofConsumablesIcon') {
        closeValueofConsumablesDiv();
      }
    });

    closeValueofConsumables.addEventListener("click", closeValueofConsumablesDiv);
    function closeValueofConsumablesDiv() {
      ValueofConsumablesDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ValueofConsumablesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });



    infoValueofSparesIcon.addEventListener("click", InfoModal2);
    let ValueofSparesDiv = document.getElementById('ValueofSparesDiv');
    let closeValueofSpares = document.getElementById('closeValueofSpares');
    function InfoModal2(event) {
      event.stopPropagation();
      ValueofSparesDiv.style.display = "block";
      if (resfuntotalValue.info_total_value_of_spare) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let ValueofSparesInfo = document.getElementById("ValueofSparesInfo");
        let ValueofSparesInfo2 = document.getElementById("ValueofSparesInfo2");
        let ValueofSparesInfo3 = document.getElementById("ValueofSparesInfo3");

        ValueofSparesInfo.innerHTML = "<b>Formula : </b>" + resfuntotalValue.info_total_value_of_spare.formula;
        ValueofSparesInfo2.innerHTML = "<b>Info : </b>" + resfuntotalValue.info_total_value_of_spare.info;
        ValueofSparesInfo3.innerHTML = "<b>Total value of spare :</b> " + resfuntotalValue.info_total_value_of_spare.total_value_of_spare;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!ValueofSparesDiv.contains(event.target) && event.target.id !== 'ValueofSparesDiv') {
        closeValueofSparesDiv();
      }
    });
    closeValueofSpares.addEventListener("click", closeValueofSparesDiv);
    function closeValueofSparesDiv() {
      ValueofSparesDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ValueofSparesDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object4.send();

  // infoValueofConsumablesIcon,ValueofConsumablesDiv,closeValueofConsumables,ValueofConsumablesInfo
  // infoValueofSparesIcon ,ValueofSparesDiv,closeValueofSpares,ValueofSparesInfo
  // -----------------------------------------------------------------

}

function Refresh_OverStock() {
  let overStock = document.getElementById("overStock");
  let loader = document.getElementById("loader_OverStock");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    overStock.innerHTML = "";

    let xhr_object = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object.open(
        "GET",
        getOverUnderStock + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getOverUnderStock + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object.open(
        "GET",
        getOverUnderStock +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getOverUnderStock +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object.onload = function () {
      resfunOverUnderStock = JSON.parse(this.responseText);
      console.log("Over Under Stock - ");
      console.log(resfunOverUnderStock);
      // Check if response exists and if it's greater than 0 hours
      if (resfunOverUnderStock && parseFloat(resfunOverUnderStock.over_stock_response) > 0) {
        overStock.innerHTML = resfunOverUnderStock.over_stock_response + "";
      } else {
        overStock.innerHTML = "No data available";
        overStock.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object.send();

  }

  fetchData();

}


function Refresh_UnderStock() {
  let underStock = document.getElementById("underStock");
  let loader = document.getElementById("loader_UnderStock");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    underStock.innerHTML = "";

    let xhr_object2 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object2.open(
        "GET",
        getOverUnderStock + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getOverUnderStock + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object2.open(
        "GET",
        getOverUnderStock +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getOverUnderStock +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object2.onload = function () {
      resfunOverUnderStock = JSON.parse(this.responseText);
      console.log("Over Under Stock - ");
      console.log(resfunOverUnderStock);
      // Check if response exists and if it's greater than 0 hours
      if (resfunOverUnderStock && parseFloat(resfunOverUnderStock.under_stock_response) > 0) {
        underStock.innerHTML =
          resfunOverUnderStock.under_stock_response;
      } else {
        underStock.innerHTML = "No data available";
        underStock.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object2.send();

  }

  fetchData();

}



function Refresh_WorkOrder() {
  let workOrder = document.getElementById("workOrder");
  let loader = document.getElementById("loader_WorkOrder");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    workOrder.innerHTML = "";

    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getPurchaseOrder + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getPurchaseOrder + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getPurchaseOrder +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getPurchaseOrder +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunpurchaseOrder = JSON.parse(this.responseText);
      console.log("Purchase Order - ");
      console.log(resfunpurchaseOrder);
      // Check if response exists and if it's greater than 0 hours
      if (resfunpurchaseOrder && parseFloat(resfunpurchaseOrder.work_order_response) > 0) {
        workOrder.innerHTML = resfunpurchaseOrder.work_order_response;
      } else {
        workOrder.innerHTML = "No data available";
        workOrder.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}



function Refresh_purchaseOrder() {
  let purchaseOrder = document.getElementById("purchaseOrder");
  let loader = document.getElementById("loader_purchaseOrder");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    purchaseOrder.innerHTML = "";

    let xhr_object3 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object3.open(
        "GET",
        getPurchaseOrder + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getPurchaseOrder + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object3.open(
        "GET",
        getPurchaseOrder +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getPurchaseOrder +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object3.onload = function () {
      resfunpurchaseOrder = JSON.parse(this.responseText);
      console.log("Purchase Order - ");
      console.log(resfunpurchaseOrder);
      // Check if response exists and if it's greater than 0 hours
      if (resfunpurchaseOrder && parseFloat(resfunpurchaseOrder.puchase_order_response) > 0) {
        purchaseOrder.innerHTML = resfunpurchaseOrder.puchase_order_response;
      } else {
        purchaseOrder.innerHTML = "No data available";
        purchaseOrder.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object3.send();

  }

  fetchData();

}


function Refresh_TotalValue() {
  let totalInventory = document.getElementById("totalInventory");
  let loader = document.getElementById("loader_TotalValue");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    totalInventory.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        gettotalInventory + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(gettotalInventory + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object1.open(
        "GET",
        gettotalInventory +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        gettotalInventory +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfuntotalInventory = JSON.parse(this.responseText);
      console.log("Total Value of Inventory - ");
      console.log(resfuntotalInventory);
      // Check if response exists and if it's greater than 0 hours
      if (resfuntotalInventory && parseFloat(resfuntotalInventory.total_inventory_response) > 0) {
        totalInventory.innerHTML =
          resfuntotalInventory.total_inventory_response;

      } else {
        totalInventory.innerHTML = "No data available";
        totalInventory.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}

function Refresh_capitalBlock() {
  let capitalBlock = document.getElementById("capitalBlock");
  let loader = document.getElementById("loader_capitalBlock");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    capitalBlock.innerHTML = "";

    let xhr_object1 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object1.open(
        "GET",
        gettotalInventory + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(gettotalInventory + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object1.open(
        "GET",
        gettotalInventory +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        gettotalInventory +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object1.onload = function () {
      resfuntotalInventory = JSON.parse(this.responseText);
      console.log("Total Value of Inventory - ");
      console.log(resfuntotalInventory);
      // Check if response exists and if it's greater than 0 hours
      if (resfuntotalInventory && parseFloat(resfuntotalInventory.capital_block) > 0) {
        capitalBlock.innerHTML =
          resfuntotalInventory.capital_block;

      } else {
        capitalBlock.innerHTML = "No data available";
        capitalBlock.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object1.send();

  }

  fetchData();

}




function Refresh_valueConsumable() {
  let valueConsumable = document.getElementById("valueConsumable");
  let loader = document.getElementById("loader_valueConsumable");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    valueConsumable.innerHTML = "";

    let xhr_object4 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object4.open(
        "GET",
        getTotalValues + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTotalValues + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object4.open(
        "GET",
        getTotalValues +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTotalValues +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object4.onload = function () {
      resfuntotalValue = JSON.parse(this.responseText);
      console.log("Total Values - ");
      console.log(resfuntotalValue);
      // Check if response exists and if it's greater than 0 hours
      if (resfuntotalValue && parseFloat(resfuntotalValue.consumable_response) > 0) {
        valueConsumable.innerHTML = resfuntotalValue.consumable_response;

      } else {
        valueConsumable.innerHTML = "No data available";
        valueConsumable.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object4.send();

  }

  fetchData();

}


function Refresh_valueSpares() {
  let valueSpares = document.getElementById("valueSpares");
  let loader = document.getElementById("loader_valueSpares");

  function fetchData() {
    loader.style.display = "block"; // Show loader
    valueSpares.innerHTML = "";

    let xhr_object4 = new XMLHttpRequest();
    if (globalType == "daily") {
      xhr_object4.open(
        "GET",
        getTotalValues + idLink + "&date=" + globalDateFirst,
        true
      );
      console.log(getTotalValues + idLink + "&date=" + globalDateFirst);
    } else {
      xhr_object4.open(
        "GET",
        getTotalValues +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond,
        true
      );
      console.log(
        getTotalValues +
        idLink +
        "&from_date=" +
        globalDateFirst +
        "&to_date=" +
        globalDateSecond
      );
    }

    xhr_object4.onload = function () {
      resfuntotalValue = JSON.parse(this.responseText);
      console.log("Total Values - ");
      console.log(resfuntotalValue);
      // Check if response exists and if it's greater than 0 hours
      if (resfuntotalValue && parseFloat(resfuntotalValue.spare_response) > 0) {
        valueSpares.innerHTML = resfuntotalValue.spare_response;

      } else {
        valueSpares.innerHTML = "No data available";
        valueSpares.style.fontSize = "10px";
      }

      loader.style.display = "none"; // Hide loader
    };
    xhr_object4.send();

  }

  fetchData();

}

function funTotalAmount() { // TotalOutstandingDiv,closeTotalOutstanding,TotalOutstandingInfo
  let totalAmount = document.getElementById("totalAmount");
  let totalReceived = document.getElementById("totalReceived");
  let totalOutstanding = document.getElementById("totalOutstanding");

  let xhr_object = new XMLHttpRequest();

  if (globalType == "daily") {
    xhr_object.open("GET", getTotalAmount + idLink + "&date=" + globalDateFirst, true);
  } else {
    xhr_object.open("GET", getTotalAmount + idLink + "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond, true);
  }

  xhr_object.onload = function () {
    resfungetTotalAmount = JSON.parse(this.responseText);
    console.log("Total Amount - ");
    console.log(resfungetTotalAmount);
    if (totalAmount) {
      totalAmount.innerHTML = resfungetTotalAmount.total_amount_response;
    }
    if (totalReceived) {
      totalReceived.innerHTML = resfungetTotalAmount.received_amount_response;
    }
    if (totalOutstanding) {
      totalOutstanding.innerHTML = resfungetTotalAmount.total_outstanding;

    }


    infoTotalOutstandingIcon.addEventListener("click", InfoModal);

    let TotalOutstandingDiv = document.getElementById('TotalOutstandingDiv');
    let closeTotalOutstanding = document.getElementById('closeTotalOutstanding');
    closeTotalOutstanding.addEventListener("click", closeTotalOutstandingDiv);
    function InfoModal(event) {
      event.stopPropagation();
      TotalOutstandingDiv.style.display = "block";
      if (resfungetTotalAmount.info_outstanding) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let TotalOutstandingInfo = document.getElementById("TotalOutstandingInfo");
        let TotalOutstandingInfo2 = document.getElementById("TotalOutstandingInfo2");
        let TotalOutstandingInfo3 = document.getElementById("TotalOutstandingInfo3");
        let TotalOutstandingInfo4 = document.getElementById("TotalOutstandingInfo4");
        let TotalOutstandingInfo5 = document.getElementById("TotalOutstandingInfo5");


        TotalOutstandingInfo.innerHTML = "<b>Formula :</b> " + resfungetTotalAmount.info_outstanding.formula;
        TotalOutstandingInfo2.innerHTML = "<b>Info :</b> " + resfungetTotalAmount.info_outstanding.info;
        TotalOutstandingInfo3.innerHTML = "<b>Total Amount :</b> " + resfungetTotalAmount.info_outstanding.total_amount;
        TotalOutstandingInfo4.innerHTML = "<b>Outstanding Amount :</b> " + resfungetTotalAmount.info_outstanding.outstanding_amount;
        TotalOutstandingInfo5.innerHTML = "<b>Paid Amount : </b>" + resfungetTotalAmount.info_outstanding.paid_amount;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!TotalOutstandingDiv.contains(event.target) && event.target.id !== 'infoTotalOutstandingIcon') {
        closeTotalOutstandingDiv();
      }
    });


    function closeTotalOutstandingDiv() {
      TotalOutstandingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalOutstandingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    infoTotalReceivedIcon.addEventListener("click", InfoModal2);
    let TotalReceivedDiv = document.getElementById('TotalReceivedDiv');
    let closeTotalReceived = document.getElementById('closeTotalReceived');
    function InfoModal2(event) {
      event.stopPropagation();
      TotalReceivedDiv.style.display = "block";
      if (resfungetTotalAmount.info_paid) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let TotalReceivedInfo = document.getElementById("TotalReceivedInfo");
        let TotalReceivedInfo2 = document.getElementById("TotalReceivedInfo2");
        let TotalReceivedInfo3 = document.getElementById("TotalReceivedInfo3");

        TotalReceivedInfo.innerHTML = "<b>Formula :</b> " + resfungetTotalAmount.info_paid.formula;
        TotalReceivedInfo2.innerHTML = "<b>Info :</b> " + resfungetTotalAmount.info_paid.info;
        TotalReceivedInfo3.innerHTML = "<b>Paid Amount : </b> " + resfungetTotalAmount.info_paid.paid_amount;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalReceivedDiv.contains(event.target) && event.target.id !== 'infoTotalReceivedIcon') {
        closeTotalReceivedDiv();
      }
    });
    closeTotalReceived.addEventListener("click", closeTotalReceivedDiv);
    function closeTotalReceivedDiv() {
      TotalReceivedDiv.style.display = "none";
    }


    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalReceivedDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    infoTotalAmountIcon.addEventListener("click", InfoModal3);
    let TotalAmountDiv = document.getElementById('TotalAmountDiv');
    let closeTotalAmount = document.getElementById('closeTotalAmount');
    function InfoModal3(event) {
      event.stopPropagation();
      TotalAmountDiv.style.display = "block";
      if (resfungetTotalAmount.info_total) {
        // showInfoModal(resfunCarbonEmissionScope2.info.formula);
        // console.log(resfunGetLTIR.info.formula);
        let TotalAmountInfo = document.getElementById("TotalAmountInfo");
        let TotalAmountInfo2 = document.getElementById("TotalAmountInfo2");
        let TotalAmountInfo3 = document.getElementById("TotalAmountInfo3");

        TotalAmountInfo.innerHTML = "<b>Formula :</b> " + resfungetTotalAmount.info_total.formula;
        TotalAmountInfo2.innerHTML = "<b>Info :</b> " + resfungetTotalAmount.info_total.info;
        TotalAmountInfo3.innerHTML = "<b>Total Amount :</b> " + resfungetTotalAmount.info_total.total_amount;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalAmountDiv.contains(event.target) && event.target.id !== 'infoTotalAmountIcon') {
        closeTotalAmountDiv();
      }
    });
    closeTotalAmount.addEventListener("click", closeTotalAmountDiv);
    function closeTotalAmountDiv() {
      TotalAmountDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalAmountDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


    // function refreshcard() {
    //   funTotalAmount();
    // }
    // refreshIconElement_totalAmount.addEventListener("click", refreshcard);
  };
  xhr_object.send();


  // function formatIndianRupee(value) {
  //   const countValue = parseInt(value);
  //   const formattedCount = new Intl.NumberFormat( {
  //     style: 'currency',
  //     currency: 'INR',
  //     minimumFractionDigits: 0,
  //     maximumFractionDigits: 0,
  //     useGrouping: true,
  //   }).format(countValue);

  //   return formattedCount;
  // }


}

function funIncidentSummary() {  // tblIncidentSummaryinfo,tablebodyIncidentSummary,loaderIncidentSummary,IncidentSummaryNoData
  let IncidentSummaryNoData = document.getElementById("IncidentSummaryNoData");
  let tblIncidentSummaryinfo = document.getElementById("tblIncidentSummaryinfo");
  let tablebodyIncidentSummary = document.getElementById("tablebodyIncidentSummary");
  let loaderIncidentSummary = document.getElementById("loaderIncidentSummary");

  // tblRCAinfo.style.display = "none";
  // loaderRCA.style.display = "block";
  // RCANoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsSummary + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getIncidentsSummary +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  // console.log("RCA -1 ");
  // console.log(resfunRCA.response);
  xhr_object.onload = function () {
    resfunIncidentSummary = JSON.parse(this.responseText);
    console.log("Incident Summary-------------");
    console.log(resfunIncidentSummary);

    // console.log(getIncidentsRCATable + idLink);

    let resfunIncidentSummaryArray = resfunIncidentSummary.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunIncidentSummaryArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][0] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][1] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][2] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][3] +
        `</td>`;

      if (resfunIncidentSummaryArray[x][4] < 0 || resfunIncidentSummaryArray[x][4] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][4] + `</td>`;
      }
      // `<td>` +
      // resfunRCAArray[x][5] +
      // `</td>`
      if (resfunIncidentSummaryArray[x][5] < 0 || resfunIncidentSummaryArray[x][5] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][5] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][6] < 0 || resfunIncidentSummaryArray[x][6] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][6] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][7] < 0 || resfunIncidentSummaryArray[x][7] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][7] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][13] < 0 || resfunIncidentSummaryArray[x][13] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][13] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][8] < 0 || resfunIncidentSummaryArray[x][8] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][8] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][9] < 0 || resfunIncidentSummaryArray[x][9] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][9] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][10] < 0 || resfunIncidentSummaryArray[x][10] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][10] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][11] < 0 || resfunIncidentSummaryArray[x][11] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][11] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][12] < 0 || resfunIncidentSummaryArray[x][12] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][12] + `</td>`;
      }

      allDetails = allDetails + `</tr>`;
    }
    tablebodyIncidentSummary.innerHTML = allDetails;

    loaderIncidentSummary.style.display = "none";
    if (resfunIncidentSummaryArray.length == 0) {
      IncidentSummaryNoData.style.display = "block";
      tblIncidentSummaryinfo.style.display = "none";
    } else {
      IncidentSummaryNoData.style.display = "none";
      tblIncidentSummaryinfo.style.display = "block";
    }
  };
  xhr_object.send();
}




function funIncidentSummaryTop() {  // tblIncidentSummaryinfo,tablebodyIncidentSummary,loaderIncidentSummary,IncidentSummaryNoData
  let IncidentSummaryNoDataTop = document.getElementById("IncidentSummaryNoDataTop");
  let tblIncidentSummaryinfoTop = document.getElementById("tblIncidentSummaryinfoTop");
  let tablebodyIncidentSummaryTop = document.getElementById("tablebodyIncidentSummaryTop");
  let loaderIncidentSummaryTop = document.getElementById("loaderIncidentSummaryTop");

  // tblRCAinfo.style.display = "none";
  // loaderRCA.style.display = "block";
  // RCANoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  if (globalType == "daily") {
    xhr_object.open(
      "GET",
      getIncidentsSummaryTop + idLink + "&date=" + globalDateFirst,
      true
    );
  } else {
    xhr_object.open(
      "GET",
      getIncidentsSummaryTop +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      true
    );
  }
  // console.log("RCA -1 ");
  // console.log(resfunRCA.response);
  xhr_object.onload = function () {
    resfunIncidentSummaryTop = JSON.parse(this.responseText);
    console.log("Incident Summary-------------");
    console.log(resfunIncidentSummaryTop);

    // console.log(getIncidentsRCATable + idLink);

    let resfunIncidentSummaryArrayTop = resfunIncidentSummaryTop.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunIncidentSummaryArrayTop) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunIncidentSummaryArrayTop[x][0] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunIncidentSummaryArrayTop[x][1] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunIncidentSummaryArrayTop[x][2] +
        `</td>` +
        `<td style="text-align: left;">` +
        resfunIncidentSummaryArrayTop[x][3] +
        `</td>`;

      if (resfunIncidentSummaryArrayTop[x][4] < 0 || resfunIncidentSummaryArrayTop[x][4] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][4] + `</td>`;
      }
      // `<td>` +
      // resfunRCAArray[x][5] +
      // `</td>`
      if (resfunIncidentSummaryArrayTop[x][5] < 0 || resfunIncidentSummaryArrayTop[x][5] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][5] + `</td>`;
      }
      if (resfunIncidentSummaryArrayTop[x][6] < 0 || resfunIncidentSummaryArrayTop[x][6] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][6] + `</td>`;
      }
      if (resfunIncidentSummaryArrayTop[x][7] < 0 || resfunIncidentSummaryArrayTop[x][7] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][7] + `</td>`;
      }

      if (resfunIncidentSummaryArrayTop[x][13] < 0 || resfunIncidentSummaryArrayTop[x][13] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][13] + `</td>`;
      }

      if (resfunIncidentSummaryArrayTop[x][8] < 0 || resfunIncidentSummaryArrayTop[x][8] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][8] + `</td>`;
      }

      if (resfunIncidentSummaryArrayTop[x][9] < 0 || resfunIncidentSummaryArrayTop[x][9] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][9] + `</td>`;
      }
      if (resfunIncidentSummaryArrayTop[x][10] < 0 || resfunIncidentSummaryArrayTop[x][10] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][10] + `</td>`;
      }
      if (resfunIncidentSummaryArrayTop[x][11] < 0 || resfunIncidentSummaryArrayTop[x][11] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][11] + `</td>`;
      }
      if (resfunIncidentSummaryArrayTop[x][12] < 0 || resfunIncidentSummaryArrayTop[x][12] == null) {
        allDetails = allDetails + `<td style="text-align: left;"></td>`;
      } else {
        allDetails = allDetails + `<td style="text-align: left;">` + resfunIncidentSummaryArrayTop[x][12] + `</td>`;
      }

      allDetails = allDetails + `</tr>`;
    }
    tablebodyIncidentSummaryTop.innerHTML = allDetails;

    loaderIncidentSummaryTop.style.display = "none";
    if (resfunIncidentSummaryArrayTop.length == 0) {
      IncidentSummaryNoDataTop.style.display = "block";
      tblIncidentSummaryinfoTop.style.display = "none";
    } else {
      IncidentSummaryNoDataTop.style.display = "none";
      tblIncidentSummaryinfoTop.style.display = "block";
    }
    // infoIncidentSummaryIcon,IncidentSummaryDiv,closeIncidentSummary,IncidentSummaryInfo
    // refreshIconElementIncidentSummary

    infoIncidentSummaryIconTop.addEventListener("click", InfoModal);
    let IncidentSummaryDivTop = document.getElementById('IncidentSummaryDivTop');
    let closeIncidentSummaryTop = document.getElementById('closeIncidentSummaryTop');

    function InfoModal(event) {
      event.stopPropagation();
      IncidentSummaryDivTop.style.display = "block";
      if (resfunIncidentSummaryTop.info) {
        let IncidentSummaryInfoTop = document.getElementById("IncidentSummaryInfoTop");
        let IncidentSummaryInfoTop2 = document.getElementById("IncidentSummaryInfoTop2");

        IncidentSummaryInfoTop.innerHTML = "<b>Formula :</b> " + resfunIncidentSummaryTop.info.formula;
        IncidentSummaryInfoTop2.innerHTML = "<b>Info :</b> " + resfunIncidentSummaryTop.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!IncidentSummaryDivTop.contains(event.target) && event.target.id !== 'infoIncidentSummaryIconTop') {
        closeIncidentSummaryDivTop();
      }
    });

    closeIncidentSummaryTop.addEventListener("click", closeIncidentSummaryDivTop);

    function closeIncidentSummaryDivTop() {
      IncidentSummaryDivTop.style.display = "none";
    }

    IncidentSummaryDivTop.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    function restoreOriginal() {
      loaderIncidentSummaryTop.style.display = "block";
      tblIncidentSummaryinfoTop.style.display = "none";
      funIncidentSummaryTop()

    }

    refreshIconElementIncidentSummaryTop.addEventListener("click", restoreOriginal);

  };
  xhr_object.send();
}

function funCardParking() {
  let cardTotalParking = document.getElementById("cardTotalParking");


  let xhr_object = new XMLHttpRequest();
  xhr_object.open("GET", getParking + idLink + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, true);

  xhr_object.onload = function () {
    let resfunCardParking = JSON.parse(this.responseText);
    console.log("Parking----------- - ");
    console.log(resfunCardParking);

    // Update HTML elements with values from the response
    cardTotalParking.innerHTML = resfunCardParking.total_parking + "";

    infoTotalParkingIcon.addEventListener("click", InfoModal);
    let TotalParkingDiv = document.getElementById('TotalParkingDiv');
    let closeTotalParking = document.getElementById('closeTotalParking');
    function InfoModal(event) {
      event.stopPropagation();
      TotalParkingDiv.style.display = "block";
      if (resfunCardParking.info) {
        ;
        let TotalParkingInfo = document.getElementById("TotalParkingInfo");
        let TotalParkingInfo2 = document.getElementById("TotalParkingInfo2");


        TotalParkingInfo.innerHTML = "<b>Formula :</b> " + resfunCardParking.info.formula;
        TotalParkingInfo2.innerHTML = "<b>Info :</b>" + resfunCardParking.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!TotalParkingDiv.contains(event.target) && event.target.id !== 'infoTotalParkingIcon') {
        closeTotalParkingDiv();
      }
    });
    closeTotalParking.addEventListener("click", closeTotalParkingDiv);
    function closeTotalParkingDiv() {
      TotalParkingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    TotalParkingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };

  xhr_object.send();





  // infoTotalParkingIcon,TotalParkingDiv,closeTotalParking,TotalParkingInfo

  // -------------------------------------------------------------------

  let cardFreeParking = document.getElementById("cardFreeParking");
  let cardPaidParking = document.getElementById("cardPaidParking");

  let xhr_object2 = new XMLHttpRequest();
  xhr_object2.open("GET", getPaidFreeParking + idLink + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, true);

  xhr_object2.onload = function () {
    let resfunCardParkingPaidFree = JSON.parse(this.responseText);
    console.log("Paid Free Parking----------- - ");
    console.log(resfunCardParkingPaidFree);

    // Update HTML elements with values from the response
    cardPaidParking.innerHTML = resfunCardParkingPaidFree.response.paid_parking + "";
    cardFreeParking.innerHTML = resfunCardParkingPaidFree.response.free_parking + "";

    infoFreeParkingIcon.addEventListener("click", InfoModal);
    let FreeParkingDiv = document.getElementById('FreeParkingDiv');
    let closeFreeParking = document.getElementById('closeFreeParking');
    function InfoModal(event) {
      event.stopPropagation();
      FreeParkingDiv.style.display = "block";
      if (resfunCardParkingPaidFree.info_free_parking) {
        ;
        let FreeParkingInfo = document.getElementById("FreeParkingInfo");
        let FreeParkingInfo2 = document.getElementById("FreeParkingInfo2");


        FreeParkingInfo.innerHTML = "<b>Formula :</b> " + resfunCardParkingPaidFree.info_free_parking.formula;
        FreeParkingInfo2.innerHTML = "<b>Info :</b> " + resfunCardParkingPaidFree.info_free_parking.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!FreeParkingDiv.contains(event.target) && event.target.id !== 'infoFreeParkingIcon') {
        closeFreeParkingDiv();
      }
    });

    closeFreeParking.addEventListener("click", closeFreeParkingDiv);
    function closeFreeParkingDiv() {
      FreeParkingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FreeParkingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

    infoPaidParkingIcon.addEventListener("click", InfoModal2);
    let PaidParkingDiv = document.getElementById('PaidParkingDiv');
    let closePaidParking = document.getElementById('closePaidParking');
    function InfoModal2(event) {
      event.stopPropagation();
      PaidParkingDiv.style.display = "block";
      if (resfunCardParkingPaidFree.info_paid_parking) {
        ;
        let PaidParkingInfo = document.getElementById("PaidParkingInfo");
        let PaidParkingInfo2 = document.getElementById("PaidParkingInfo2");


        PaidParkingInfo.innerHTML = "<b>Formula :</b>" + resfunCardParkingPaidFree.info_paid_parking.formula;
        PaidParkingInfo2.innerHTML = "<b>Info :</b>  " + resfunCardParkingPaidFree.info_paid_parking.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!PaidParkingDiv.contains(event.target) && event.target.id !== 'infoPaidParkingIcon') {
        closePaidParkingDiv();
      }
    });
    closePaidParking.addEventListener("click", closePaidParkingDiv);
    function closePaidParkingDiv() {
      PaidParkingDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    PaidParkingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };

  xhr_object2.send();
  // infoFreeParkingIcon,FreeParkingDiv,closeFreeParking,FreeParkingInfo
  // -------------------------------------------------------------

  let CardOccupiedParking = document.getElementById("CardOccupiedParking");
  let occupiedFour = document.getElementById("occupiedFour");
  let occupiedTwo = document.getElementById("occupiedTwo");

  let xhr_object3 = new XMLHttpRequest();
  xhr_object3.open("GET", getOccupiedParking + idLink + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, true);

  xhr_object3.onload = function () {
    let resfunCardParkingOccpied = JSON.parse(this.responseText);
    console.log("Occupied Parking----------- - ");
    console.log(resfunCardParkingOccpied);

    // Update HTML elements with values from the response
    CardOccupiedParking.innerHTML = resfunCardParkingOccpied.response.occupied_parking + "";
    occupiedFour.innerHTML = resfunCardParkingOccpied.response["4_wheeler_parking"] + "";
    occupiedTwo.innerHTML = resfunCardParkingOccpied.response["2_wheeler_parking"] + "";

    infoOccupiedParkingIcon.addEventListener("click", InfoModal);
    let OccupiedParkingDiv = document.getElementById('OccupiedParkingDiv');
    let closeOccupiedParking = document.getElementById('closeOccupiedParking');
    function InfoModal(event) {
      event.stopPropagation();
      OccupiedParkingDiv.style.display = "block";
      if (resfunCardParkingOccpied.info) {
        ;
        let OccupiedParkingInfo = document.getElementById("OccupiedParkingInfo");
        let OccupiedParkingInfo2 = document.getElementById("OccupiedParkingInfo2");
        let OccupiedParkingInfo3 = document.getElementById("OccupiedParkingInfo3");
        let OccupiedParkingInfo4 = document.getElementById("OccupiedParkingInfo4");


        OccupiedParkingInfo.innerHTML = "<b>Formula : </b>" + resfunCardParkingOccpied.info.formula;
        OccupiedParkingInfo2.innerHTML = "<b>Info : </b> " + resfunCardParkingOccpied.info.info;
        OccupiedParkingInfo3.innerHTML = "<b>Allocated parking for four wheeler : </b> " + resfunCardParkingOccpied.info.allocated_parking_for_four_wheeler;
        OccupiedParkingInfo4.innerHTML = "<b>Allocated parking for two wheeler : </b>" + resfunCardParkingOccpied.info.allocated_parking_for_two_wheeler;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!OccupiedParkingDiv.contains(event.target) && event.target.id !== 'infoOccupiedParkingIcon') {
        closeOccupiedParkingDiv();
      }
    });
    closeOccupiedParking.addEventListener("click", closeOccupiedParkingDiv);
    function closeOccupiedParkingDiv() {
      OccupiedParkingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OccupiedParkingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });


  };

  xhr_object3.send();
  // infoOccupiedParkingIcon,OccupiedParkingDiv,closeOccupiedParking,OccupiedParkingInfo
  // ------------------------------------------------------------

  let cardVacantParking = document.getElementById("cardVacantParking");
  let fourVacant = document.getElementById("fourVacant");
  let twoVacant = document.getElementById("twoVacant");


  let xhr_object4 = new XMLHttpRequest();
  xhr_object4.open("GET", getVacantParking + idLink + "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond, true);

  xhr_object4.onload = function () {
    let resfunCardParkingVacant = JSON.parse(this.responseText);
    console.log("Vacant Parking----------- - ");
    console.log(resfunCardParkingVacant);

    // Update HTML elements with values from the response
    cardVacantParking.innerHTML = resfunCardParkingVacant.response + "";
    fourVacant.innerHTML = resfunCardParkingVacant.four_wheeler_count + "";
    twoVacant.innerHTML = resfunCardParkingVacant.two_wheeler_count + "";

    infoVacantParkingIcon.addEventListener("click", InfoModal);
    let VacantParkingDiv = document.getElementById('VacantParkingDiv');
    let closeVacantParking = document.getElementById('closeVacantParking');
    function InfoModal(event) {
      event.stopPropagation();
      VacantParkingDiv.style.display = "block";
      if (resfunCardParkingVacant.info) {

        let VacantParkingInfo = document.getElementById("VacantParkingInfo");
        let VacantParkingInfo2 = document.getElementById("VacantParkingInfo2");
        let VacantParkingInfo3 = document.getElementById("VacantParkingInfo3");
        let VacantParkingInfo4 = document.getElementById("VacantParkingInfo4");


        VacantParkingInfo.innerHTML = "<b>Formula : </b>" + resfunCardParkingVacant.info.formula;
        VacantParkingInfo2.innerHTML = "<b>Info : </b>" + resfunCardParkingVacant.info.info;
        VacantParkingInfo3.innerHTML = "<b>Vacant parking for four wheeler :</b> " + resfunCardParkingVacant.info.vacant_parking_for_four_wheeler;
        VacantParkingInfo4.innerHTML = "<b>Vacant parking for two wheeler :</b> " + resfunCardParkingVacant.info.vacant_parking_for_two_wheeler;        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!VacantParkingDiv.contains(event.target) && event.target.id !== 'infoVacantParkingIcon') {
        closeVacantParkingDiv();
      }
    });
    closeVacantParking.addEventListener("click", closeVacantParkingDiv);
    function closeVacantParkingDiv() {
      VacantParkingDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    VacantParkingDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };

  xhr_object4.send();



}
// -------STEPATHON------------------------------------
function funCommLeaderboard() {
  let commulativeLeaderboardNoData = document.getElementById(
    "commulativeLeaderboardNoData"
  );
  let tablebodyCommulativeLeaderboard = document.getElementById(
    "tablebodyCommulativeLeaderboard"
  );
  let tblCommulativeLeaderboardinfo = document.getElementById(
    "tblCommulativeLeaderboardinfo"
  );
  let loaderCommulativeLeaderboard = document.getElementById(
    "loaderCommulativeLeaderboard"
  );

  // tblCommulativeLeaderboardinfo.style.display = "none";
  // loaderCommulativeLeaderboard.style.display = "block";
  // commulativeLeaderboardNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getCommLeaderboard +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );
  console.log("(WE@#TREJGFDGDJGDFGDIFGD(((((((((((((")
  console.log(getCommLeaderboard +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond)

  xhr_object.onload = function () {
    resfunCommLeaderboard = JSON.parse(this.responseText);
    console.log("Leaderboard Male------------ - ");
    console.log(resfunCommLeaderboard);

    let resfunCommLeaderboardArray = resfunCommLeaderboard.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunCommLeaderboardArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td style="text-align:left;">` +
        resfunCommLeaderboardArray[x][0] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardArray[x][1] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyCommulativeLeaderboard.innerHTML = allDetails;

    loaderCommulativeLeaderboard.style.display = "none";
    if (resfunCommLeaderboardArray.length == 0) {
      commulativeLeaderboardNoData.style.display = "block";
      tblCommulativeLeaderboardinfo.style.display = "none";
    } else {
      commulativeLeaderboardNoData.style.display = "none";
      tblCommulativeLeaderboardinfo.style.display = "inline-table";
    }

    // refreshIconElement_CumulativeLeaderboard
    refreshIconElement_CumulativeLeaderboard.addEventListener("click", restoreOriginalChartLeaderBoard);

    function restoreOriginalChartLeaderBoard() {
      loaderCommulativeLeaderboard.style.display = "block";
      tblCommulativeLeaderboardinfo.style.display = "none";
      funCommLeaderboard();
    }
    // infoCumulativeLeaderboardTop10MaleIcon,CumulativeLeaderboardTop10MaleDiv,closeCumulativeLeaderboardTop10Male,CumulativeLeaderboardTop10MaleInfo


    infoCumulativeLeaderboardTop10MaleIcon.addEventListener("click", InfoModal);
    let CumulativeLeaderboardTop10MaleDiv = document.getElementById('CumulativeLeaderboardTop10MaleDiv');
    let closeCumulativeLeaderboardTop10Male = document.getElementById('closeCumulativeLeaderboardTop10Male');
    function InfoModal(event) {
      event.stopPropagation();
      CumulativeLeaderboardTop10MaleDiv.style.display = "block";
      if (resfunCommLeaderboard.info) {
        let CumulativeLeaderboardTop10MaleInfo = document.getElementById("CumulativeLeaderboardTop10MaleInfo");
        let CumulativeLeaderboardTop10MaleInfo2 = document.getElementById("CumulativeLeaderboardTop10MaleInfo2");

        CumulativeLeaderboardTop10MaleInfo2.innerHTML = "<b>Info  : </b>" + resfunCommLeaderboard.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CumulativeLeaderboardTop10MaleDiv.contains(event.target) && event.target.id !== 'infoCumulativeLeaderboardTop10MaleIcon') {
        closeCumulativeLeaderboardTop10MaleDiv();
      }
    });
    closeCumulativeLeaderboardTop10Male.addEventListener("click", closeCumulativeLeaderboardTop10MaleDiv);
    function closeCumulativeLeaderboardTop10MaleDiv() {
      CumulativeLeaderboardTop10MaleDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CumulativeLeaderboardTop10MaleDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();

}

function funDepartmentStats() {
  let DepartmentStatsNoData = document.getElementById(
    "DepartmentStatsNoData"
  );
  let tablebodyFunctionEmployeeParticiption = document.getElementById(
    "tablebodyFunctionEmployeeParticiption"
  );
  let tblFunctionEmployeeParticiptioninfo = document.getElementById(
    "tblFunctionEmployeeParticiptioninfo"
  );
  let loaderDepartmentStats = document.getElementById(
    "loaderDepartmentStats"
  );

  // tblFunctionEmployeeParticiptioninfo.style.display = "none";
  // loaderDepartmentStats.style.display = "block";
  // DepartmentStatsNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getFunctionEmployeeParticipation +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunFunctionEmployeeParticiption = JSON.parse(this.responseText);
    console.log("Function Employee------------- - ");
    console.log(resfunFunctionEmployeeParticiption);

    let resfunFunctionEmployeeParticiptionArray = resfunFunctionEmployeeParticiption.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunFunctionEmployeeParticiptionArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][0] +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][1] +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyFunctionEmployeeParticiption.innerHTML = allDetails;

    loaderDepartmentStats.style.display = "none";
    if (resfunFunctionEmployeeParticiptionArray.length == 0) {
      DepartmentStatsNoData.style.display = "block";
      tblFunctionEmployeeParticiptioninfo.style.display = "none";
    } else {
      DepartmentStatsNoData.style.display = "none";
      tblFunctionEmployeeParticiptioninfo.style.display = "inline-table";
    }
    // refreshIconElement_FunctionEmployee

    refreshIconElement_FunctionEmployee.addEventListener("click", restoreOriginalChartEmployee);

    function restoreOriginalChartEmployee() {
      loaderDepartmentStats.style.display = "block";
      funDepartmentStats();
    }

    // infoFunctionEmployeeParticiptionIcon,FunctionEmployeeParticiptionDiv,closeFunctionEmployeeParticiption,FunctionEmployeeParticiptionInfo

    infoFunctionEmployeeParticiptionIcon.addEventListener("click", InfoModal);
    let FunctionEmployeeParticiptionDiv = document.getElementById('FunctionEmployeeParticiptionDiv');
    let closeFunctionEmployeeParticiption = document.getElementById('closeFunctionEmployeeParticiption');
    function InfoModal(event) {
      event.stopPropagation();
      FunctionEmployeeParticiptionDiv.style.display = "block";
      if (resfunFunctionEmployeeParticiption.info) {
        let FunctionEmployeeParticiptionInfo = document.getElementById("FunctionEmployeeParticiptionInfo");



        FunctionEmployeeParticiptionInfo.innerHTML = "<b>Info :</b> " + resfunFunctionEmployeeParticiption.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!FunctionEmployeeParticiptionDiv.contains(event.target) && event.target.id !== 'infoFunctionEmployeeParticiptionIcon') {
        closeFunctionEmployeeParticiptionDiv();
      }
    });
    closeFunctionEmployeeParticiption.addEventListener("click", closeFunctionEmployeeParticiptionDiv);
    function closeFunctionEmployeeParticiptionDiv() {
      FunctionEmployeeParticiptionDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    FunctionEmployeeParticiptionDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };
  xhr_object.send();
}

function funDailyStepCount() {
  let cardDailyStep = document.getElementById("cardDailyStep");

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getDailyStepCount +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    let resfunDailyStepCount = JSON.parse(this.responseText);
    console.log("Daily Step Count - ");
    console.log(resfunDailyStepCount.response);
    cardDailyStep.innerHTML = resfunDailyStepCount.response + "";


    // infoOrganisationDailyStepCountIcon,OrganisationDailyStepCountDiv,closeOrganisationDailyStepCount,OrganisationDailyStepCountInfo

    infoOrganisationDailyStepCountIcon.addEventListener("click", InfoModal);
    let OrganisationDailyStepCountDiv = document.getElementById('OrganisationDailyStepCountDiv');
    let closeOrganisationDailyStepCount = document.getElementById('closeOrganisationDailyStepCount');
    function InfoModal(event) {
      event.stopPropagation();
      OrganisationDailyStepCountDiv.style.display = "block";
      if (resfunDailyStepCount.info) {
        console.log(resfunDailyStepCount.info);
        let OrganisationDailyStepCountInfo = document.getElementById("OrganisationDailyStepCountInfo");
        OrganisationDailyStepCountInfo.innerHTML = "<b>Info :</b> " + resfunDailyStepCount.info.info;
      } else {
        console.error("Formula not found in response info.");
      }
    }

    document.addEventListener("click", function (event) {
      if (!OrganisationDailyStepCountDiv.contains(event.target) && event.target.id !== 'infoOrganisationDailyStepCountIcon') {
        closeOrganisationDailyStepCountDiv();
      }
    });
    closeOrganisationDailyStepCount.addEventListener("click", closeOrganisationDailyStepCountDiv);
    function closeOrganisationDailyStepCountDiv() {
      OrganisationDailyStepCountDiv.style.display = "none";
    }

    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    OrganisationDailyStepCountDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });

  };



  xhr_object.send();
}



function funCommLeaderboardFemale() {
  let commulativeLeaderboardNoDataFemale = document.getElementById(
    "commulativeLeaderboardNoDataFemale"
  );
  let tablebodyCommulativeLeaderboardFemale = document.getElementById(
    "tablebodyCommulativeLeaderboardFemale"
  );
  let tblCommulativeLeaderboardinfoFemale = document.getElementById(
    "tblCommulativeLeaderboardinfoFemale"
  );
  let loaderCommulativeLeaderboardFemale = document.getElementById(
    "loaderCommulativeLeaderboardFemale"
  );

  // tblCommulativeLeaderboardinfoFemale.style.display = "none";
  // loaderCommulativeLeaderboardFemale.style.display = "block";
  // commulativeLeaderboardNoDataFemale.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getCommLeaderboardFemale +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunCommLeaderboardFemale = JSON.parse(this.responseText);
    console.log("Leaderboard Female------------ - ");
    console.log(resfunCommLeaderboardFemale);

    let resfunCommLeaderboardFemaleArray = resfunCommLeaderboardFemale.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunCommLeaderboardFemaleArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][0] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][1] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyCommulativeLeaderboardFemale.innerHTML = allDetails;

    loaderCommulativeLeaderboardFemale.style.display = "none";
    if (resfunCommLeaderboardFemaleArray.length == 0) {
      commulativeLeaderboardNoDataFemale.style.display = "block";
      tblCommulativeLeaderboardinfoFemale.style.display = "none";
    } else {
      commulativeLeaderboardNoDataFemale.style.display = "none";
      tblCommulativeLeaderboardinfoFemale.style.display = "inline-table";
    }
    // refreshIconElement_CumulativeFemale


    function restoreOriginalChartCumulativeFemale() {
      loaderCommulativeLeaderboardFemale.style.display = "block";
      tblCommulativeLeaderboardinfoFemale.style.display = "none";
      funCommLeaderboardFemale()
    }

    refreshIconElement_CumulativeFemale.addEventListener("click", restoreOriginalChartCumulativeFemale);


    // infoCumulativeLeaderboardTop10FemaleIcon,CumulativeLeaderboardTop10FemaleDiv,closeCumulativeLeaderboardTop10Female,CumulativeLeaderboardTop10FemaleInfo
    infoCumulativeLeaderboardTop10FemaleIcon.addEventListener("click", InfoModal);
    let CumulativeLeaderboardTop10FemaleDiv = document.getElementById('CumulativeLeaderboardTop10FemaleDiv');
    let closeCategoryWiseExecutive = document.getElementById('closeCategoryWiseExecutive');
    function InfoModal(event) {
      event.stopPropagation();
      CumulativeLeaderboardTop10FemaleDiv.style.display = "block";
      if (resfunCommLeaderboardFemale.info) {
        let CumulativeLeaderboardTop10FemaleInfo = document.getElementById("CumulativeLeaderboardTop10FemaleInfo");
        let CategoryWiseExecutiveInfo2 = document.getElementById("CategoryWiseExecutiveInfo2");


        CumulativeLeaderboardTop10FemaleInfo.innerHTML = "<b>Formula :</b> " + resfunCommLeaderboardFemale.info.info;
        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!CumulativeLeaderboardTop10FemaleDiv.contains(event.target) && event.target.id !== 'infoCumulativeLeaderboardTop10FemaleIcon') {
        closeCumulativeLeaderboardTop10FemaleDiv();
      }
    });
    closeCumulativeLeaderboardTop10Female.addEventListener("click", closeCumulativeLeaderboardTop10FemaleDiv);
    function closeCumulativeLeaderboardTop10FemaleDiv() {
      CumulativeLeaderboardTop10FemaleDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    CumulativeLeaderboardTop10FemaleDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();

}

function funClusterEmployeeParticiption() {
  let ClusterEmployeeParticiptionNoData = document.getElementById(
    "ClusterEmployeeParticiptionNoData"
  );
  let tablebodyClusterEmployeeParticiption = document.getElementById(
    "tablebodyClusterEmployeeParticiption"
  );
  let tblClusterEmployeeParticiptioninfo = document.getElementById(
    "tblClusterEmployeeParticiptioninfo"
  );
  let loaderClusterEmployeeParticiption = document.getElementById(
    "loaderClusterEmployeeParticiption"
  );

  // tblClusterEmployeeParticiptioninfo.style.display = "none";
  // loaderClusterEmployeeParticiption.style.display = "block";
  // ClusterEmployeeParticiptionNoData.style.display = "none";

  let xhr_object = new XMLHttpRequest();
  xhr_object.open(
    "GET",
    getClusterEmployeeParticipation +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    true
  );

  xhr_object.onload = function () {
    resfunClusterEmployeeParticiption = JSON.parse(this.responseText);
    console.log("Leaderboard Female------------ - ");
    console.log(resfunClusterEmployeeParticiption);

    let resfunClusterEmployeeParticiptionArray = resfunClusterEmployeeParticiption.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunClusterEmployeeParticiptionArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunClusterEmployeeParticiptionArray[x][0] +
        `</td>` +
        `<td>` +
        resfunClusterEmployeeParticiptionArray[x][1] +
        `</td>` +
        `<td>` +
        resfunClusterEmployeeParticiptionArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyClusterEmployeeParticiption.innerHTML = allDetails;

    loaderClusterEmployeeParticiption.style.display = "none";
    if (resfunClusterEmployeeParticiptionArray.length == 0) {
      ClusterEmployeeParticiptionNoData.style.display = "block";
      tblClusterEmployeeParticiptioninfo.style.display = "none";
    } else {
      ClusterEmployeeParticiptionNoData.style.display = "none";
      tblClusterEmployeeParticiptioninfo.style.display = "inline-table";
    }

    // refreshIconElement_ClusterEmployee

    refreshIconElement_ClusterEmployee.addEventListener("click", restoreOriginalChartEmployee);

    function restoreOriginalChartEmployee() {
      loaderClusterEmployeeParticiption.style.display = "block";
      funClusterEmployeeParticiption();
    }

    // infoClusterEmployeeParticiptionIcon,ClusterEmployeeParticiptionDiv,closeClusterEmployeeParticiption,ClusterEmployeeParticiptionInfo


    infoClusterEmployeeParticiptionIcon.addEventListener("click", InfoModal);
    let ClusterEmployeeParticiptionDiv = document.getElementById('ClusterEmployeeParticiptionDiv');
    let closeClusterEmployeeParticiption = document.getElementById('closeClusterEmployeeParticiption');
    function InfoModal(event) {
      event.stopPropagation();
      ClusterEmployeeParticiptionDiv.style.display = "block";
      if (resfunClusterEmployeeParticiption.info) {
        let ClusterEmployeeParticiptionInfo = document.getElementById("ClusterEmployeeParticiptionInfo");



        ClusterEmployeeParticiptionInfo.innerHTML = "<b>Info :</b> " + resfunClusterEmployeeParticiption.info.info;

        // $('#infoModal').modal('show');
      } else {
        console.error("Formula not found in response info.");
      }
    }
    document.addEventListener("click", function (event) {
      if (!ClusterEmployeeParticiptionDiv.contains(event.target) && event.target.id !== 'infoClusterEmployeeParticiptionIcon') {
        closeClusterEmployeeParticiptionDiv();
      }
    });
    closeClusterEmployeeParticiption.addEventListener("click", closeClusterEmployeeParticiptionDiv);
    function closeClusterEmployeeParticiptionDiv() {
      ClusterEmployeeParticiptionDiv.style.display = "none";
    }
    // Stop propagation to prevent the document click event from firing when clicking inside the dropdown
    ClusterEmployeeParticiptionDiv.addEventListener("click", function (event) {
      event.stopPropagation();
    });
  };
  xhr_object.send();

}
// -------------------------------------------------------------------------------------------------------------------------------
// Refresh Widgets
// -------------------------------------------------------------------------------------------------------------------------------
// function showRefreshWidgets() {
//   grid.load(items);
//   console.log("Hello");
// }

function showRefreshWidgets() {
  grid.load(items);

  if (activeTotalAssetsAvailable == 1 && resfunCardTotalAsset != null) {
    let cardTotalAsset = document.getElementById("cardTotalAsset");
    cardTotalAsset.innerHTML = resfunCardTotalAsset.response + "";
  }

  if (activeAssetsInUse == 1 && resfunCardTotalAssetInUseAndBreakDown != null) {
    let cardUseAsset = document.getElementById("cardUseAsset");
    cardUseAsset.innerHTML =
      resfunCardTotalAssetInUseAndBreakDown.response.InUse + "";
  }

  if (
    activeAssetInBreakdown == 1 &&
    resfunCardTotalAssetInUseAndBreakDown != null
  ) {
    let cardBreakdownAsset = document.getElementById("cardBreakdownAsset");
    cardBreakdownAsset.innerHTML =
      resfunCardTotalAssetInUseAndBreakDown.response.InBreakdown + "";
  }

  if (
    activeCriticalAssetsInBreakdown == 1 &&
    resfunCardTotalCriticalAssetInBreakdown != null
  ) {
    let cardCriticalAsset = document.getElementById("cardCriticalAsset");
    cardCriticalAsset.innerHTML =
      resfunCardTotalCriticalAssetInBreakdown.response + "";
  }

  if (activePPMConductedAssets == 1) {
    // No Data
  }

  if (activeLTIR == 1 && resfunGetLTIR != null) {
    let cardLTIR = document.getElementById("cardLTIR");
    cardLTIR.innerHTML = resfunGetLTIR.response + "";
  }

  if (activeZeroIncidentDays == 1 && resfunGetZeroIncidentDays != null) {
    let cardZeroIncidentDays = document.getElementById("cardZeroIncidentDays");
    cardZeroIncidentDays.innerHTML = resfunGetZeroIncidentDays.response + "";
  }

  if (activeIncidentPerSqFt == 1 && resfunGetIncidentPerSqFt != null) {
    let cardIncidentPerSqFt = document.getElementById("cardIncidentPerSqFt");
    cardIncidentPerSqFt.innerHTML = resfunGetIncidentPerSqFt.response + "";
  }

  // if (activeTotalFlats == 1 && resfunGetTotalFlats != null) {
  //   let cardTotalFlats = document.getElementById("cardTotalFlats");
  //   cardTotalFlats.innerHTML = resfunGetTotalFlats.response + "";
  // }

  if (
    activeIncidentNearMissGoodCatch == 1 &&
    resfunGetIncidentNearMissGoodCatch != null
  ) {
    let cardIncidentNearMissGoodCatch = document.getElementById(
      "cardIncidentNearMissGoodCatch"
    );
    cardIncidentNearMissGoodCatch.innerHTML =
      resfunGetIncidentNearMissGoodCatch.response + "";
  }

  if (activeTickets == 1 && resfunChartTicket != null) {
    let dt1NoData = document.getElementById("dt1NoData");
    let ticket_b1 = document.getElementById("ticket-b1");
    let loaderTicketB1Chart = document.getElementById("loaderTicketB1Chart");
    let dt1 = document.getElementById("dt1");

    loaderTicketB1Chart.style.display = "block";
    dt1NoData.style.display = "none";

    // if (globalType == "daily") {
    //   dt1.innerHTML = "Tickets for " + convertDateFormat(globalDateFirst);
    // } else {

    //   dt1.innerHTML =
    //     "Tickets for " + convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
    // }

    // Added Now

    let total = resfunChartTicket.response.open + resfunChartTicket.response.closed;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // Added Now
    // const originalChartConfigTicket= 
    new Chart(ticket_b1, {
      type: "doughnut",
      data: {
        labels: ["Open", "Closed"],
        datasets: [
          {
            label: "Tickets",
            backgroundColor: ["#e2445b", "#01c875"],
            data: [
              // resfunChartTicket.response.total,
              resfunChartTicket.response.open,
              resfunChartTicket.response.closed,
            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            // anchor: "end",
            // align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });
    // let myChart = new Chart(ticket_b1, originalChartConfigTicket);

    loaderTicketB1Chart.style.display = "none";

    if (resfunChartTicket.response.total == 0) {
      dt1NoData.style.display = "block";
      ticket_b1.style.display = "none";
    } else {
      dt1NoData.style.display = "none";
      ticket_b1.style.display = "block";
    }
  }



  if (activeBodyInjuryChart == 1 && resBodyInjuryChart != null) {
    let bodyInjuryChart = document.getElementById("bodyInjuryChart");
    let loaderBodyInjuryChart = document.getElementById("loaderBodyInjuryChart");
    let bodyInjuryChartNoData = document.getElementById("bodyInjuryChartNoData");

    // root_Cause_pie.style.display = "none";
    loaderBodyInjuryChart.style.display = "block";
    bodyInjuryChartNoData.style.display = "none";
    bodyInjuryChart.src = resBodyInjuryChart.response;
    console.log("------hey");
    console.log(bodyInjuryChart);
    console.log(bodyInjuryChart.src);

    loaderBodyInjuryChart.style.display = "none";
    bodyInjuryChartNoData.style.display = "none";
    bodyInjuryChart.style.display = "block";

  }


  if (activeExecutiveEscalation == 1 && resfunExecutiveEscalation != null) {
    let executiveEscalationNoData = document.getElementById("executiveEscalationNoData");
    let tblExecutiveEscalationinfo = document.getElementById(
      "tblExecutiveEscalationinfo"
    );
    let tablebodyExecutiveEscalation = document.getElementById(
      "tablebodyExecutiveEscalation"
    );
    let loaderExecutiveEscalation = document.getElementById("loaderExecutiveEscalation");

    tblExecutiveEscalationinfo.style.display = "none";
    loaderExecutiveEscalation.style.display = "block";
    executiveEscalationNoData.style.display = "none";

    let resfunExecutiveEscalationArray = resfunExecutiveEscalation.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunExecutiveEscalationArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][0] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][1] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][2] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][3] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][4] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][5] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][6] +
        `</td>` +
        `<td>` +
        resfunExecutiveEscalationArray[x][8] +
        `</td>`;

      allDetails = allDetails + `</tr>`;
    }
    tablebodyExecutiveEscalation.innerHTML = allDetails;

    loaderExecutiveEscalation.style.display = "none";
    if (resfunExecutiveEscalationArray.length == 0) {
      executiveEscalationNoData.style.display = "block";
      tblExecutiveEscalationinfo.style.display = "none";
    } else {
      executiveEscalationNoData.style.display = "none";
      tblExecutiveEscalationinfo.style.display = "block";
    }
  }




  if (activeOccupancy == 1 && resfunOccupancy != null) {
    let occupancyNoData = document.getElementById("occupancyNoData");
    let Occupancy_sum = document.getElementById("Occupancy_sum");
    let loaderOccupancy = document.getElementById("loaderOccupancy");
    let occupancy = document.getElementById("occupancy");

    loaderOccupancy.style.display = "block";
    occupancyNoData.style.display = "none";

    new Chart(Occupancy_sum, {
      type: "bar",
      data: {
        labels: resfunOccupancy.response.Keys,
        datasets: [
          {
            label: "Occupied",
            backgroundColor: ["#01c875"],
            data: resfunOccupancy.response.yes,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Unoccupied",
            backgroundColor: ["#e2445b"],
            data: resfunOccupancy.response.no,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });



    loaderOccupancy.style.display = "none";

    if (resfunOccupancy.response.total == 0) {
      occupancyNoData.style.display = "block";
      Occupancy_sum.style.display = "none";
    } else {
      occupancyNoData.style.display = "none";
      Occupancy_sum.style.display = "block";
    }



  }


  if (activeFitoutOccupancy == 1 && resFunoccupency1 != null) {
    let fitoutUnoccupied = document.getElementById("fitoutUnoccupiedFlats");
    let fitoutOccupied = document.getElementById("fitoutOccupiedFlats");

    let ftFitoutFlats = document.getElementById("ftFitoutFlats");

    if (resFunoccupency1.response == null) {
      fitoutUnoccupied.innerHTML = "0";
      fitoutOccupied.innerHTML = "0";
    } else {
      fitoutUnoccupied.innerHTML =
        resFunoccupency1.response.unoccupied_count;
      fitoutOccupied.innerHTML = resFunoccupency1.response.occupied_count;

    }

    if (resfunFtFitout2.response == null) {
      ftFitoutFlats.innerHTML = "0";
    } else {
      ftFitoutFlats.innerHTML =
        resfunFtFitout2.response + "";
    }
  }


  if (activeActivityFeed == 1) {
    // No Data
  }

  if (activeCategoryWiseTickets == 1 && resfunCategoryTicket != null) {
    let categoryTicketNoData = document.getElementById("categoryTicketNoData");
    let catagory_ticket = document.getElementById("catagory-ticket");
    let loaderCategoryTicketChart = document.getElementById(
      "loaderCategoryTicketChart"
    );
    let dt2 = document.getElementById("dt2");

    // if (globalType == "daily") {
    //   dt2.innerHTML = "Unit Category-wise Tickets for " + convertDateFormat(globalDateFirst);
    // } else {
    //   dt2.innerHTML =
    //     "Unit Category-wise Tickets for " +
    //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
    // }

    loaderCategoryTicketChart.style.display = "block";
    categoryTicketNoData.style.display = "none";

    // Added now
    new Chart(catagory_ticket, {
      type: "bar",
      data: {
        labels: resfunCategoryTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCategoryTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCategoryTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCategoryTicketChart.style.display = "none";

    if (String(resfunCategoryTicket.response.total_tickets).length == 0) {
      categoryTicketNoData.style.display = "block";
      catagory_ticket.style.display = "none";
    } else {
      categoryTicketNoData.style.display = "none";
      catagory_ticket.style.display = "block";
    }
  }

  if (
    activeCategoryWiseProactiveTickets == 1 &&
    resfunCategoryProactiveTicket != null
  ) {
    let categoryProactiveTicketNoData = document.getElementById(
      "categoryProactiveTicketNoData"
    );
    let catagory_proactive_ticket = document.getElementById("proactive-ticket");
    let loaderCategoryProactiveTicketChart = document.getElementById(
      "loaderCategoryProactiveTicketChart"
    );
    let dt3 = document.getElementById("dt3");

    // if (globalType == "daily") {
    //   dt3.innerHTML =
    //     "Unit Category-wise Proactive Tickets for " + convertDateFormat(globalDateFirst);
    // } else {
    //   dt3.innerHTML =
    //     "Unit Category-wise Proactive Tickets for " +
    //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
    // }

    loaderCategoryProactiveTicketChart.style.display = "block";
    categoryProactiveTicketNoData.style.display = "none";

    // Added now
    new Chart(catagory_proactive_ticket, {
      type: "bar",
      data: {
        labels: resfunCategoryProactiveTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCategoryProactiveTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCategoryProactiveTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCategoryProactiveTicketChart.style.display = "none";
    if (
      String(resfunCategoryProactiveTicket.response.total_tickets).length == 0
    ) {
      categoryProactiveTicketNoData.style.display = "block";
      catagory_proactive_ticket.style.display = "none";
    } else {
      categoryProactiveTicketNoData.style.display = "none";
      catagory_proactive_ticket.style.display = "block";
    }
  }

  if (activeCACategoryWiseTickets == 1 && resfunCACategoryTicket != null) {
    let categoryCATicketNoData = document.getElementById(
      "categoryCATicketNoData"
    );
    let catagory_ticket_ca = document.getElementById("catagory-ticket-ca");
    let loaderCACategoryTicketChart = document.getElementById(
      "loaderCACategoryTicketChart"
    );
    let dt2_ca = document.getElementById("dt2_ca");

    // if (globalType == "daily") {
    //   dt2_ca.innerHTML =
    //     "Common Area Category-wise Tickets for " + convertDateFormat(globalDateFirst);
    // } else {
    //   dt2_ca.innerHTML =
    //     "Common Area Category-wise Tickets for " +
    //     convertDateFormat(globalDateFirst) + " to " + convertDateFormat(globalDateSecond);
    // }

    loaderCACategoryTicketChart.style.display = "block";
    categoryCATicketNoData.style.display = "none";

    // Added now
    new Chart(catagory_ticket_ca, {
      type: "bar",
      data: {
        labels: resfunCACategoryTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCACategoryTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCACategoryTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCACategoryTicketChart.style.display = "none";

    if (String(resfunCACategoryTicket.response.total_tickets).length == 0) {
      categoryCATicketNoData.style.display = "block";
      catagory_ticket_ca.style.display = "none";
    } else {
      categoryCATicketNoData.style.display = "none";
      catagory_ticket_ca.style.display = "block";
    }
  }


  if (activeCustomerSentiments == 1 && resfunChartCustomerSentiments != null) {
    let CustomerSentimentsNoData = document.getElementById("CustomerSentimentsNoData");
    let customerSentiment = document.getElementById("customerSentiment");
    let loaderCustomerSentiments = document.getElementById("loaderCustomerSentiments");
    let sentiments = document.getElementById("sentiments");

    loaderCustomerSentiments.style.display = "block";
    customerSentiment.style.display = "none";
    // CustomerSentimentsNoData.style.display = "none";

    // if (globalType == "daily") {
    //   sentiments.innerHTML = "Customer Sentiments for " + globalDateFirst;
    // } else {
    //   sentiments.innerHTML =
    //     "Customer Sentiments for " + globalDateFirst + " to " + globalDateSecond;
    // }
    let total = resfunChartCustomerSentiments.response.Great + resfunChartCustomerSentiments.response.Good + resfunChartCustomerSentiments.response.Okay + resfunChartCustomerSentiments.response.Bad + resfunChartCustomerSentiments.response.Unacceptable;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }
    new Chart(customerSentiment, {
      type: "doughnut",
      data: {
        labels: ["Great", "Good", "Okay", "Bad", "Unacceptable"],
        datasets: [
          {
            label: "Customer",
            backgroundColor: ["#01c875", "#A1CD7A", "#F2C06C", "#F69380", "#D44B52",],
            data: [
              // resfunChartTicket.response.total,
              resfunChartCustomerSentiments.response.Great,
              resfunChartCustomerSentiments.response.Good,
              resfunChartCustomerSentiments.response.Okay,
              resfunChartCustomerSentiments.response.Bad,
              resfunChartCustomerSentiments.response.Unacceptable,

            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });
    // CustomerSentimentsNoData.style.display = "block";
    // if (total == 0) {
    //   loaderCustomerSentiments.style.display = "none";
    //   customerSentiment.style.display = "none";
    //   CustomerSentimentsNoData.style.display = "block";

    // } else {
    //   loaderCustomerSentiments.style.display = "none";
    //   customerSentiment.style.display = "block";
    //   // CustomerSentimentsNoData.style.display = "none";
    // }
  }


  if (activeFootfall == 1 && resfunFootfall != null && resFootFallDrill != null) {
    let footfallNoData = document.getElementById("footfallNoData");
    // let footfall_bar = document.getElementById("footfall_bar ");
    // let loaderFootfall = document.getElementById("loaderFootfall");

    // loaderFootfall.style.display = "block";
    footfallNoData.style.display = "none";
    // footfall_bar.style.display = "block";

    // -------------
    originalChartConfigFootfall = {
      type: "bar",
      data: {
        labels: Object.keys(resfunFootfall.response),
        datasets: [
          {
            label: "Footfall",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunFootfall.response),
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: false,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(footfall_bar, originalChartConfigFootfall)

    // -------------
    if (Object.keys(resfunFootfall.response).length == 0) {
      footfallNoData.style.display = "block";
      footfall_bar.style.display = "none";
    } else {
      footfallNoData.style.display = "none";
      footfall_bar.style.display = "block";
    }

    //  --

    let labelname;
    let selectedOption;
    let firstPoint;
    let selectedlabelValue;
    let backgroundColors;

    footfall_bar.onclick = function (event) {

      if (clickedFootfall == true) {

        const points = myChart.getElementsAtEventForMode(event, 'nearest', { intersect: true }, true);

        if (points.length) {
          firstPoint = points[0];
          const label = myChart.data.labels[firstPoint.index];
          const value = myChart.data.datasets[firstPoint.datasetIndex].data[firstPoint.index];
          backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];

          console.log(`Clicked on ${label} with value ${value}`);
          selectedlabelValue = label;
          document.getElementById("listItemLabelFootFall").textContent = `Ticket: ${label}`;
          console.log(backgroundColors);
          // document.getElementById("listItemValue").textContent = `Value: ${value}`;

          // const dropdown = new bootstrap.Dropdown(document.getElementById("dataDropdown"));
          // dropdown.show();

          const dropdown = (document.getElementById("dataDropdown_footfall"));
          dropdown.style.display = "block";


        }


        dataDropdown_footfall.addEventListener("click", function (event) {
          if (FootfalldrillDownLevel === 1) {
            selectedOption = event.target.id;
            firstPoint = points[0];
            label = myChart.data.labels[firstPoint.index];
            labelname = label;
            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
            console.log(selectedOption);

            let xhr_object = new XMLHttpRequest();
            let apiURL;

            apiURL =
              getFootFallDrillSecond +
              idLink +
              "&first_drilldown_by=" +
              selectedOption +
              "&date=" +
              labelname +
              "&sec_drill_down_on=" +
              "" +
              "&sec_drilldown_by=" +
              "" +
              "&from_date=" +
              globalDateFirst +
              "&to_date=" +
              globalDateSecond;

            xhr_object.open("GET", apiURL, true);

            xhr_object.onload = function () {
              resFootFallDrill = JSON.parse(this.responseText);
              console.log("Ticket Category Drill Down - ");
              console.log(resFootFallDrill);

              const labels = resFootFallDrill.response.map(item => item[0]);
              const dataValues = resFootFallDrill.response.map(item => item[1]);

              myChart.destroy();
              myChart = new Chart(footfall_bar, {
                type: "bar",
                data: {
                  labels: labels,
                  datasets: [{
                    label: 'Data Values',
                    data: dataValues,
                    backgroundColor: [
                      "#77216F",
                      "#01C875",
                      "#E2445B",
                      "#E95420",
                      "#A1CD7A",
                    ],
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                  }]
                },
                options: {
                  responsive: true,
                  interaction: {
                    intersect: false,
                  },
                  scales: {
                    x: {
                      stacked: true,
                    },
                    y: {
                      stacked: true,
                    },
                  },
                  maintainAspectRatio: false,
                  plugins: {
                    datalabels: {
                      color: "#000000",
                      anchor: "end",
                      align: "end",
                      offset: -6,
                      font: {
                        size: "10",
                        weight: "bold",
                      },
                      formatter: function (value, context) {
                        // Hide label if value is zero
                        return value === 0 ? '' : value;
                      }
                    },
                    legend: {
                      display: true,
                      position: "no",
                    },
                  },
                },
                plugins: [ChartDataLabels],
              });
            }
            xhr_object.send();
          }


          else if (FootfalldrillDownLevel === 2) {
            // alert(selectedOption);
            // alert(labelname);
            // alert(selectedlabelValue);
            const firstPoint = points[0];
            // alert(firstPoint.index);
            const selectedSecondOption = event.target.id;
            const labelSecond = myChart.data.labels[firstPoint.index];
            const labelnameSecond = labelSecond;
            backgroundColors = myChart.data.datasets[0].backgroundColor[firstPoint.index];
            console.log(selectedSecondOption);
            console.log(selectedlabelValue);
            // console.log(backgroundColors);

            downloadEventsFootfallAnalysisLink = ip + "fm-excel-download/get-drill-down-for-footfall-analysis/" + idLink +
              "&first_drilldown_by=" +
              selectedOption +
              "&date=" +
              labelname +
              "&sec_drilldown_by=" +
              selectedSecondOption +
              "&sec_drill_down_on=" +
              selectedlabelValue +
              "&from_date=" +
              globalDateFirst +
              "&to_date=" +
              globalDateSecond;

            const labels = resFootFallDrill.response.map(item => item[0]);
            const dataValues = resFootFallDrill.response.map(item => item[1]);

            myChart.destroy();
            myChart = new Chart(footfall_bar, {
              type: "bar",
              data: {
                labels: labels,
                datasets: [{
                  label: 'Data Values',
                  data: dataValues,
                  backgroundColor: [
                    "#77216F",
                    "#01C875",
                    "#E2445B",
                    "#E95420",
                    "#A1CD7A",
                  ],
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
                }]
              },
              options: {
                responsive: true,
                interaction: {
                  intersect: false,
                },
                scales: {
                  x: {
                    stacked: true,
                  },
                  y: {
                    stacked: true,
                  },
                },
                maintainAspectRatio: false,
                plugins: {
                  datalabels: {
                    color: "#000000",
                    anchor: "end",
                    align: "end",
                    offset: -6,
                    font: {
                      size: "10",
                      weight: "bold",
                    },
                    formatter: function (value, context) {
                      // Hide label if value is zero
                      return value === 0 ? '' : value;
                    }
                  },
                  legend: {
                    display: true,
                    position: "no",
                  },
                },
              },
              plugins: [ChartDataLabels],
            });
            // }
            // xhr_object.send();
          }

          // if (selectedOption === "Tower" || "Flat" || "Status" || "Facility_Name" && currentChartType === "bar") {

          FootfalldrillDownLevel += 1

          dataDropdown_footfall.style.display = "none";

          currentChartType = "bar";
          // }

        });
      }


    };


    function restoreOriginalChart() {
      if (originalChartConfigFootfall) {
        myChart.destroy(); // Destroy the current chart
        myChart = new Chart(footfall_bar, originalChartConfigFootfall);
        clickedFootfall = true;
      }
    }

    refreshIconElement_footfall.addEventListener("click", restoreOriginalChart);

    // --


  }

  if (
    activeCACategoryWiseProactiveTickets == 1 &&
    resfunCACategoryProactiveTicket != null
  ) {
    let categoryCAProactiveTicketNoData = document.getElementById(
      "categoryCAProactiveTicketNoData"
    );
    let catagory_proactive_ticket_ca = document.getElementById(
      "proactive-ticket-ca"
    );
    let loaderCACategoryProactiveTicketChart = document.getElementById(
      "loaderCACategoryProactiveTicketChart"
    );
    let dt3_ca = document.getElementById("dt3_ca");

    loaderCACategoryProactiveTicketChart.style.display = "block";
    categoryCAProactiveTicketNoData.style.display = "none";

    // Added now
    new Chart(catagory_proactive_ticket_ca, {
      type: "bar",
      data: {
        labels: resfunCACategoryProactiveTicket.response.tickets_category,
        datasets: [
          {
            label: "Open Tickets",
            backgroundColor: ["#e2445b"],
            data: resfunCACategoryProactiveTicket.response.open_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Closed Tickets",
            backgroundColor: ["#01c875"],
            data: resfunCACategoryProactiveTicket.response.closed_tickets,
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCACategoryProactiveTicketChart.style.display = "none";
    if (
      String(resfunCACategoryProactiveTicket.response.total_tickets).length == 0
    ) {
      categoryCAProactiveTicketNoData.style.display = "block";
      catagory_proactive_ticket_ca.style.display = "none";
    } else {
      categoryCAProactiveTicketNoData.style.display = "none";
      catagory_proactive_ticket_ca.style.display = "block";
    }
  }

  if (activeTicketsAgeingMatrix == 1 && resfunAgeingMatrix != null) {
    let ageingMatrixNoData = document.getElementById("ageingMatrixNoData");
    let tbl1info = document.getElementById("tbl1info");
    let loaderAgeingMatrix = document.getElementById("loaderAgeingMatrix");

    loaderAgeingMatrix.style.display = "block";
    ageingMatrixNoData.style.display = "none";

    let myAgeingArray = resfunAgeingMatrix.response;

    allAgeingDetails =
      `<tr>` +
      `<td>` +
      "P1" +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P1.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P2" +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P2.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P3" +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P3.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P4" +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P4.T5 +
      `</td>` +
      `</tr>` +
      `<tr>` +
      `<td>` +
      "P5" +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T1 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T2 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T3 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T4 +
      `</td>` +
      `<td>` +
      myAgeingArray.P5.T5 +
      `</td>` +
      `</tr>`;

    tablebodyTicketAgeing.innerHTML = allAgeingDetails;

    console.log("Ageing - ");
    console.log(myAgeingArray);

    daysTicketAgeing.innerHTML = resfunAgeingMatrix.average_days;

    loaderAgeingMatrix.style.display = "none";
    if (resfunAgeingMatrix.response.total_tickets == 0) {
      ageingMatrixNoData.style.display = "block";
      tbl1info.style.display = "none";
    } else {
      ageingMatrixNoData.style.display = "none";
      tbl1info.style.display = "block";
    }
  }

  if (activeResolutionTAT == 1 && resfunTATResolution != null) {
    let tatResolutionNoData = document.getElementById("tatResolutionNoData");
    let tat_resolution_chart = document.getElementById("resolution-b1");
    let loaderTATResolution = document.getElementById("loaderTATResolution");

    let tatResolutionAchieved = document.getElementById(
      "tatResolutionAchieved"
    );
    let tatResolutionBreached = document.getElementById(
      "tatResolutionBreached"
    );

    loaderTATResolution.style.display = "block";
    tatResolutionNoData.style.display = "none";
    tat_resolution_chart.style.visibility = "hidden";

    tatResolutionAchieved.innerHTML =
      resfunTATResolution.response.resolution.achieved + "";
    tatResolutionBreached.innerHTML =
      resfunTATResolution.response.resolution.breached + "";

    new Chart(tat_resolution_chart, {
      type: "bar",
      data: {
        labels: ["Achived", "Breached"],
        datasets: [
          {
            label: "Resolution TAT Status",
            backgroundColor: ["#01C875", "#FDAB3D"],
            data: [
              resfunTATResolution.response.resolution.achieved,
              resfunTATResolution.response.resolution.breached,
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 8);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderTATResolution.style.display = "none";
    if (
      resfunTATResolution.response.resolution.achieved == 0 &&
      resfunTATResolution.response.resolution.breached == 0
    ) {
      tatResolutionNoData.style.display = "block";
      tat_resolution_chart.style.visibility = "hidden";
    } else {
      tatResolutionNoData.style.display = "none";
      tat_resolution_chart.style.visibility = "visible";
    }
  }

  if (activeResponseTAT == 1 && resfunTATResponse != null) {
    let tatResponseNoData = document.getElementById("tatResponseNoData");
    let tat_response_chart = document.getElementById("response-b1");
    let loaderTATResponse = document.getElementById("loaderTATResponse");

    let tatResponseAchieved = document.getElementById("tatResponseAchieved");
    let tatResponseBreached = document.getElementById("tatResponseBreached");

    loaderTATResponse.style.display = "block";
    tatResponseNoData.style.display = "none";
    tat_response_chart.style.visibility = "hidden";

    tatResponseAchieved.innerHTML =
      resfunTATResponse.response.response.achieved + "";
    tatResponseBreached.innerHTML =
      resfunTATResponse.response.response.breached + "";

    new Chart(tat_response_chart, {
      type: "bar",
      data: {
        labels: ["Achived", "Breached"],
        datasets: [
          {
            label: "Response TAT Status",
            backgroundColor: ["#01C875", "#FDAB3D"],
            data: [
              resfunTATResponse.response.response.achieved,
              resfunTATResponse.response.response.breached,
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 8);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderTATResponse.style.display = "none";
    if (
      resfunTATResponse.response.response.achieved == 0 &&
      resfunTATResponse.response.response.breached == 0
    ) {
      tatResponseNoData.style.display = "block";
      tat_response_chart.style.visibility = "hidden";
    } else {
      tatResponseNoData.style.display = "none";
      tat_response_chart.style.visibility = "visible";
    }
  }

  if (activeVisitors == 1 && resfunVisitors != null) {
    let visTotalVehicles = document.getElementById("visTotalVehicles");
    let visTotalVisitors = document.getElementById("visTotalVisitors");
    let visExpectedVisitors = document.getElementById("visExpectedVisitors");
    let visUnExpectedVisitors = document.getElementById("visUnExpectedVisitors");
    let visTotalGatePass = document.getElementById("visTotalGatePass");
    let visReturnGatePass = document.getElementById("visReturnGatePass ");
    let visNonReturnGatePass = document.getElementById("visNonReturnGatePass");



    visTotalVehicles.innerHTML = resfunVisitors.response.totalVehicle + "";
    visTotalVisitors.innerHTML = resfunVisitors.response.totalVisitors + "";
    visExpectedVisitors.innerHTML =
      resfunVisitors.response.expectedVisitors + "";
    visUnExpectedVisitors = resfunVisitors.response.unexpectedVisitors + "";
    visTotalGatePass.innerHTML = resfunVisitors.response.totalGatePass + "";
    visReturnGatePass = resfunVisitors.response.ReturnGatePass + "";
    visNonReturnGatePass.innerHTML = resfunVisitors.response.NonReturnGatePass + "";

  }

  if (activeTotalVisitors == 1 && resfunVisitors != null) {
    let visTotalVisitors = document.getElementById("visTotalVisitors");
    visTotalVisitors.innerHTML = resfunVisitors.response.totalVisitors + "";
  }


  if (activeExpectedVisitors == 1 && resfunVisitors != null) {
    let visExpectedVisitors = document.getElementById("visExpectedVisitors");
    visExpectedVisitors.innerHTML = resfunVisitors.response.expectedVisitors + "";
  }


  if (activeTotalStaff == 1 && resfunStaff != null) {
    let visTotalStaffCard = document.getElementById("visTotalStaffCard");
    visTotalStaffCard.innerHTML = resfunStaff.response + "";
  }
  if (activeStaffIn == 1 && resfunStaffIn != null) {
    let visStaffInCard = document.getElementById("visStaffInCard");
    visStaffInCard.innerHTML = resfunStaffIn.response + "";
  }
  if (activeStaffOut == 1 && resfunStaffOut != null) {
    let visStaffOutCard = document.getElementById("visStaffOutCard");
    visStaffOutCard.innerHTML = resfunStaffOut.response + "";
  }

  if (activeUnExpectedVisitors == 1 && resfunVisitors != null) {
    let visUnExpectedVisitors = document.getElementById("visUnExpectedVisitors");
    visUnExpectedVisitors.innerHTML = resfunVisitors.response.unexpectedVisitors + "";
  }


  if (activeTotalVisitorsII == 1 && resfunTotalVisitorsII != null) {
    let totalVisitorsNoDataII = document.getElementById("totalVisitorsNoDataII");
    let total_visitors_II = document.getElementById("total-visitors-II");
    let loaderTotalVisitorsII = document.getElementById("loaderTotalVisitorsII");
    let dt2_tv = document.getElementById("dt2_tv");
    loaderTotalVisitorsII.style.display = "block";
    totalVisitorsNoDataII.style.display = "none";
    new Chart(total_visitors_II, {
      type: "bar",
      data: {
        labels: Object.keys(resfunTotalVisitorsII.response),
        datasets: [
          {
            label: "Visitors",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunTotalVisitorsII.response),
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });
    loaderTotalVisitorsII.style.display = "none";

    let sum = 0;
    let resValues = Object.values(resfunTotalVisitorsII.response);

    for (let i = 0; i < resValues.length; i += 1) {
      sum = resValues[i] + sum;
    }

    // if (sum == 0) {
    //   totalVisitorsNoDataII.style.display = "block";
    //   total_visitors_II.style.display = "none";
    // } else {
    totalVisitorsNoDataII.style.display = "none";
    total_visitors_II.style.display = "block";
  }



  if (activeGoodsInwards == 1 && resfunGoodsInwards != null) {
    let visGoodsInwards = document.getElementById("visGoodsInwards");
    visGoodsInwards.innerHTML = resfunGoodsInwards.response + "";

  }

  if (activeGoodsOutwards == 1 && resfunOutwards != null) {
    let visOutwards = document.getElementById("visOutwards");
    visOutwards.innerHTML = resfunOutwards.response + "";

  }

  if (activeGoodsIn == 1 && resfunGoodsIn != null) {
    let goods_in = document.getElementById("goods_in");
    let loaderGoodsIn = document.getElementById("loaderGoodsIn");
    // let dt2_gi = document.getElementById("dt2_gi");

    // loaderGoodsIn.style.display = "block";

    // let valueGoodsInName = Object.keys(resfunGoodsIn.response);
    // let valueGoodsInY = Object.values(resfunGoodsIn.response);


    new Chart(goods_in, {
      type: "bar",
      data: {
        labels: Object.keys(resfunGoodsIn.response),
        datasets: [
          {
            // label:"Incident",
            // `data: Object.values(resfunGoodsIn.response),`
            // axis: "y",
            // fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunGoodsIn.response),
            borderWidth: 1,
          },
        ],
      },
      options: {
        // indexAxis: "y",
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#ffffff",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderGoodsIn.style.display = "none";

    let sum = 0;
    let resValue = Object.values(resfunGoodsIn.response);

    for (let i = 0; i < resValue.length; i += 1) {
      sum = resValue[i] + sum;
    }
    if (sum == 0) {
      // goodsInNoData.style.display = "block";
      goods_in.style.display = "none";
    } else {
      // goodsInNoData.style.display = "none";
      goods_in.style.display = "block";
    }
  }

  if (activeGoodsOut == 1 && resfunGoodsOut != null) {
    let goodsOutNoData = document.getElementById("goodsOutNoData");
    let goods_out = document.getElementById("goods_out");
    let loaderGoodsOut = document.getElementById("loaderGoodsOut");
    let dt2_go = document.getElementById("dt2_go");

    loaderGoodsOut.style.display = "none";
    goods_out.style.display = "block";

    new Chart(goods_out, {
      type: "bar",
      data: {
        labels: Object.keys(resfunGoodsOut.response),
        datasets: [
          {
            // label:"Incident",
            data: Object.values(resfunGoodsOut.response),
            axis: "y",
            fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],

            borderWidth: 1,
          },
        ],
      },
      options: {
        // indexAxis: "y",
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#ffffff",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderGoodsOut.style.display = "none";

    let sum = 0;
    let resValueOut = Object.values(resfunGoodsOut.response);
    for (let i = 0; i < resValueOut.length; i += 1) {
      sum = resValueOut[i] + sum;
    }
    if (sum == 0) {
      goodsOutNoData.style.display = "block";
      goods_out.style.display = "none";
    } else {
      goodsOutNoData.style.display = "none";
      goods_out.style.display = "block";
    }
  }

  if (activeTotalGatePass == 1 && resfunVisitors != null) {
    let visTotalGatePass = document.getElementById("visTotalGatePass");
    visTotalGatePass.innerHTML = resfunVisitors.response.totalGatePass + "";

  }

  if (activeNonReturnablePass == 1 && resfunVisitors != null) {
    let visNonReturnGatePass = document.getElementById("visNonReturnGatePass");
    visNonReturnGatePass.innerHTML = resfunVisitors.response.non_returnable_gatePass + "";

  }

  if (activeReturnablePass == 1 && resfunVisitors != null) {
    let visReturnGatePass = document.getElementById("visReturnGatePass");
    visReturnGatePass.innerHTML = resfunVisitors.response.returnable_gatePass + "";
  }

  if (activeTotalAmount == 1 && resfungetTotalAmount != null) {
    let totalAmount = document.getElementById("totalAmount");
    totalAmount.innerHTML = resfungetTotalAmount.total_amount_response;
  }

  if (activeTotalReceived == 1 && resfungetTotalAmount != null) {
    let totalReceived = document.getElementById("totalReceived");
    totalReceived.innerHTML = resfungetTotalAmount.received_amount_response;
  }

  if (activeTotalOutStanding == 1 && resfungetTotalAmount != null) {
    let totalOutstanding = document.getElementById("totalOutstanding");
    totalOutstanding.innerHTML = resfungetTotalAmount.total_outstanding;
  }

  if (activeTotalOutStandingAmount == 1 && resfunOutstanding != null) {
    let OutstandingNoData = document.getElementById("OutstandingNoData");
    let tblOutstandinginfo = document.getElementById("tblOutstandinginfo");
    let tablebodyOutstanding = document.getElementById("tablebodyOutstanding");
    let loaderOutstanding = document.getElementById("loaderOutstanding");

    tblOutstandinginfo.style.display = "none";
    loaderOutstanding.style.display = "block";
    OutstandingNoData.style.display = "none";

    let resfunOutstandingArray = resfunOutstanding.client_outstanding;
    let allDetails = "";

    for (let x in resfunOutstandingArray) {
      allDetails +=
        `<tr>` +
        `<td style="text-align: left;">` + resfunOutstandingArray[x].site_name + `</td>` +
        `<td>` + resfunOutstandingArray[x].outstanding_amount + `</td>` +
        `<td>` + resfunOutstandingArray[x].percentage + `%</td>` +
        `</tr>`;
    }

    tablebodyOutstanding.innerHTML = allDetails;

    loaderOutstanding.style.display = "none";
    if (resfunOutstandingArray.length == 0) {
      OutstandingNoData.style.display = "block";
      tblOutstandinginfo.style.display = "none";
    } else {
      OutstandingNoData.style.display = "none";
      tblOutstandinginfo.style.display = "inline-table";
    }
  }

  if (activePermits == 1 && resfunPermitStatus != null) {
    let PermitStatusNoData = document.getElementById("PermitStatusNoData");
    let permitStatus = document.getElementById("permitStatus");
    let loaderPermitStatus = document.getElementById(
      "loaderPermitStatus"
    );
    loaderPermitStatus.style.display = "block";
    PermitStatusNoData.style.display = "none";
    let total = resfunPermitStatus.response.Total;
    const centerText = {
      id: 'centerText',
      afterDatasetsDraw(chart, args, options) {
        const { ctx, chartArea: { left, right, top, bottom, width, height } } = chart;
        ctx.save();

        ctx.font = 'bolder 18px Arial';
        ctx.fillStyle = 'rgba(0, 0, 0, 1)';
        ctx.textAlign = 'center';
        ctx.fillText('Total: ' + total, width / 2, height / 2);
      }
    }

    // Specify colors for each segment
    // var backgroundColors = ["#5ae717", "yellow", "red"];

    // Create a new Chart
    myChart = new Chart(permitStatus, {
      type: "doughnut",
      data: {
        labels: ["Closed", "Extended", "Open"],
        datasets: [
          {
            label: "Permit Status",
            backgroundColor: ["#5ae717", "yellow", "red"],
            data: [
              resfunPermitStatus.response.Closed,
              resfunPermitStatus.response.Extended,
              resfunPermitStatus.response.Open,

            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            // anchor: "end",
            // align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderPermitStatus.style.display = "none";

    if (labels.length === 0) {
      PermitStatusNoData.style.display = "block";
      permitStatus.style.display = "none";
    } else {
      PermitStatusNoData.style.display = "none";
      permitStatus.style.display = "block";
    }

    // Manually draw total in the center
    var ctx = myChart.ctx;
    var centerX = myChart.width / 2;
    var centerY = myChart.height / 2;

    ctx.font = "16px Arial";
    ctx.fillStyle = "#000000";
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.fillText("Total: " + total, centerX, centerY);
  }



  if (activePermitSite == 1 && resfunSitePermit != null) {
    let SitePermitNoData = document.getElementById("SitePermitNoData");
    let sitePermit = document.getElementById("sitePermit");
    let loaderSitePermit = document.getElementById(
      "loaderSitePermit"
    );
    loaderSitePermit.style.display = "block";
    SitePermitNoData.style.display = "none";


    const locations = Object.keys(resfunSitePermit.response);
    const categories = Array.from(
      new Set(
        locations.flatMap(
          (location) => resfunSitePermit.response[location].map((item) => item[1])
        )
      )
    );

    const data = locations.map((location) =>
      categories.map((category) => {
        const foundItem = resfunSitePermit.response[location].find(
          (item) => item[1] === category
        );
        return foundItem ? foundItem[0] : 0;
      })
    );

    // Your existing code to generate random color
    function getRandomColor() {
      const letters = "0123456789ABCDEF";
      let color = "#";
      for (let i = 0; i < 6; i++) {
        color += letters[Math.floor(Math.random() * 16)];
      }
      return color;
    }

    // Create a new Chart
    new Chart(sitePermit, {
      type: "bar",
      data: {
        labels: locations,
        datasets: categories.map((category, index) => ({
          label: category,
          data: data.map((locationData) => locationData[index]),
          backgroundColor: getRandomColor(),
          stack: "Stack 0",
        })),
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: "Sites",
              padding: {
                top: 20,
              },
            },
          },
          y: {
            stacked: true, // Stack bars on the y-axis
            beginAtZero: true,
            title: {
              display: true,
              text: "Type of Permits created",
            },
          },
        },
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true,
            },
            display: true,
            position: "top",
            align: "end",
          },
        },
      },
    });

    loaderSitePermit.style.display = "none";

    // if (labels.length === 0) {
    //   SitePermitNoData.style.display = "block";
    //   sitePermit.style.display = "none";
    // } else {
    SitePermitNoData.style.display = "none";
    sitePermit.style.display = "block";
  }

  if (activePowerConsumption == 1) {
    let titlePowerConsumation = document.getElementById(
      "titlePowerConsumation"
    );

    let pcTotalHtMeter = document.getElementById("pcTotalHtMeter");
    let pcTotalTransformer = document.getElementById("pcTotalTransformer");
    let pcTotalDg = document.getElementById("pcTotalDg");
    let pcTotalDieselConsumed = document.getElementById(
      "pcTotalDieselConsumed"
    );
    let pcTotalDieselConsumedPie = document.getElementById(
      "pcTotalDieselConsumedPie"
    );

    let loaderPowerConsumPie = document.getElementById("loaderPowerConsumPie");
    let powerConsumPieNoData = document.getElementById("powerConsumPieNoData");
    let power_consume_pie = document.getElementById("power-consume-pie");
    let psPie1 = document.getElementById("psPie1");
    let psPie2 = document.getElementById("psPie2");
    let psPie3 = document.getElementById("psPie3");
    let psPie4 = document.getElementById("psPie4");
    let psPie5 = document.getElementById("psPie5");

    let loaderPowerConsum = document.getElementById("loaderPowerConsum");
    let powerConsumNoData = document.getElementById("powerConsumNoData");
    let power_consumption = document.getElementById("power-consumption");
    let power_consumption_month = document.getElementById("power_consumption_month");
    let loaderPowerConsumMonth = document.getElementById("loaderPowerConsumMonth");



    // ----------------------------------------------

    if (resfunPowerConsumptionObject1 != null) {
      if (resfunPowerConsumptionObject1.response == null) {
        pcTotalHtMeter.innerHTML = "0 kwh";
      } else {
        pcTotalHtMeter.innerHTML =
          resfunPowerConsumptionObject1.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject2 != null) {
      if (resfunPowerConsumptionObject2.response == null) {
        pcTotalTransformer.innerHTML = "0 kwh";
      } else {
        pcTotalTransformer.innerHTML =
          resfunPowerConsumptionObject2.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject3 != null) {
      if (resfunPowerConsumptionObject3.response == null) {
        pcTotalDg.innerHTML = "0 kwh";
      } else {
        pcTotalDg.innerHTML = resfunPowerConsumptionObject3.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject4 != null) {
      if (resfunPowerConsumptionObject4.response == null) {
        pcTotalDieselConsumed.innerHTML = "0 liters";
      } else {
        pcTotalDieselConsumed.innerHTML =
          resfunPowerConsumptionObject4.response + " liters";

      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject5 != null) {
      loaderPowerConsumPie.style.display = "block";
      powerConsumPieNoData.style.display = "none";

      let valueChartName = Object.keys(resfunPowerConsumptionObject5.pie);
      let valueChartY = Object.values(resfunPowerConsumptionObject5.pie);

      console.log("Power Consum Pie Chart - " + valueChartName);

      if (valueChartName[0] != null) {
        psPie1.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F2C06C;"></i> ' +
          valueChartName[0] +
          "<br/>";
      }

      if (valueChartName[1] != null) {
        psPie2.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F8EA94;"></i> ' +
          valueChartName[1] +
          "<br/>";
      }

      if (valueChartName[2] != null) {
        psPie3.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#A1CD7A;"></i> ' +
          valueChartName[2] +
          "<br/>";
      }

      if (valueChartName[3] != null) {
        psPie4.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#D44B52;"></i> ' +
          valueChartName[3] +
          "<br/>";
      }

      if (valueChartName[4] != null) {
        psPie5.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F69380;"></i> ' +
          valueChartName[4] +
          "<br/>";
      }

      // Added Now
      new Chart(power_consume_pie, {
        type: "pie",
        data: {
          labels: valueChartName,
          datasets: [
            {
              label: "Power",
              data: valueChartY,
              backgroundColor: [
                "#F2C06C",
                "#F8EA94",
                "#A1CD7A",
                "#D44B52",
                "#F69380",
              ],
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            datalabels: {
              color: "#ffffff",
              font: {
                size: "14",
                weight: "bold",
              },
              formatter: (value, context) => {
                const dataset = context.chart.data.datasets[context.datasetIndex];
                const total = dataset.data.reduce((sum, value) => sum + value, 0);
                const percentage = ((value / total) * 100).toFixed(1);
                return `${percentage}%`;
              },
            },
            legend: {
              display: false,
              position: "bottom",
            },
          },
        },
        plugins: [ChartDataLabels],
      });



      if (resfunPowerConsumptionObject5.total_consumption == null) {
        pcTotalDieselConsumedPie.innerHTML = "0 KWH";
      } else {
        pcTotalDieselConsumedPie.innerHTML =
          resfunPowerConsumptionObject5.total_consumption + " KWH";
      }

      let sum = 0;

      for (let i = 0; i < valueChartY.length; i += 1) {
        if (valueChartY[i] == null) {
          let a = 0;
          sum += a;
        } else {
          sum += valueChartY[i];
        }
      }

      loaderPowerConsumPie.style.display = "none";
      if (sum == 0) {
        powerConsumPieNoData.style.display = "block";
        power_consume_pie.style.display = "none";
      } else {
        powerConsumPieNoData.style.display = "none";
        power_consume_pie.style.display = "block";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject6 != null) {
      power_consumption.style.display = "none";
      loaderPowerConsum.style.display = "block";
      powerConsumNoData.style.display = "none";


      let arrAllObjects = Object.values(resfunPowerConsumptionObject6.response);
      let arrSolar = [];
      let arrDG = [];
      let arrHtMeter = [];
      let arrTotal = [];
      let arrAverage = [];

      for (let i = 0; i < arrAllObjects.length; i++) {
        arrSolar.push(arrAllObjects[i].Solar);
        arrDG.push(arrAllObjects[i].dg);
        arrHtMeter.push(arrAllObjects[i].htMeter);
        arrAverage.push(arrAllObjects[i].average);
      }
      // Added now
      new Chart(power_consumption, {
        type: "bar",
        data: {
          labels: Object.keys(resfunPowerConsumptionObject6.response),
          datasets: [
            {
              label: "HT Meter",
              backgroundColor: ["#E95420"],
              data: arrHtMeter,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              label: "Solar",
              backgroundColor: ["#77216f"],
              data: arrSolar,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              label: "DG",
              backgroundColor: ["#f2ad6c"],
              data: arrDG,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              type: "line",
              tension: 1,
              label: "Average",
              backgroundColor: ["#16a60c"],
              data: arrAverage,
              borderWidth: 0.4,
              stack: "Stack 0",
            },
          ],
        },
        options: {
          responsive: true,
          interaction: {
            intersect: false,
          },
          scales: {
            x: {
              stacked: true,
            },
            y: {
              stacked: true,
            },
          },
          maintainAspectRatio: false,
          scales: {
            x: {
              ticks: {
                callback: function (value) {
                  return this.getLabelForValue(value).substr(0, 15);
                },
              },
            },
          },
          plugins: {
            datalabels: {
              color: "#000000",
              anchor: "end",
              align: "end",
              offset: -6,
              font: {
                size: "10",
                weight: "bold",
              },
            },
            legend: {
              display: true,
              position: "no",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderPowerConsum.style.display = "none";
      powerConsumNoData.style.display = "none";
      power_consumption.style.display = "block";
    }

    // ----------------------------------------------



  }

  if (activePowerConsumptionTop == 1) {
    let titlePowerConsumation = document.getElementById("titlePowerConsumation");

    let pcTotalHtMeterTop = document.getElementById("pcTotalHtMeterTop");
    let pcTotalTransformerTop = document.getElementById("pcTotalTransformerTop");
    let pcTotalDgTop = document.getElementById("pcTotalDgTop");
    let pcTotalDieselConsumed = document.getElementById("pcTotalDieselConsumed");
    let pcTotalDieselConsumedPie = document.getElementById(
      "pcTotalDieselConsumedPie"
    );

    let loaderPowerConsumPieTop = document.getElementById("loaderPowerConsumPieTop");
    let powerConsumPieNoDataTop = document.getElementById("powerConsumPieNoDataTop");
    let power_consume_pieTop = document.getElementById("power_consume_pieTop");
    let psPie1 = document.getElementById("psPie1");
    let psPie2 = document.getElementById("psPie2");
    let psPie3 = document.getElementById("psPie3");
    let psPie4 = document.getElementById("psPie4");
    let psPie5 = document.getElementById("psPie5");

    let loaderMonthPower = document.getElementById("loaderMonthPower");
    let powerConsumMonthNoData = document.getElementById("powerConsumMonthNoData");
    let power_consumption_month = document.getElementById("power_consumption_month");



    let loaderSitePower = document.getElementById("loaderSitePower");
    let SitePowerNoData = document.getElementById("SitePowerNoData");
    let SitePowerConsumption = document.getElementById("SitePowerConsumption");

    let timeSeriesPowerConsumptionAssetwise = document.getElementById(
      "power-consumption-assetwise"
    );


    // ----------------------------------------------

    if (resfunPowerConsumptionObject1 != null) {
      if (resfunPowerConsumptionObject1.response == null) {
        pcTotalHtMeter.innerHTML = "0 kwh";
      } else {
        pcTotalHtMeter.innerHTML =
          resfunPowerConsumptionObject1.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject2 != null) {
      if (resfunPowerConsumptionObject2.response == null) {
        pcTotalTransformer.innerHTML = "0 kwh";
      } else {
        pcTotalTransformer.innerHTML =
          resfunPowerConsumptionObject2.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject3 != null) {
      if (resfunPowerConsumptionObject3.response == null) {
        pcTotalDg.innerHTML = "0 kwh";
      } else {
        pcTotalDg.innerHTML = resfunPowerConsumptionObject3.response + " kwh";
      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject4 != null) {
      if (resfunPowerConsumptionObject4.response == null) {
        pcTotalDieselConsumed.innerHTML = "0 liters";
      } else {
        pcTotalDieselConsumed.innerHTML =
          resfunPowerConsumptionObject4.response + " liters";

      }
    }

    // ----------------------------------------------

    if (resfunPowerConsumptionObject5 != null) {
      loaderPowerConsumPieTop.style.display = "block";
      powerConsumPieNoDataTop.style.display = "none";

      let valueChartName = Object.keys(resfunPowerConsumptionObject5.pie);
      let valueChartY = Object.values(resfunPowerConsumptionObject5.pie);

      console.log("Power Consum Pie Chart - " + valueChartName);

      if (valueChartName[0] != null) {
        psPie1.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F2C06C;"></i> ' +
          valueChartName[0] +
          "<br/>";
      }

      if (valueChartName[1] != null) {
        psPie2.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F8EA94;"></i> ' +
          valueChartName[1] +
          "<br/>";
      }

      if (valueChartName[2] != null) {
        psPie3.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#A1CD7A;"></i> ' +
          valueChartName[2] +
          "<br/>";
      }

      if (valueChartName[3] != null) {
        psPie4.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#D44B52;"></i> ' +
          valueChartName[3] +
          "<br/>";
      }

      if (valueChartName[4] != null) {
        psPie5.innerHTML =
          '<i class="bi  bi-square-fill " style="color:#F69380;"></i> ' +
          valueChartName[4] +
          "<br/>";
      }

      // Added Now
      new Chart(power_consume_pieTop, {
        type: "pie",
        data: {
          labels: valueChartName,
          datasets: [
            {
              label: "Power",
              data: valueChartY,
              backgroundColor: [
                "#F2C06C",
                "#F8EA94",
                "#A1CD7A",
                "#D44B52",
                "#F69380",
              ],
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            datalabels: {
              color: "#ffffff",
              font: {
                size: "14",
                weight: "bold",
              },
              formatter: (value, context) => {
                const dataset = context.chart.data.datasets[context.datasetIndex];
                const total = dataset.data.reduce((sum, value) => sum + value, 0);
                const percentage = ((value / total) * 100).toFixed(1);
                return `${percentage}%`;
              },
            },
            legend: {
              display: false,
              position: "bottom",
            },
          },
        },
        plugins: [ChartDataLabels],
      });



      if (resfunPowerConsumptionObject5.total_consumption == null) {
        pcTotalDieselConsumedPie.innerHTML = "0 KWH";
      } else {
        pcTotalDieselConsumedPie.innerHTML =
          resfunPowerConsumptionObject5.total_consumption + " KWH";
      }

      let sum = 0;

      for (let i = 0; i < valueChartY.length; i += 1) {
        if (valueChartY[i] == null) {
          let a = 0;
          sum += a;
        } else {
          sum += valueChartY[i];
        }
      }

      loaderPowerConsumPieTop.style.display = "none";
      if (sum == 0) {
        powerConsumPieNoDataTop.style.display = "block";
        power_consume_pieTop.style.display = "none";
      } else {
        powerConsumPieNoDataTop.style.display = "none";
        power_consume_pieTop.style.display = "block";
      }
    }

    // ----------------------------------------------
    if (resfunPowerConsumptionObject7 != null) {

      let arrAllObjects = Object.values(resfunPowerConsumptionObject7.response);
      let arrSolar = [];
      let arrDG = [];
      let arrMains = [];
      let arrSolar_avg = [];
      let arrDg_avg = [];
      let arrMains_avg = [];
      let arrDGpercent = [];
      let arrSolar_avg_precent = [];
      let arrMains_avg_precent = [];
      let arrconsum = [];

      for (let i = 0; i < arrAllObjects.length; i++) {
        arrSolar.push(arrAllObjects[i].Solar);
        arrDG.push(arrAllObjects[i].dg);
        arrDGpercent.push(arrAllObjects[i].dg_percentage);
        arrMains.push(arrAllObjects[i].mains);
        arrSolar_avg.push(arrAllObjects[i].solar_area_avg);
        arrSolar_avg_precent.push(arrAllObjects[i].solar_percentage);
        arrDg_avg.push(arrAllObjects[i].dg_area_avg);
        arrMains_avg.push(arrAllObjects[i].mains_area_avg);
        arrMains_avg_precent.push(arrAllObjects[i].mains_percentage);
        arrconsum.push(arrAllObjects[i].consumption_per_sq_feet)
      }

      // Added now
      new Chart(power_consumption_month, {
        type: "bar",

        data: {
          labels: Object.keys(resfunPowerConsumptionObject7.response),
          datasets: [
            {
              label: "DG",
              backgroundColor: "#E95420",
              data: arrDG,
              borderWidth: 1,
              borderColor: "#E95420",
              stack: "Stack 0",
              order: 2,
            }
          ]
        },
        options: {
          responsive: true,
          interaction: {
            intersect: false,
          },
          scales: {
            x: {
              stacked: true,
            },
            y: {
              stacked: true,
            },
          },
          maintainAspectRatio: false,
          scales: {
            x: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Sites',
                padding: {
                  top: 20,
                }
              }
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'kVAh/liter'
              },
            },
            percentage: {
              beginAtZero: true,
              position: 'right',
              title: {
                display: true,
                text: 'Per Sq.ft Rs'
              },
            },
          },
          plugins: {
            datalabels: {
              display: false,
            },
            legend: {
              labels: {
                usePointStyle: true
              },
              display: true,
              position: "top",
              align: "center"
            },
            layout: {
              padding: {
                right: 50  // Increase right padding for the chart area
              }
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      // loaderMonthPower.style.display = "none";
      powerConsumMonthNoData.style.display = "none";
      power_consumption_month.style.display = "block";


    }

    if (resfunPowerConsumptionObject8 != null) {
      SitePowerConsumption.style.display = "none";
      loaderSitePower.style.display = "block";
      SitePowerNoData.style.display = "none";

      let arrAllObjects = Object.values(resfunPowerConsumptionObject8.response);
      let arrSolar = [];
      let arrSolaravg = [];
      let arrDG = [];
      let arrDGavg = [];
      let arrMains = [];
      let arrMainsavg = [];
      let arrSolarpercent = [];
      let arrDGpercent = [];
      let arrMainspercent = [];
      let arrconsum = [];

      for (let i = 0; i < arrAllObjects.length; i++) {
        arrSolar.push(arrAllObjects[i].Solar);
        arrSolaravg.push(arrAllObjects[i].solar_area_avg);
        arrDG.push(arrAllObjects[i].dg);
        arrDGavg.push(arrAllObjects[i].dg_area_avg);
        arrMains.push(arrAllObjects[i].main);
        arrMainsavg.push(arrAllObjects[i].mains_area_avg);
        arrSolarpercent.push(arrAllObjects[i].solar_percentage);
        arrDGpercent.push(arrAllObjects[i].dg_percentage);
        arrMainspercent.push(arrAllObjects[i].main_percentage);
        arrconsum.push(arrAllObjects[i].consumption_per_sq_feet)
      }
      console.log("++++++++++++++++++++++++++++++++++++++++++++++++Satcked Bar+++++++++++++++++++++++++++++++++++++++++++++++++++++++++")
      console.log(arrSolar);
      console.log(arrDG);
      // console.log(arrHtMeter);
      // console.log(arrAverage);


      // Added now
      new Chart(SitePowerConsumption, {
        type: "bar",
        data: {
          labels: Object.keys(resfunPowerConsumptionObject7.response),
          datasets: [


            {
              label: "DG",
              backgroundColor: ["#77216F"],
              data: arrDG,
              borderWidth: 1,
              borderColor: "#77216F",
              stack: "Stack 0",
              order: 2,
              datalabels: {
                display: true,
                formatter: function (value, context) {
                  const percentValue = arrDGpercent[context.dataIndex];
                  return !isNaN(percentValue) ? percentValue.toFixed(2) + '%' : ' ';
                },
                color: "#000", // Set the desired font color (white)
                anchor: "center",
                align: "center",
                offset: 0,
                font: {
                  size: "10",
                  weight: "bold",
                }, // Make sure datalabels are enabled
              },
            },

            {
              label: "Renewable",
              backgroundColor: ["#FDAB3D"],
              data: arrSolar,
              borderWidth: 1,
              borderColor: "#FDAB3D",
              stack: "Stack 0",
              order: 2,
              datalabels: {
                formatter: function (value, context) {
                  const percentValue = arrSolarpercent[context.dataIndex];
                  return !isNaN(percentValue) ? percentValue.toFixed(2) + '%' : ' ';
                },
                color: "#000", // Set the desired font color (white)
                anchor: "center",
                align: "center",
                offset: 0,
                font: {
                  size: "10",
                  weight: "bold",
                },
                display: true, // Make sure datalabels are enabled
              },
            },

            {
              label: "Mains",
              backgroundColor: ["#E95420"],
              data: arrMains,
              borderWidth: 1,
              borderColor: "#E95420",
              stack: "Stack 0",
              order: 2,
              datalabels: {
                formatter: function (value, context) {
                  const percentValue = arrMainspercent[context.dataIndex];
                  return !isNaN(percentValue) ? percentValue.toFixed(2) + '%' : ' ';
                },
                color: "#000", // Set the desired font color (white)
                anchor: "center",
                align: "center",
                offset: 0,
                font: {
                  size: "10",
                  weight: "bold",
                },
                display: true, // Make sure datalabels are enabled
              },
            },
            {
              type: "line",
              tension: 0,
              label: "Consumption per sq.ft",
              backgroundColor: ["#730000"],
              data: arrconsum,
              borderWidth: 0.4,
              borderColor: "#730000",
              stack: "Stack 1",
              order: 1,
              yAxisID: 'percentage',
            },
          ],
        },
        options: {
          responsive: true,
          interaction: {
            intersect: false,
          },
          scales: {
            x: {
              stacked: true,
            },
            y: {
              stacked: true,
            },
          },
          maintainAspectRatio: false,
          scales: {
            x: {
              ticks: {
                callback: function (value) {
                  return this.getLabelForValue(value).substr(0, 15);
                },
              },
              beginAtZero: true,
              title: {
                display: true,
                text: 'Sites',
                padding: {
                  top: 20,
                }
              }
            },
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Consumption kVAh'
              },
            },
            percentage: {
              beginAtZero: true,
              position: 'right',
              title: {
                display: true,
                text: 'Per Sq.ft Rs'
              },
            },
          },
          plugins: {
            datalabels: {
              display: true,
            },
            legend: {
              labels: {
                usePointStyle: true  // Enable point style icons
              },
              display: true,
              position: "top",
              align: "center",


            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderSitePower.style.display = "none";
      SitePowerNoData.style.display = "none";
      SitePowerConsumption.style.display = "block";
    }

  }

  if (activeWaterConsumption == 1) {
    let titleWaterConsumption = document.getElementById(
      "titleWaterConsumption"
    );

    let wcTotalConsumption = document.getElementById("wcTotalConsumption");
    let wcTotalDomestic = document.getElementById("wcTotalDomestic");
    let wcFlushingTotal = document.getElementById("wcFlushingTotal");
    let wcTotalIrrigation = document.getElementById("wcTotalIrrigation");

    let loaderWaterConsumPie = document.getElementById("loaderWaterConsumPie");
    let waterConsumPieNoData = document.getElementById("waterConsumPieNoData");
    let water_consume_pie = document.getElementById("water-consume-pie");
    let wsPie1 = document.getElementById("wsPie1");

    let loaderWaterConsum = document.getElementById("loaderWaterConsum");
    let waterConsumNoData = document.getElementById("waterConsumNoData");
    let water_consumption = document.getElementById("water-consumption");

    let loaderWaterConsumLPCD = document.getElementById("loaderWaterConsumLPCD");
    let waterConsumLPCDNoData = document.getElementById("waterConsumLPCDNoData");
    let water_consume_lpcd = document.getElementById("water-consume-lpcd");
    let wsLPCD = document.getElementById("wsLPCD");

    // ----------------------------------------------

    if (resfunWaterConsumptionObject1 != null) {
      if (resfunWaterConsumptionObject1.response == null) {
        wcTotalConsumption.innerHTML = "0 KL";
      } else {
        wcTotalConsumption.innerHTML =
          resfunWaterConsumptionObject1.response + " KL";
      }
    }

    // ----------------------------------------------

    if (resfunWaterConsumptionObject2 != null) {
      if (resfunWaterConsumptionObject2.response["Domestic KL"] == null) {
        wcTotalDomestic.innerHTML = "0 KL";
      } else {
        wcTotalDomestic.innerHTML =
          resfunWaterConsumptionObject2.response["Domestic KL"] + " KL";
      }

      if (resfunWaterConsumptionObject2.response["Flushing KL"] == null) {
        wcFlushingTotal.innerHTML = "0 KL";
      } else {
        wcFlushingTotal.innerHTML =
          resfunWaterConsumptionObject2.response["Flushing KL"] + " KL";
      }

      if (resfunWaterConsumptionObject2.response["Irrigation KL"] == null) {
        wcTotalIrrigation.innerHTML = "0 KL";
      } else {
        wcTotalIrrigation.innerHTML =
          resfunWaterConsumptionObject2.response["Irrigation KL"] + " KL";
      }
    }

    // ----------------------------------------------

    if (resfunWaterConsumptionObject5 != null) {
      loaderWaterConsumPie.style.display = "block";
      waterConsumPieNoData.style.display = "none";

      let valueChartName = Object.keys(resfunWaterConsumptionObject5.response);
      let valueChartY = Object.values(resfunWaterConsumptionObject5.response);

      console.log(valueChartY);

      let waterPieChartColors = [
        "#F2C06C",
        "#F8EA94",
        "#A1CD7A",
        "#D44B52",
        "#F69380",
        "#FF933C",
        "#FFBD3C",
        "#B4FF3C",
        "#4BFF3C",
        "#F69380",
        "#3CFF93",
        "#3CDEFF",
        "#3C4BFF",
        "#BD3CFF",
        "#FF3CFC",
        "#5F8900",
        "#008913",
        "#007C89",
        "#280089",
        "#890069",
      ];

      // Added Now
      new Chart(water_consume_pie, {
        type: "bar",
        data: {
          labels: valueChartName,
          datasets: [
            {
              label: "Water Resource",
              data: valueChartY,
              backgroundColor: waterPieChartColors,
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          height: 400,

          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Consumption in %'
              }
            },
            x: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Water Resources'
              }
            }

          },

          plugins: {

            title: {
              fullSize: true,
              display: true,
              text: 'Water Resources',
              color: 'black',
              align: 'center',
              font: {
                weight: 'bold'
              },
              font: {
                size: 14
              },
              padding: {
                top: 1,
                bottom: 30
              }
            },

            datalabels: {
              color: "#ffffff",
              font: {
                size: "14",
                weight: "bold",
              },
            },
            legend: {
              display: false,
              position: "bottom",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      let sum = 0;

      for (let i = 0; i < valueChartY.length; i += 1) {
        if (valueChartY[i] == null) {
          let a = 0;
          sum += a;
        } else {
          sum += valueChartY[i];
        }
      }

      loaderWaterConsumPie.style.display = "none";
      if (sum == 0) {
        waterConsumPieNoData.style.display = "block";
        water_consume_pie.style.display = "none";
      } else {
        waterConsumPieNoData.style.display = "none";
        water_consume_pie.style.display = "block";
      }
    }

    // ----------------------------------------------------------

    if (resfunWaterConsumptionObjectLPCD != null) {
      let valueChartName = Object.keys(resfunWaterConsumptionObjectLPCD.response);
      let valueChartY = Object.values(resfunWaterConsumptionObjectLPCD.response);

      console.log(valueChartY);

      let waterPieChartColors = [
        "#F2C06C",
        "#F8EA94",
        "#A1CD7A",
        "#D44B52",
        "#F69380",
        "#FF933C",
        "#FFBD3C",
        "#B4FF3C",
        "#4BFF3C",
        "#F69380",
        "#3CFF93",
        "#3CDEFF",
        "#3C4BFF",
        "#BD3CFF",
        "#FF3CFC",
        "#5F8900",
        "#008913",
        "#007C89",
        "#280089",
        "#890069",
      ];




      new Chart(water_consume_lpcd, {
        type: "bar",
        data: {
          labels: valueChartName,
          datasets: [
            {
              label: "Water Consumption",
              data: valueChartY,
              backgroundColor: waterPieChartColors,
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: function (value) {
                  return value
                }
              },
              title: {
                display: true,
                text: '',
              }
            },
            x: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Towers',
                padding: {
                  top: 40,
                }
              }
            }

          },
          plugins: {


            title: {
              fullSize: true,
              display: true,
              text: '',
              color: 'black',
              align: 'center',
              font: {
                weight: 'bold'
              },
              font: {
                size: 14
              },
              padding: {
                top: 1,
                bottom: 30
              }
            },

            datalabels: {
              color: "#000000",
              font: {
                size: "14",
                weight: "bold",
              },
              ticks: {
                callback: function (value) {
                  return value + "%"
                }
              },
            },
            legend: {
              display: false,
              position: "bottom",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      let sum = 0;

      for (let i = 0; i < valueChartY.length; i += 1) {
        if (valueChartY[i] == null) {
          let a = 0;
          sum += a;
        } else {
          sum += valueChartY[i];
        }
      }

      loaderWaterConsumLPCD.style.display = "none";
      if (sum == 0) {
        waterConsumLPCDNoData.style.display = "block";
        water_consume_lpcd.style.display = "none";
      } else {
        waterConsumLPCDNoData.style.display = "none";
        water_consume_lpcd.style.display = "block";
      }
    }

    // ----------------------------------------------

    if (resfunWaterConsumptionObject6 != null) {
      water_consumption.style.display = "none";
      loaderWaterConsum.style.display = "block";
      waterConsumNoData.style.display = "none";

      let arrAllObjects = Object.values(resfunWaterConsumptionObject6.response);
      let arrdomestic_KL = [];
      let arrflushing_KL = [];
      let arrirrigation_KL = [];
      let arrTotal = [];
      let arrAverage = [];

      for (let i = 0; i < arrAllObjects.length; i++) {
        arrdomestic_KL.push(arrAllObjects[i].domestic_KL);
        arrflushing_KL.push(arrAllObjects[i].flushing_KL);
        arrirrigation_KL.push(arrAllObjects[i].irrigation_KL);
        arrTotal.push(arrAllObjects[i].total);
        arrAverage.push(arrAllObjects[i].average);
      }

      // Added now
      new Chart(water_consumption, {
        type: "bar",
        data: {
          labels: Object.keys(resfunWaterConsumptionObject6.response),
          datasets: [
            {
              label: "Domestic KL",
              backgroundColor: ["#E95420"],
              data: arrdomestic_KL,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              label: "Flushing KL",
              backgroundColor: ["#77216f"],
              data: arrflushing_KL,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              label: "Irrigation KL",
              backgroundColor: ["#f2ad6c"],
              data: arrirrigation_KL,
              borderWidth: 1,
              stack: "Stack 0",
            },
            {
              type: "line",
              tension: 1,
              label: "Average",
              backgroundColor: ["#16a60c"],
              data: arrAverage,
              borderWidth: 0.4,
              stack: "Stack 0",
            },
          ],
        },
        options: {
          responsive: true,
          interaction: {
            intersect: false,
          },
          scales: {
            x: {
              stacked: true,
            },
            y: {
              stacked: true,
            },

          },
          maintainAspectRatio: false,
          scales: {
            x: {
              ticks: {
                callback: function (value) {
                  return this.getLabelForValue(value).substr(0, 15);
                },
              },
            },

            x: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Dates'
              }
            }


          },
          plugins: {
            datalabels: {
              color: "#000000",
              anchor: "end",
              align: "end",
              offset: -6,
              font: {
                size: "10",
                weight: "bold",
              },
            },
            legend: {
              display: true,
              position: "no",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderWaterConsum.style.display = "none";
      waterConsumNoData.style.display = "none";
      water_consumption.style.display = "block";
    }
  }

  if (activeWaterConsumptionTop == 1) {

  }

  if (activeCarbonEmission == 1 && resfunCarbonEmissionScope1 != null) {
    let cEScope1 = document.getElementById("cEScope1");
    cEScope1.innerHTML = resfunCarbonEmissionScope1.response + " kg CO2";

    let cEScope2 = document.getElementById("cEScope2");
    cEScope2.innerHTML = resfunCarbonEmissionScope2.response + " kg CO2";
  }

  if (activeFuelConsumption == 1 && resfunFuelConsumption != null) {
    let fuelConsmVal = document.getElementById("fuelConsmVal");
    fuelConsmVal.innerHTML = resfunFuelConsumption.response + " liters";
  }

  if (activeFitoutRequest == 1 && resfunFitOutRequest != null) {
    let fitOutVal = document.getElementById("fitOutVal");
    fitOutVal.innerHTML = resfunFitOutRequest.response + "";
  }

  if (activeEnergyIntensity == 1 && resgetEnergyIntensity != null) {
    let energyIntensity = document.getElementById("energyIntensity"); let fitOutVal = document.getElementById("fitOutVal");
    energyIntensity.innerHTML = resgetEnergyIntensity.response;
  }



  if (activeConductedAssets == 1 && resfunPpmConducted != null) {
    let cardConductedAssets = document.getElementById("cardConductedAssets");
    cardConductedAssets.innerHTML = resfunPpmConducted.response + "";
  }



  if (activeCustomerAverage == 1 && resfunCardCustomerAverage != null) {
    let cardCustomerAvg = document.getElementById("cardCustomerAvg");
    cardCustomerAvg.innerHTML = resfunCardCustomerAverage.response + "";
  }


  if (activeOpenEscalation == 1 && resfunCardOpenCloseEscalation != null) {
    let cardOpenEscalation = document.getElementById("cardOpenEscalation");
    cardOpenEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Open + "";
  }


  if (activeCloseEscalation == 1 && resfunCardOpenCloseEscalation != null) {
    let cardCloseEscalation = document.getElementById("cardCloseEscalation");
    cardCloseEscalation.innerHTML = resfunCardOpenCloseEscalation.response.Closed + "";
  }

  if (activeAvgEscalation == 1 && resfunCardAvgEscalation != null) {
    let cardAvgEscalation = document.getElementById("cardAvgEscalation");
    cardAvgEscalation.innerHTML = resfunCardAvgEscalation.response + "";
  }

  if (activeIncidents == 1 && resfunIncidents != null) {
    let incidentsOpen = document.getElementById("fitOutVal");
    let incidentsInProgress = document.getElementById("fitOutVal");
    let incidentsPending = document.getElementById("fitOutVal");
    let incidentsClosed = document.getElementById("fitOutVal");

    let loaderIncident = document.getElementById("loaderIncident");
    let incidentNoData = document.getElementById("incidentNoData");
    let incident_dount = document.getElementById("incident-dount");

    loaderIncident.style.display = "block";
    incidentNoData.style.display = "none";

    // incidentsOpen.innerHTML = resfunIncidents.response["Open"];
    // incidentsInProgress.innerHTML = resfunIncidents.response["In Progress"];
    // incidentsPending.innerHTML = resfunIncidents.response["Pending"];
    // incidentsClosed.innerHTML = resfunIncidents.response["Closed"];

    let sum =
      resfunIncidents.response["Open"] +
      resfunIncidents.response["In Progress"] +
      resfunIncidents.response["Pending"] +
      resfunIncidents.response["Closed"];

    new Chart(incident_dount, {
      type: "doughnut",
      data: {
        labels: ["Open", "Work In Progress", "Pending", "Closed"],
        datasets: [
          {
            label: "Delivered Amount",
            data: [
              resfunIncidents.response["Open"],
              resfunIncidents.response["In Progress"],
              resfunIncidents.response["Pending"],
              resfunIncidents.response["Closed"],
            ],
            backgroundColor: ["#77216f", "#f2c06c", "#e2445b", "#a1cd7a"],
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderIncident.style.display = "none";
    if (sum == 0) {
      incidentNoData.style.display = "block";
      incident_dount.style.display = "none";
    } else {
      incidentNoData.style.display = "none";
      incident_dount.style.display = "block";
    }
  }

  if (activeCategoryWiseIncidents == 1 && resfunIncidentsCategory != null) {
    let incidentsCatMechanical = document.getElementById(
      "incidentsCatMechanical"
    );
    let incidentsCatEngineering = document.getElementById(
      "incidentsCatEngineering"
    );
    let incidentsCatHealthSafety = document.getElementById(
      "incidentsCatHealthSafety"
    );
    let incidentsCatOther = document.getElementById("incidentsCatOther");

    let loaderIncidentCategory = document.getElementById(
      "loaderIncidentCategory"
    );
    let incidentCategoryNoData = document.getElementById(
      "incidentCategoryNoData"
    );
    let incident_category_pie = document.getElementById(
      "incident-category-pie"
    );

    loaderIncidentCategory.style.display = "block";
    incidentCategoryNoData.style.display = "none";

    let xValues = [], yValues = [];

    xValues = Object.keys(resfunIncidentsCategory.response);
    yValues = Object.values(resfunIncidentsCategory.response);

    let incidentCategoryPieColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];

    new Chart(incident_category_pie, {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [
          {
            label: "Share",
            data: yValues,
            backgroundColor: incidentCategoryPieColors,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderIncidentCategory.style.display = "none";
    incidentCategoryNoData.style.display = "none";
    incident_category_pie.style.display = "block";
  }

  if (activeManPowerAttendance == 1 && resfunManPower != null) {
    let ManPowerNoData = document.getElementById("ManPowerNoData");
    let loaderManPower = document.getElementById("loaderManPower");
    let tblManPowerinfo = document.getElementById("tblManPowerinfo");
    let tablebodyManPower = document.getElementById("tablebodyManPower");
    let mP = document.getElementById("mP");

    tblManPowerinfo.style.display = "none";
    loaderManPower.style.display = "block";
    ManPowerNoData.style.display = "none";

    let resfunManPowerArray = resfunManPower.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunManPowerArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td>` +
        resfunManPowerArray[x][0] +
        `</td>` +
        `<td>` +
        resfunManPowerArray[x][1] +
        `</td>`;
      // `<td>` +
      // resfunManPowerArray[x][2] +
      // `</td>` +
      // `<td>` +
      // resfunManPowerArray[x][3] +
      // `</td>`;
      allDetails = allDetails + `</tr>`;
    }
    tablebodyManPower.innerHTML = allDetails;

    loaderManPower.style.display = "none";
    if (resfunManPower.length == 0) {
      ManPowerNoData.style.display = "block";
      tblManPowerinfo.style.display = "none";
    } else {
      ManPowerNoData.style.display = "none";
      tblManPowerinfo.style.display = "inline-table";
    }
  }

  if (activeEventsFootfallAnalysis == 1) {
    // No Data
  }


  if (activeFitout == 1 && resfunRCA != null) {
    let FitoutNoData = document.getElementById("FitoutNoData");
    let tblFitout = document.getElementById("tblFitout");
    let tablebodyFitout = document.getElementById("tablebodyFitout");
    let loaderFitout = document.getElementById("loaderFitout");
    let ft = document.getElementById("ft");

    tblFitout.style.display = "none";
    loaderFitout.style.display = "block";
    FitoutNoData.style.display = "none";

    let resfunFitoutArray = resfunFitout.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunFitoutArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        // `<td>` +
        // index +
        // `</td>` +
        `<td>` +
        resfunFitoutArray[x][0] +
        `</td>` +
        `<td>` +
        resfunFitoutArray[x][1] +
        `</td>` +
        `<td>` +
        resfunFitoutArray[x][2] +
        `</td>` +

        `<td>` +
        resfunFitoutArray[x][4] +
        `</td>` +
        `<td>` +
        resfunFitoutArray[x][5] +
        `</td>` +
        `<td>` +
        resfunFitoutArray[x][6] +
        `</td>`;
      allDetails = allDetails + `</tr>`;
    }
    tablebodyFitout.innerHTML = allDetails;

    loaderFitout.style.display = "none";
    if (resfunFitout.length == 0) {
      FitoutNoData.style.display = "block";
      tblFitout.style.display = "none";
    } else {
      FitoutNoData.style.display = "none";
      tblFitout.style.display = "block";
    }
  }



  if (activeRAC == 1 && resfunRCA != null) {
    let RCANoData = document.getElementById("RCANoData");
    let tblRCAinfo = document.getElementById("tblRCAinfo");
    let tablebodyRCA = document.getElementById("tablebodyRCA");
    let loaderRCA = document.getElementById("loaderRCA");
    let rca = document.getElementById("rca");

    tblRCAinfo.style.display = "none";
    loaderRCA.style.display = "block";
    RCANoData.style.display = "none";

    let resfunRCAArray = resfunRCA.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunRCAArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][0] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][1] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][2] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][3] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][4] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][5] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][6] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][7] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][8] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][9] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][10] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][11] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][12] +
        `</td>` +
        `<td>` +
        resfunRCAArray[x][13] +
        `</td>` +
        `</tr>`;
    }
    tablebodyRCA.innerHTML = allDetails;

    loaderRCA.style.display = "none";
    if (resfunRCAArray.length == 0) {
      RCANoData.style.display = "block";
      tblRCAinfo.style.display = "none";
    } else {
      RCANoData.style.display = "none";
      tblRCAinfo.style.display = "block";
    }
  }

  if (activeAssetsBreakdown == 1 && resfunAssetsBreakdown != null) {
    let assetsBreakdownNoData = document.getElementById(
      "assetsBreakdownNoData"
    );
    let tblAssetsBreakdowninfo = document.getElementById(
      "tblAssetsBreakdowninfo"
    );
    let tablebodyAssetsBreakdown = document.getElementById(
      "tablebodyAssetsBreakdown"
    );
    let loaderAssetsBreakdown = document.getElementById(
      "loaderAssetsBreakdown"
    );
    let asset = document.getElementById("asset");

    tblAssetsBreakdowninfo.style.display = "none";
    loaderAssetsBreakdown.style.display = "block";
    assetsBreakdownNoData.style.display = "none";

    let resfunAssetsBreakdownArray = resfunAssetsBreakdown.response.values;
    allDetails = ``;
    var index = 0;

    for (let x in resfunAssetsBreakdownArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][0] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][1] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][2] +
        `</td>` +
        `<td>` +
        resfunAssetsBreakdownArray[x][3] +
        `</td>`;

      if (
        resfunAssetsBreakdownArray[x][4] < 0 ||
        resfunAssetsBreakdownArray[x][4] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunAssetsBreakdownArray[x][4] + `</td>`;
      }

      if (
        resfunAssetsBreakdownArray[x][5] < 0 ||
        resfunAssetsBreakdownArray[x][5] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails + `<td>` + resfunAssetsBreakdownArray[x][5] + `</td>`;
      }
      allDetails = allDetails + `</tr>`;
    }
    tablebodyAssetsBreakdown.innerHTML = allDetails;

    loaderAssetsBreakdown.style.display = "none";
    if (resfunAssetsBreakdownArray.length == 0) {
      assetsBreakdownNoData.style.display = "block";
      tblAssetsBreakdowninfo.style.display = "none";
    } else {
      assetsBreakdownNoData.style.display = "none";
      tblAssetsBreakdowninfo.style.display = "block";
    }
  }

  if (activeAssetsBreakdownGraph == 1 && resfunAssetBreakDown != null) {
    let AssetBreakDownNoData = document.getElementById("AssetBreakDownNoData");
    let AssetBreakDown = document.getElementById("AssetBreakDown");
    let loaderAssetBreakDown = document.getElementById(
      "loaderAssetBreakDown"
    );

    let arrAllObjects = Object.values(resfunAssetBreakDown.response);
    let arrCriticalBreak = [];
    let arrCriticalOperational = [];
    let arrNonCriticalBreak = [];
    let arrNonCriticalOperational = [];

    for (let i = 0; i < arrAllObjects.length; i++) {
      arrCriticalBreak.push(arrAllObjects[i].critical_breakdown_count);
      // arrCriticalOperational.push(arrAllObjects[i].Critical_Operational);
      arrNonCriticalBreak.push(arrAllObjects[i].non_critical_breakdown_count);
      // arrNonCriticalOperational.push(arrAllObjects[i].Non_Critical_Operational);

    }

    // Added now
    new Chart(AssetBreakDown, {
      type: "bar",
      data: {
        labels: Object.keys(resfunAssetBreakDown.response),
        datasets: [
          {
            label: "Critical Breakdown",
            backgroundColor: "rgba(255, 159, 64)",
            data: arrCriticalBreak,
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Non-Critical Breakdown",
            backgroundColor: ["#555555"],
            data: arrNonCriticalBreak,
            borderWidth: 1,
            stack: "Stack 1",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Sites',
              padding: {
                top: 20,
              }
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Total Breakdown'
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            labels: {
              usePointStyle: true  // Enable point style icons
            },
            display: true,
            position: "top",
            align: "end"
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderAssetBreakDown.style.display = "none";

    if (resfunAssetBreakDown.response.length == 0) {
      AssetBreakDownNoData.style.display = "block";
      AssetBreakDown.style.display = "none";
    } else {
      AssetBreakDownNoData.style.display = "none";
      AssetBreakDown.style.display = "block";
    }
  }


  if (activeSafeManHours == 1 && resfunGetSafeManHours != null) {
    let cardSafeManHours = document.getElementById("cardSafeManHours");
    cardSafeManHours.innerHTML = resfunGetSafeManHours.response + "";
  }

  if (activeWaste == 1) {
  }

  if (activePyramid == 1 && resfunPyramid != null) {
    let chartPyramidNoData = document.getElementById("chartPyramidNoData");
    let chartPyramid = document.getElementById("chartPyramid");
    let loaderPyramid = document.getElementById("loaderPyramid");
    let pyr = document.getElementById("pyr");

    chartPyramid.style.display = "none";
    loaderPyramid.style.display = "block";
    chartPyramidNoData.style.display = "none";
    console.log(resfunPyramid);

    let valueChartName = Object.keys(resfunPyramid.response);
    let valueChartY = Object.values(resfunPyramid.response);

    myChart = new Chart(chartPyramid, {
      type: "bar",
      data: {
        labels: valueChartName,
        datasets: [
          {
            // label:"Incident",
            data: valueChartY,
            axis: "y",
            fill: true,
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],

            borderWidth: 1,
          },
        ],
      },
      options: {
        indexAxis: "y",
        responsive: true,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: false,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderPyramid.style.display = "none";
    if (resfunPyramid.response == 0) {
      chartPyramidNoData.style.display = "block";
      chartPyramid.style.display = "none";
    } else {
      chartPyramidNoData.style.display = "none";
      chartPyramid.style.display = "block";
    }
  }

  if (activeRootCause == 1 && resfunRootCause != null) {
    let incidentRoot = document.getElementById("incidentRoot");
    let loaderRootCause = document.getElementById("loaderRootCause");
    let rootCauseNoData = document.getElementById("rootCauseNoData");
    let root_Cause_pie = document.getElementById("root_Cause_pie");

    // root_Cause_pie.style.display = "none";
    loaderRootCause.style.display = "block";
    rootCauseNoData.style.display = "none";



    let sum = 0;

    let valueN = [];
    let valueYa = [];

    let arrayP = [];

    for (let i = 0; i < resfunRootCause.response.length; i++) {
      valueN[i] = resfunRootCause.response[i].name;
      valueYa[i] = resfunRootCause.response[i].y;
    }

    for (let i = 0; i < valueN.length; i++) {
      if (valueYa[i] == null) {
        arrayP.push({ name: valueN[i], y: 0 });
      } else {
        arrayP.push({
          name: valueN[i],
          y: valueYa[i],
        });
      }
    }

    let incidentRootColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];

    let total = valueN + valueYa;
    const centerTexts = {
      id: "centerTexts",
      afterDatasetsDraw(chart, args, options) {
        const {
          ctx,
          chartArea: { left, right, top, bottom, width, height },
        } = chart;
        ctx.save();

        ctx.font = "bolder 18px Arial";
        ctx.fillStyle = "rgba(0, 0, 0, 1)";
        ctx.textAlign = "center";
        ctx.fillText("Total: " + total, width, height);
      },
    };
    new Chart(root_Cause_pie, {
      type: "pie",

      data: {
        labels: valueN,
        datasets: [
          {
            label: "Incident Root Cause",
            data: valueYa,
            backgroundColor: incidentRootColors,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        indexAxis: "y",
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });
    // console.log("arraypie");
    // console.log(arrayP);

    for (let i = 0; i < valueYa.length; i += 1) {
      if (valueYa[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueYa[i];
      }
    }

    loaderRootCause.style.display = "none";
    if (sum == 0) {
      rootCauseNoData.style.display = "block";
      root_Cause_pie.style.display = "none";
    } else {
      rootCauseNoData.style.display = "none";
      root_Cause_pie.style.display = "block";
    }
  };

  if (activeReactiveProactiveTickets == 1 && resfunReactiveTicket != null) {
    let ReactiveTicketNoData = document.getElementById("ReactiveTicketNoData");
    let reactiveTicket = document.getElementById("reactiveTicket");
    let loaderReactiveTicket = document.getElementById("loaderReactiveTicket");


    loaderReactiveTicket.style.display = "block";
    ReactiveTicketNoData.style.display = "none";

    new Chart(reactiveTicket, {
      type: "doughnut",
      data: {
        labels: ["Proactive", "Reactive"],
        datasets: [
          {
            label: "Tickets",
            backgroundColor: ["#01c875", "#e2445b"],
            data: [
              // resfunChartTicket.response.total,
              resfunReactiveTicket.response.proactive_tickets,
              resfunReactiveTicket.response.reactive_tickets,
            ],
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffff",
            // anchor: "end",
            // align: "end",
            offset: -6,
            font: {
              size: "14",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

  }

  if (activeCategoryWiseEscalation == 1 && resfunCategoryWiseEscalation != null) {
    let NoDataCategoryEscalation = document.getElementById("NoDataCategoryEscalation");
    let CategoryEscalation = document.getElementById("CategoryEscalation");
    let loaderCategoryEscalation = document.getElementById("loaderCategoryEscalation");
    // let dt1 = document.getElementById("dt1");

    loaderCategoryEscalation.style.display = "block";
    NoDataCategoryEscalation.style.display = "none";

    let xValues = [], yValues = [];

    xValues = Object.keys(resfunCategoryWiseEscalation.response);
    yValues = Object.values(resfunCategoryWiseEscalation.response);

    let CategoryEscalationPieColors = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];


    // Added Now
    new Chart(CategoryEscalation, {
      type: "pie",
      data: {
        labels: xValues,
        datasets: [
          {
            label: "Category",
            backgroundColor: CategoryEscalationPieColors,
            data: yValues,
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCategoryEscalation.style.display = "none";
    NoDataCategoryEscalation.style.display = "none";
    CategoryEscalation.style.display = "block";
  }

  if (activeTotalDownloads == 1) {

  }
  if (activeRegisterdUser == 1) {

  }

  if (activeZoneWiseEscalation == 1 && resfunSiteWiseEscalation != null) {
    let SiteWiseEscalationNoData = document.getElementById("SiteWiseEscalationNoData");
    let SiteWiseEscalation = document.getElementById("SiteWiseEscalation");
    let loaderSiteWiseEscalation = document.getElementById("loaderSiteWiseEscalation");
    // let occupancy = document.getElementById("occupancy");

    loaderSiteWiseEscalation.style.display = "block";
    SiteWiseEscalationNoData.style.display = "none";



    resfunSiteWiseEscalation = JSON.parse(this.responseText);
    console.log("Site Wise Escalation - ");
    console.log(resfunSiteWiseEscalation);

    let xLabelsArray = Object.keys(resfunSiteWiseEscalation.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }
    // Added now
    new Chart(SiteWiseEscalation, {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Site Wise",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: Object.values(resfunSiteWiseEscalation.response),
            borderWidth: 1,

          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,

        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderSiteWiseEscalation.style.display = "none";

    SiteWiseEscalationNoData.style.display = "none";
    SiteWiseEscalation.style.display = "block";



  }

  if (activeServicePartnerEvaluation == 1 && resfunAuditScore != null) {
    let AuditScoreNoData = document.getElementById("AuditScoreNoData");
    let tblAuditScoreinfo = document.getElementById(
      "tblAuditScoreinfo"
    );
    let tablebodyAuditScore = document.getElementById(
      "tablebodyAuditScore"
    );
    let loaderAuditScore = document.getElementById("loaderAuditScore");


    // Assuming your API response is in the correct format
    let resfunAuditScore = JSON.parse(this.responseText);

    console.log("Audit Score - ");
    console.log(resfunAuditScore);

    let resfunAuditScoreArray = resfunAuditScore.response;
    allDetails = ``;

    for (let i = 0; i < resfunAuditScoreArray.length; i++) {
      let rowData = resfunAuditScoreArray[i];
      allDetails +=
        `<tr>` +
        `<td>` + (i + 1) + `</td>` +
        `<td>` + rowData[0] + `</td>` +
        `<td>` + (rowData[1] ? rowData[1] : '-') + `</td>` +
        `<td>` + (rowData[2] ? new Date(rowData[2]).toLocaleDateString() : '-') + `</td>` +
        `<td>` + (rowData[3] ? rowData[3] : '-') + `</td>` +
        `<td>` + (rowData[4] ? rowData[4] : '-') + `</td>` +
        `</tr>`;
    }
    tablebodyAuditScore.innerHTML = allDetails;


    loaderAuditScore.style.display = "none";
    AuditScoreNoData.style.display = "none";
    tblAuditScoreinfo.style.display = "inline-table";

  }

  if (activeGenderParticipation == 1 && resfungenderParticipation != null) {
    let genderNoData = document.getElementById("genderNoData");
    let genderParticipation = document.getElementById("genderParticipation");
    let loaderGender = document.getElementById("loaderGender");

    loaderGender.style.display = "block";
    genderNoData.style.display = "none";
    genderParticipation.style.display = "none";

    xhr_object.onload = function () {
      resfungenderParticipation = JSON.parse(this.responseText);
      console.log("Gender Participation");
      console.log(resfungenderParticipation);

      // Get the counts of male and female participants
      let femaleCount = parseInt(resfungenderParticipation.response1.female);
      let maleCount = parseInt(resfungenderParticipation.response1.male);

      // Update the pie chart data
      new Chart(genderParticipation, {
        type: "pie",
        data: {
          labels: ["Female", "Male"],
          datasets: [
            {
              label: "Gender",
              backgroundColor: ["#e2445b", "#01c875"],
              data: [femaleCount, maleCount], // Use the raw counts here
              borderWidth: 1,
              radius: "100%",
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            datalabels: {
              color: "#ffff",
              offset: -6,
              font: {
                size: "14",
                weight: "bold",
              },
              formatter: function (value, context) {
                return value === 0 ? "" : value; // Display the raw count value
              },
            },
            legend: {
              display: true,
              position: "bottom",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderGender.style.display = "none";

      if (femaleCount + maleCount === 0) {
        genderNoData.style.display = "block";
        genderParticipation.style.display = "none";
      } else {
        genderNoData.style.display = "none";
        genderParticipation.style.display = "block";
      }

    };

    xhr_object.send();

  }

  if (activeClusterStats == 1 && resfunClusterStats != null) {
    let loaderClusterStats = document.getElementById("loaderClusterStats");
    let barChartClusterStats = document.getElementById("cluster-stats");
    let clusterStatsNoData = document.getElementById("clusterStatsNoData");

    barChartClusterStats.style.display = "none";
    loaderClusterStats.style.display = "block";
    clusterStatsNoData.style.display = "none";

    xhr_object.onload = function () {
      resfunClusterStats = JSON.parse(this.responseText);
      console.log("Cluster Stats - ");
      console.log(resfunClusterStats);


      let responseValues = [];
      let responseLabels = [];

      // Extracting data from the response
      resfunClusterStats.response1.forEach(item => {
        // Check if the first element is not null
        if (item[0] !== null) {
          responseLabels.push(item[0]);
          responseValues.push(item[1]);
        }
      });

      new Chart(barChartClusterStats, {
        type: "bar",
        data: {
          labels: responseLabels,
          datasets: [
            {
              label: "Cluster",
              backgroundColor: ["#E95420"],
              data: responseValues,
              borderWidth: 1,
              borderColor: "#E95420",
              stack: "Stack 0",
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: {
              title: {
                display: true,
                text: "Cluster",
              },
            },
            y: {
              title: {
                display: true,
                text: "Total steps taken",
              },
            },
          },
          plugins: {
            datalabels: {
              color: "#000000",
              anchor: "end",
              align: "end",
              offset: -6,
              font: {
                size: "10",
                weight: "bold",
              },
            },
            legend: {
              display: true,
              position: "no",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderClusterStats.style.display = "none";
      if (resfunClusterStats.length == 0) {
        clusterStatsNoData.style.display = "block";
        barChartClusterStats.style.display = "none";
      } else {
        clusterStatsNoData.style.display = "none";
        barChartClusterStats.style.display = "block";
      }

    };
    xhr_object.send();
  }

  if (activeDailyStepStats == 1 && resfunDailyStepStats != null) {
    let loaderDailyStep = document.getElementById("loaderDailyStep");
    let barChartDailyStep = document.getElementById("barChartDailyStep");
    let dailyStepNoData = document.getElementById("dailyStepNoData");

    // barChartDailyStep.style.display = "none";
    // loaderDailyStep.style.display = "block";
    // dailyStepNoData.style.display = "none";


    let responseValues = [];
    let responseLabels = [];

    // Extracting data from the response
    resfunDailyStepStats.response1.forEach(item => {
      // Check if the first element is not null
      if (item[0] !== null) {
        responseLabels.push(item[0]);
        responseValues.push(item[1]);
      }
    });
    new Chart(barChartDailyStep, {
      type: "bar",
      data: {
        labels: responseLabels,
        datasets: [
          {
            label: "Function",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: responseValues,
            borderRadius: 15,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          yAxes: [
            {
              ticks: {
                beginAtZero: true,
              },
            },
          ],
          y: {
            title: {
              display: true,
              text: "Cumulative steps taken",
            },
          },
          x: {
            title: {
              display: true,
              text: "Date",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderDailyStep.style.display = "none";
    if (resfunDailyStepStats.length == 0) {
      dailyStepNoData.style.display = "block";
      barChartDailyStep.style.display = "none";
    } else {
      dailyStepNoData.style.display = "none";
      barChartDailyStep.style.display = "block";
    }

  }


  if (activeTrendsOverMonthSites == 1) {
    let loaderTrendsMonths = document.getElementById("loaderTrendsMonths");
    let TrendsMonthsNoData = document.getElementById("TrendsMonthsNoData");
    let trendsOverMonths = document.getElementById("trendsOverMonths");
    let loaderTrendsSites = document.getElementById("loaderTrendsSites");
    let TrendsSitesNoData = document.getElementById("TrendsSitesNoData");
    let trendsOverSites = document.getElementById("trendsOverSites");


    if (resfuntrendsOverMonths != null) {


      trendsOverMonths.style.display = "block";
      loaderTrendsMonths.style.display = "block";
      TrendsMonthsNoData.style.display = "none";

      let months = Object.keys(resfuntrendsOverMonths.response);
      let consumptionData = Object.values(resfuntrendsOverMonths.response).map(
        (item) => item.trend_over_month
      );
      // Added now
      new Chart(trendsOverMonths, {
        type: "bar",
        data: {
          labels: months,
          datasets: [
            {
              label: "Inventory Consumption",
              backgroundColor: ["#77216f"],
              data: consumptionData,
              borderWidth: 1,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          // interaction: {
          //   intersect: false,
          // },

          scales: {
            x: {
              ticks: {
                callback: function (value) {
                  return this.getLabelForValue(value).substr(0, 15);
                },
              },
              beginAtZero: true,
              title: {
                display: true,
                text: 'Months',
                padding: {
                  top: 20,
                }
              }

            },
            y: {
              beginAtZero: true,
              // ticks: {
              //   callback: function (value) {
              //     return value + "%"
              //   }
              // },
              title: {
                display: true,
                text: 'Total Cost'
              }
            }
          },
          plugins: {
            datalabels: {
              color: "#000000",
              anchor: "end",
              align: "end",
              offset: -6,
              font: {
                size: "10",
                weight: "bold",
              },
              ticks: {
                callback: function (value) {
                  return value
                }
              },
            },
            legend: {
              display: true,
              position: "no",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderTrendsMonths.style.display = "none";
      TrendsMonthsNoData.style.display = "none";
      trendsOverMonths.style.display = "block";
    }
    // --------------------------------------------------------------
    if (resfuntrendsOverSites != null) {
      trendsOverSites.style.display = "block";
      loaderTrendsSites.style.display = "block";
      TrendsSitesNoData.style.display = "none";

      let responseLabels = Object.keys(resfuntrendsOverSites.response); // Get the first key in response object
      let responseValues = Object.values(resfuntrendsOverSites.response);


      // Added now
      new Chart(trendsOverSites, {
        type: "bar",
        data: {
          labels: responseLabels,
          datasets: [
            {
              label: "Trends over Months",
              backgroundColor: ["#E95420"],
              data: responseValues,
              borderWidth: 1,
              borderColor: "#E95420",
              stack: "Stack 0",
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          // interaction: {
          //   intersect: false,
          // },

          scales: {
            x: {
              // ticks: {
              //   callback: function (value) {
              //     return this.getLabelForValue(value).substr(0, 15);
              //   },
              // },
              beginAtZero: true,
              title: {
                display: true,
                text: 'Sites',
                padding: {
                  top: 20,
                }
              }

            },
            y: {
              beginAtZero: true,
              // ticks: {
              //   callback: function (value) {
              //     return value + "%"
              //   }
              // },
              title: {
                display: true,
                text: 'Total Cost'
              }
            }
          },
          plugins: {
            datalabels: {
              color: "#000000",
              anchor: "end",
              align: "end",
              offset: -6,
              font: {
                size: "10",
                weight: "bold",
              },
              ticks: {
                callback: function (value) {
                  return value
                }
              },
            },
            legend: {
              display: true,
              position: "no",
            },
          },
        },
        plugins: [ChartDataLabels],
      });

      loaderTrendsSites.style.display = "none";
      TrendsSitesNoData.style.display = "none";
      trendsOverSites.style.display = "block";

    }
  }


  if (activeIncident == 1 && resfunIncidentSummary != null) {
    let IncidentSummaryNoData = document.getElementById("IncidentSummaryNoData");
    let tblIncidentSummaryinfo = document.getElementById("tblIncidentSummaryinfo");
    let tablebodyIncidentSummary = document.getElementById("tablebodyIncidentSummary");
    let loaderIncidentSummary = document.getElementById("loaderIncidentSummary");

    let resfunIncidentSummaryArray = resfunIncidentSummary.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunIncidentSummaryArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][0] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][1] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][2] +
        `</td>` +
        `<td>` +
        resfunIncidentSummaryArray[x][3] +
        `</td>`;

      if (resfunIncidentSummaryArray[x][4] < 0 || resfunIncidentSummaryArray[x][4] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][4] + `</td>`;
      }
      // `<td>` +
      // resfunRCAArray[x][5] +
      // `</td>`
      if (resfunIncidentSummaryArray[x][5] < 0 || resfunIncidentSummaryArray[x][5] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][5] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][6] < 0 || resfunIncidentSummaryArray[x][6] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunRCAArray[x][6] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][7] < 0 || resfunIncidentSummaryArray[x][7] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][7] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][13] < 0 || resfunIncidentSummaryArray[x][13] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][13] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][8] < 0 || resfunIncidentSummaryArray[x][8] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][8] + `</td>`;
      }

      if (resfunIncidentSummaryArray[x][9] < 0 || resfunIncidentSummaryArray[x][9] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][9] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][10] < 0 || resfunIncidentSummaryArray[x][10] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][10] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][11] < 0 || resfunIncidentSummaryArray[x][11] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][11] + `</td>`;
      }
      if (resfunIncidentSummaryArray[x][12] < 0 || resfunIncidentSummaryArray[x][12] == null) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails = allDetails + `<td>` + resfunIncidentSummaryArray[x][12] + `</td>`;
      }

      allDetails = allDetails + `</tr>`;
    }
    tablebodyIncidentSummary.innerHTML = allDetails;

    loaderIncidentSummary.style.display = "none";
    if (resfunIncidentSummaryArray.length == 0) {
      IncidentSummaryNoData.style.display = "block";
      tblIncidentSummaryinfo.style.display = "none";
    } else {
      IncidentSummaryNoData.style.display = "none";
      tblIncidentSummaryinfo.style.display = "block";
    }
  }

  if (activeLTIR == 1 && resfungetTotalAmount != null) {
    let totalAmount = document.getElementById("totalAmount");
    totalAmount.innerHTML = resfungetTotalAmount.total_amount_response + "";
  }

  if (activeZeroIncidentDays == 1 && resfungetTotalAmount != null) {
    let totalReceived = document.getElementById("totalReceived");
    totalReceived.innerHTML = resfungetTotalAmount.received_amount_response + "";
  }

  if (activeIncidentPerSqFt == 1 && resfungetTotalAmount != null) {
    let totalOutstanding = document.getElementById("totalOutstanding");
    totalOutstanding.innerHTML = resfungetTotalAmount.total_outstanding + "";
  }

  if (activeInventory == 1) {
    let titleInventory = document.getElementById("titleInventory");
    let overStock = document.getElementById("overStock");
    let underStock = document.getElementById("underStock");
    let totalInventory = document.getElementById("totalInventory");
    let capitalBlock = document.getElementById("capitalBlock");
    let purchaseOrder = document.getElementById("purchaseOrder");
    let workOrder = document.getElementById("workOrder");
    let valueConsumable = document.getElementById("valueConsumable");
    let valueSpares = document.getElementById("valueSpares");

    if (resfuntotalInventory != null) {
      totalInventory.innerHTML =
        resfuntotalInventory.total_inventory_response;

      capitalBlock.innerHTML =
        resfuntotalInventory.capital_block;

    }

    if (resfunOverUnderStock != null) {
      overStock.innerHTML =
        resfunOverUnderStock.over_stock_response;

      underStock.innerHTML =
        resfunOverUnderStock.under_stock_response;
    }

    if (resfunpurchaseOrder != null) {
      purchaseOrder.innerHTML = resfunpurchaseOrder.puchase_order_response;

      workOrder.innerHTML = resfunpurchaseOrder.work_order_response;

    }
    if (resfuntotalValue != null) {
      valueConsumable.innerHTML = resfuntotalValue.consumable_response;

      valueSpares.innerHTML = resfuntotalValue.spare_response;
    }
  }
  // -----------
  // activeDailyStepStats = 1,

  // -----------
  // if (activeDailyStepCount == 1 && resfunDailyStepCount != null) {
  //   let cardDailyStep = document.getElementById("cardDailyStep");
  //   cardDailyStep.innerHTML = resfunDailyStepCount.daily_step_count + " ";
  // }

  if (activeEmpParticipationStats == 1 && resfunEmpParticipationStats != null) {
    let loaderEmployeeParticipationStats = document.getElementById(
      "loaderEmployeeParticipationStats"
    );
    let barChartEmployeeStats = document.getElementById("employee-stats");
    let employeeNoData = document.getElementById("employeeNoData");

    barChartEmployeeStats.style.display = "none";
    loaderEmployeeParticipationStats.style.display = "block";
    employeeNoData.style.display = "none";

    let xLabelsArray = resfunEmpParticipationStats.leaderboard;

    let xLabelsArrayDate = [],
      xLabelsArrayCount = [];

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      console.log(xLabelsArray[i].date);
      console.log(xLabelsArray[i].count);
      xLabelsArrayDate[i] = xLabelsArray[i].date;
      xLabelsArrayCount[i] = xLabelsArray[i].count;
    }

    new Chart(barChartEmployeeStats, {
      type: "bar",
      data: {
        labels: xLabelsArrayDate,
        datasets: [
          {
            label: "Days",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: xLabelsArrayCount,

            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: "Days",
            },
          },
          y: {
            title: {
              display: true,
              text: "No. of steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderEmployeeParticipationStats.style.display = "none";
    if (xLabelsArray.length == 0) {
      employeeNoData.style.display = "block";
      barChartEmployeeStats.style.display = "none";
    } else {
      employeeNoData.style.display = "none";
      barChartEmployeeStats.style.display = "block";
    }
  }

  if (activeDeliveryVisitors == 1 && resfunDeliveryVisitor != null) {
    let DeliveryNoData = document.getElementById("DeliveryNoData");
    let deliveryVisitor = document.getElementById("deliveryVisitor");
    let loaderDelivery = document.getElementById("loaderDelivery");
    loaderDelivery.style.display = "block";
    DeliveryNoData.style.display = "none";

    originalChartConfigVisitors = {
      type: "bar",
      data: {
        labels: Object.keys(resfunDeliveryVisitor.response),
        datasets: [
          {
            // label: Object.keys(resfunDeliveryVisitor.response),
            backgroundColor: ["#01c875"],
            data: Object.values(resfunDeliveryVisitor.response),
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        interaction: {
          intersect: false,
        },
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
          },
        },
        maintainAspectRatio: false,
        scales: {
          x: {
            ticks: {
              callback: function (value) {
                return this.getLabelForValue(value).substr(0, 15);
              },
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
            formatter: function (value, context) {
              // Hide label if value is zero
              return value === 0 ? '' : value;
            }
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    }

    let myChart = new Chart(deliveryVisitor, originalChartConfigVisitors)


    loaderDelivery.style.display = "none";

    if (resfunDeliveryVisitor.response == 0) {
      DeliveryNoData.style.display = "block";
      deliveryVisitor.style.display = "none";
    } else {
      DeliveryNoData.style.display = "none";
      deliveryVisitor.style.display = "block";
    }

  }

  if (activeCheckList == 1 && resfunChecklist != null) {
    let ChecklistNoData = document.getElementById("ChecklistNoData");
    let Checklist = document.getElementById("Checklist");
    let loaderChecklist = document.getElementById("loaderChecklist");
    let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

    let valuesResponses = Object.values(resfunChecklist.response);

    for (let i = 0; i < valuesResponses.length; i += 1) {
      responseCLosed[i] = valuesResponses[i].closed;
      responseOpen[i] = valuesResponses[i].open;
      responseWIP[i] = valuesResponses[i].work_in_progress;
      responseOverdue[i] = valuesResponses[i].overdue;
    }

    let xLabelsArray = Object.keys(resfunChecklist.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }

    new Chart(Checklist, {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Closed",
            backgroundColor: "#67c801",
            data: responseCLosed,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Open",
            backgroundColor: "#FDAB3D",
            data: responseOpen,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Work In Progress",
            backgroundColor: "#01C875",
            data: responseWIP,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Overdue",
            backgroundColor: "#FF5F1F",
            data: responseOverdue,
            barThickness: 70,
            borderWidth: 1,
          },
        ],
      },
      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: {
            stacked: true,
            gridLines: {
              display: false,
            }
          },
          yAxes: {
            stacked: true,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderChecklist.style.display = "none";

    // if (resfunChartTicket.response == 0) {
    //   ChecklistNoData.style.display = "block";
    //   Checklist.style.display = "none";
    // } else {
    // ChecklistNoData.style.display = "none";
    Checklist.style.display = "block";
    // }
  }

  if (activeFacilityInfo == 1 && resfunFacilityInfo != null) {
    let facilityinfoNoData = document.getElementById("facilityinfoNoData");
    let tblfacilityinfo = document.getElementById("tblfacilityinfo");
    let tablebodyfacilityinfo = document.getElementById("tablebodyfacilityinfo");
    let loaderfacilityinfo = document.getElementById("loaderfacilityinfo");

    tblfacilityinfo.style.display = "none";
    loaderfacilityinfo.style.display = "block";
    facilityinfoNoData.style.display = "none";

    let resfunFacilityInfoArray = resfunFacilityInfo.facilities_info;
    let allDetails = '';

    for (let index = 0; index < resfunFacilityInfoArray.length; index++) {
      let facilityName = resfunFacilityInfoArray[index].facility_name;
      let bookingCount = resfunFacilityInfoArray[index].booking_count;
      let bookingBy = resfunFacilityInfoArray[index].booked_by;
      let bookingStatus = resfunFacilityInfoArray[index].booking_status;
      let tower = resfunFacilityInfoArray[index].tower;
      // let flat = resfunFacilityInfoArray[index].flat;
      let scheduleDate = resfunFacilityInfoArray[index].schedule_date;
      let scheduleslot = resfunFacilityInfoArray[index].schedule_slot;

      allDetails +=
        `<tr>` +
        `<td>` + (index + 1) + `</td>` +
        `<td>` + facilityName + `</td>` +
        `<td>` + bookingCount + `</td>` +
        `<td>` + bookingBy + `</td>` +
        `<td>` + bookingStatus + `</td>` +
        `<td>` + tower + `</td>` +
        // `<td>` + flat + `</td>` +
        `<td>` + scheduleDate + `</td>` +
        `<td>` + scheduleslot + `</td>` +
        `</tr>`;
    }
    tablebodyfacilityinfo.innerHTML = allDetails;

    loaderfacilityinfo.style.display = "none";
    if (resfunFacilityInfoArray.length == 0) {
      facilityinfoNoData.style.display = "block";
      tblfacilityinfo.style.display = "none";
    } else {
      facilityinfoNoData.style.display = "none";
      tblfacilityinfo.style.display = "table"; // Use "table" instead of "inline-table"
    }
  }




  if (activeCommLeaderboard == 1 && resfunCommLeaderboard != null) {
    let commulativeLeaderboardNoData = document.getElementById(
      "commulativeLeaderboardNoData"
    );
    let tablebodyCommulativeLeaderboard = document.getElementById(
      "tablebodyCommulativeLeaderboard"
    );
    let tblCommulativeLeaderboardinfo = document.getElementById(
      "tblCommulativeLeaderboardinfo"
    );
    let loaderCommulativeLeaderboard = document.getElementById(
      "loaderCommulativeLeaderboard"
    );

    tblCommulativeLeaderboardinfo.style.display = "none";
    loaderCommulativeLeaderboard.style.display = "block";
    commulativeLeaderboardNoData.style.display = "none";

    let resfunCommLeaderboardArray = resfunCommLeaderboard.leaderboard;
    allDetails = ``;
    var index = 0;

    for (let x in resfunCommLeaderboardArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        resfunCommLeaderboardArray[x].rank +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardArray[x].firstname +
        " " +
        resfunCommLeaderboardArray[x].lastname +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardArray[x].department_name +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardArray[x].highScore +
        `</td>` +
        `</tr>`;
    }
    tablebodyCommulativeLeaderboard.innerHTML = allDetails;

    loaderCommulativeLeaderboard.style.display = "none";
    if (resfunCommLeaderboardArray.length == 0) {
      commulativeLeaderboardNoData.style.display = "block";
      tblCommulativeLeaderboardinfo.style.display = "none";
    } else {
      commulativeLeaderboardNoData.style.display = "none";
      tblCommulativeLeaderboardinfo.style.display = "block";
    }
  }


  if (activeInventoryConsumption == 1 && resfunInventoryConsumption != null) {
    let inventoryConsumptionNoData = document.getElementById(
      "inventoryConsumptionNoData"
    );
    let tablebodyInventoryConsumption = document.getElementById(
      "tablebodyInventoryConsumption"
    );
    let tblInventoryConsumptioninfo = document.getElementById(
      "tblInventoryConsumptioninfo"
    );
    let loaderInventoryConsumption = document.getElementById(
      "loaderInventoryConsumption"
    );

    tblInventoryConsumptioninfo.style.display = "none";
    loaderInventoryConsumption.style.display = "block";
    inventoryConsumptionNoData.style.display = "none";

    // resfunInventoryConsumption = JSON.parse(this.responseText);
    console.log("Leaderboard - ");
    console.log(resfunInventoryConsumption);

    let resfunInventoryConsumptionArray = resfunInventoryConsumption.response;
    allDetails = ``;
    var index = 0;

    for (let x in resfunInventoryConsumptionArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][0] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][1] +
        `<td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][2] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][3] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][4] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][5] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][6] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][7] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][8] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionArray[x][9] +
        `</td>` +
        `</tr>`;
    }
    tablebodyInventoryConsumption.innerHTML = allDetails;

    loaderInventoryConsumption.style.display = "none";
    if (resfunCommLeaderboardArray.length == 0) {
      inventoryConsumptionNoData.style.display = "block";
      tblInventoryConsumptioninfo.style.display = "none";
    } else {
      inventoryConsumptionNoData.style.display = "none";
      tblInventoryConsumptioninfo.style.display = "block";
    }
  }

  if (activeInventoryReport == 1 && resfunInventoryReport != null) {
    let loaderInventoryReport = document.getElementById(
      "loaderInventoryReport"
    );
    let inventoryReportNoData = document.getElementById(
      "inventoryReportNoData"
    );
    let inventory_report = document.getElementById("inventory-report");

    loaderInventoryReport.style.display = "block";
    inventoryReportNoData.style.display = "none";

    console.log("Inventory Report - ");
    console.log(resfunInventoryReport);

    new Chart(inventory - report, {
      type: "pie",
      data: {
        labels: ["abc", "abcd",],
        datasets: [
          {
            label: "Share",
            data: [
              resfunInventoryReport.response,
              // resfunInventoryReport.response["Engineering"],
              ,
            ],
            backgroundColor: ["#f8ea94", "#a1cd7a", "#e2445b", "#f2c06c"],
            borderWidth: 1,
            radius: "80%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderInventoryReport.style.display = "none";
    if (resfunInventoryReport.response == 0) {
      inventoryReportNoData.style.display = "block";
      inventory_report.style.display = "none";
    } else {
      inventoryReportNoData.style.display = "none";
      inventory_report.style.display = "block";
    }

  }

  if (activeCurrentStock == 1 && resfunCurrentStock != null) {
    let loaderCurrentStock = document.getElementById("loaderCurrentStock");
    let barChartCurrentStock = document.getElementById("current-Stock");
    let CurrentStockNoData = document.getElementById("clusterStatsNoData");

    barChartCurrentStock.style.display = "none";
    loaderCurrentStock.style.display = "block";
    CurrentStockNoData.style.display = "none";

    resfunCurrentStock = JSON.parse(this.responseText);
    console.log("Current Stock - ");
    console.log(resfunCurrentStock);

    let xLabelsArray = resfunCurrentStock.leaderboard;

    let xLabelsArrayDate = [],
      xLabelsArrayCount = [];

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      console.log(xLabelsArray[i].date);
      console.log(xLabelsArray[i].count);
      xLabelsArrayDate[i] = xLabelsArray[i].site_name;
      xLabelsArrayCount[i] = xLabelsArray[i].count;
    }

    new Chart(barChartCurrentStock, {
      type: "bar",
      data: {
        labels: xLabelsArrayDate,
        datasets: [
          {
            label: "Days",
            backgroundColor: [
              "#77216F",
              "#01C875",
              "#E2445B",
              "#E95420",
              "#A1CD7A",
            ],
            data: xLabelsArrayCount,
            borderRadius: 15,
            borderWidth: 1,
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            title: {
              display: true,
              text: "Total steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "no",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCurrentStock.style.display = "none";
    if (xLabelsArray.length == 0) {
      CurrentStockNoData.style.display = "block";
      barChartCurrentStock.style.display = "none";
    } else {
      CurrentStockNoData.style.display = "none";
      barChartCurrentStock.style.display = "block";
    }

  }

  if (activeInventoryConsumptionGreen == 1 && resfunInventoryConsumptionGreen != null) {
    let inventoryConsumptionGreenNoData = document.getElementById(
      "inventoryConsumptionGreenNoData"
    );
    let tablebodyInventoryConsumptionGreen = document.getElementById(
      "tablebodyInventoryConsumptionGreen"
    );
    let tblInventoryConsumptionGreeninfo = document.getElementById(
      "tblInventoryConsumptionGreeninfo"
    );
    let loaderInventoryConsumptionGreen = document.getElementById(
      "loaderInventoryConsumptionGreen"
    );

    tblInventoryConsumptionGreeninfo.style.display = "none";
    loaderInventoryConsumptionGreen.style.display = "block";
    inventoryConsumptionGreenNoData.style.display = "none";

    let resfunInventoryConsumptionGreenArray =
      resfunInventoryConsumptionGreen.response;
    allDetails = ``;
    // var index = 0;

    for (let x in resfunInventoryConsumptionGreenArray) {
      // index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][0] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][1] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][2] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][3] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][4] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][5] +
        `</td>` +
        `<td>` +
        resfunInventoryConsumptionGreenArray[x][6] +
        `</td>`;
      // `<td>` +
      // resfunInventoryConsumptionGreenArray[x][7] +
      // `</td>` +
      // `<td>` +
      // resfunInventoryConsumptionGreenArray[x][8] +
      // `</td>` +
      if (
        resfunInventoryConsumptionGreenArray[x][7] < 0 ||
        resfunInventoryConsumptionGreenArray[x][7] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails +
          `<td>` +
          resfunInventoryConsumptionGreenArray[x][7] +
          `</td>`;
      }
      if (
        resfunInventoryConsumptionGreenArray[x][8] < 0 ||
        resfunInventoryConsumptionGreenArray[x][8] == null
      ) {
        allDetails = allDetails + `<td></td>`;
      } else {
        allDetails =
          allDetails +
          `<td>` +
          resfunInventoryConsumptionGreenArray[x][8] +
          `</td>`;
      }
      +`</tr>`;
    }
    tablebodyInventoryConsumptionGreen.innerHTML = allDetails;

    loaderInventoryConsumptionGreen.style.display = "none";
    if (resfunInventoryConsumptionGreenArray.length == 0) {
      inventoryConsumptionGreenNoData.style.display = "block";
      tblInventoryConsumptionGreeninfo.style.display = "none";
    } else {
      inventoryConsumptionGreenNoData.style.display = "none";
      tblInventoryConsumptionGreeninfo.style.display = "block";
    }
  }

  if (activeInventoryConsumptionReportGreen == 1 && resfunInventoryReportGreen != null) {
    let loaderInventoryReportGreen = document.getElementById(
      "loaderInventoryReportGreen"
    );
    let inventoryReportGreenNoData = document.getElementById(
      "inventoryReportGreenNoData"
    );
    let inventory_report_green = document.getElementById(
      "inventory_report_green"
    );
    let inventoryReportGreen = document.getElementById("inventoryReportGreen");

    // inventory_report.style.display = "none";
    loaderInventoryReportGreen.style.display = "block";
    inventoryReportGreenNoData.style.display = "none";


    let sum = 0;

    let valueName = [];
    let valueY = [];


    valueName = Object.keys(resfunInventoryReportGreen.response);
    valueY = Object.values(resfunInventoryReportGreen.response);
    console.log(valueName);
    console.log(valueY);

    let inventoryReportColor = [
      "#F8EA94",
      "#A1CD7A",
      "#F2C06C",
      "#D44B52",
      "#F69380",
      "#FF933C",
      "#FFBD3C",
      "#B4FF3C",
      "#4BFF3C",
      "#F69380",
      "#3CFF93",
      "#3CDEFF",
      "#3C4BFF",
      "#BD3CFF",
      "#FF3CFC",
      "#5F8900",
      "#008913",
      "#007C89",
      "#280089",
      "#890069",
    ];



    new Chart(inventory_report_green, {
      type: "pie",
      data: {
        labels: valueName,
        datasets: [
          {
            label: "Inventory Report Green",
            data: valueY,
            backgroundColor: inventoryReportColor,
            borderWidth: 1,
            radius: "100%",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#ffffff",
            font: {
              size: "14",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    for (let i = 0; i < valueY.length; i += 1) {
      if (valueY[i] == null) {
        let a = 0;
        sum += a;
      } else {
        sum += valueY[i];
      }
    }

    loaderInventoryReportGreen.style.display = "none";
    if (sum == 0) {
      inventoryReportGreenNoData.style.display = "block";
      inventory_report_green.style.display = "none";
    } else {
      inventoryReportGreenNoData.style.display = "none";
      inventory_report_green.style.display = "block";
    }
  }

  if (activeCurrentStockGreen == 1 && resfunCurrentStockGreen != null) {
    let loaderCurrentStockGreen = document.getElementById("loaderCurrentStock");
    let barChartCurrentStockGreen = document.getElementById(
      "current-Stock-Green"
    );
    let CurrentStockGreenNoData = document.getElementById(
      "clusterStatsGreenNoData"
    );

    barChartCurrentStockGreen.style.display = "none";
    loaderCurrentStockGreen.style.display = "block";

    let xLabelsArrays = [];
    xLabelsArrays = Object.keys(resfunCurrentStockGreen.response);
    // let xLabelsArray = resfunCurrentStock.leaderboard;

    let xLabelsArrayCs = [];
    let xLabelsArrayMs = [];
    // object.value
    let xLabelArrayV = [];
    xLabelArrayV = Object.values(resfunCurrentStockGreen.response);

    for (let i = 0; i < xLabelArrayV.length; i += 1) {
      console.log(xLabelsArrays[i].Current_Stock);
      console.log(xLabelsArrays[i].Minimum_Stock);
      xLabelsArrayCs[i] = xLabelArrayV[i].Current_Stock;
      xLabelsArrayMs[i] = xLabelArrayV[i].Minimum_Stock;
    }

    new Chart(barChartCurrentStockGreen, {
      type: "line",
      data: {
        labels: xLabelsArrays,
        // labels: ["", "", ""],
        datasets: [
          {
            label: "Minimum Stock",
            backgroundColor: ["#e2445b"],
            data: xLabelsArrayMs,
            tension: 0.4,
            borderColor: ["#e2445b"],
            borderWidth: 1,
            stack: "Stack 0",
          },
          {
            label: "Current Stock",
            backgroundColor: ["#01c875"],
            data: xLabelsArrayCs,
            tension: 0.4,
            borderColor: ["#01c875"],
            borderWidth: 1,
            stack: "Stack 0",
          },
        ],
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            stacked: true,
          },
          y: {
            stacked: true,
            title: {
              display: true,
              text: "Total steps taken",
            },
          },
        },
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: "bold",
            },
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderCurrentStockGreen.style.display = "none";
    if (xLabelsArrays.length == 0) {
      // CurrentStockGreenNoData.style.display = "block";
      barChartCurrentStockGreen.style.display = "none";
    } else {
      // CurrentStockGreenNoData.style.display = "none";
      barChartCurrentStockGreen.style.display = "block";
    }
  }

  // checkDailyStepStats c17
  // if (activeDailyStepStats == 1 && ){

  // }

  // resfunClusterEmployeeParticiption

  if (activeCommLeaderboardFemale == 1 && resfunCommLeaderboardFemale != null) {
    let commulativeLeaderboardNoDataFemale = document.getElementById(
      "commulativeLeaderboardNoDataFemale"
    );
    let tablebodyCommulativeLeaderboardFemale = document.getElementById(
      "tablebodyCommulativeLeaderboardFemale"
    );
    let tblCommulativeLeaderboardinfoFemale = document.getElementById(
      "tblCommulativeLeaderboardinfoFemale"
    );
    let loaderCommulativeLeaderboardFemale = document.getElementById(
      "loaderCommulativeLeaderboardFemale"
    );

    tblCommulativeLeaderboardinfoFemale.style.display = "none";
    loaderCommulativeLeaderboardFemale.style.display = "block";
    commulativeLeaderboardNoDataFemale.style.display = "none";

    let resfunCommLeaderboardFemaleArray = resfunCommLeaderboardFemale.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunCommLeaderboardFemaleArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][0] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][1] +
        `</td>` +
        `<td>` +
        resfunCommLeaderboardFemaleArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyCommulativeLeaderboardFemale.innerHTML = allDetails;

    loaderCommulativeLeaderboardFemale.style.display = "none";
    if (resfunCommLeaderboardFemaleArray.length == 0) {
      commulativeLeaderboardNoDataFemale.style.display = "block";
      tblCommulativeLeaderboardinfoFemale.style.display = "none";
    } else {
      commulativeLeaderboardNoDataFemale.style.display = "none";
      tblCommulativeLeaderboardinfoFemale.style.display = "inline-table";
    }
  }

  if (activeTechnicalChecklist == 1 && resfunTechnicalChecklist != null) {
    let TechnicalChecklistNoData = document.getElementById("TechnicalChecklistNoData");
    let TechnicalChecklist = document.getElementById("TechnicalChecklist");
    let loaderTechnicalChecklist = document.getElementById("loaderTechnicalChecklist");

    let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

    let valuesResponses = Object.values(resfunTechnicalChecklist.response);

    for (let i = 0; i < valuesResponses.length; i += 1) {
      responseCLosed[i] = valuesResponses[i].closed;
      responseOpen[i] = valuesResponses[i].open;
      responseWIP[i] = valuesResponses[i].work_in_progress;
      responseOverdue[i] = valuesResponses[i].overdue;
    }

    let xLabelsArray = Object.keys(resfunTechnicalChecklist.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }
    // Added now
    new Chart(TechnicalChecklist, {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Closed",
            backgroundColor: "#67c801",
            data: responseCLosed,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Open",
            backgroundColor: "#FDAB3D",
            data: responseOpen,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Work In Progress",
            backgroundColor: "#01C875",
            data: responseWIP,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Overdue",
            backgroundColor: "#FF5F1F",
            data: responseOverdue,
            barThickness: 70,
            borderWidth: 1,
          },
        ],
      },
      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: {
            stacked: true,
            gridLines: {
              display: false,
            }
          },
          yAxes: {
            stacked: true,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderTechnicalChecklist.style.display = "none";

    if (resfunTechnicalChecklist.response.total == 0) {
      TechnicalChecklistNoData.style.display = "block";
      TechnicalChecklist.style.display = "none";
    } else {
      TechnicalChecklistNoData.style.display = "none";
      TechnicalChecklist.style.display = "block";
    }
  }

  if (activeNonTechnicalChecklist == 1 && resfunNonTechnicalChecklist != null) {
    let NonTechnicalChecklistNoData = document.getElementById("NonTechnicalChecklistNoData");
    let NonTechnicalChecklist = document.getElementById("NonTechnicalChecklist");
    let loaderNonTechnicalChecklist = document.getElementById("loaderNonTechnicalChecklist");

    let responseCLosed = [], responseOpen = [], responseWIP = []; responseOverdue = [];

    let valuesResponses = Object.values(resfunNonTechnicalChecklist.response);

    for (let i = 0; i < valuesResponses.length; i += 1) {
      responseCLosed[i] = valuesResponses[i].closed;
      responseOpen[i] = valuesResponses[i].open;
      responseWIP[i] = valuesResponses[i].work_in_progress;
      responseOverdue[i] = valuesResponses[i].overdue;
    }

    let xLabelsArray = Object.keys(resfunNonTechnicalChecklist.response);

    for (let i = 0; i < xLabelsArray.length; i += 1) {
      xLabelsArray[i] = xLabelsArray[i].split(" ");
    }

    // Added now
    new Chart(NonTechnicalChecklist, {
      type: "bar",
      data: {
        labels: xLabelsArray,
        datasets: [
          {
            label: "Closed",
            backgroundColor: "#67c801",
            data: responseCLosed,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Open",
            backgroundColor: "#FDAB3D",
            data: responseOpen,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Work In Progress",
            backgroundColor: "#01C875",
            data: responseWIP,
            barThickness: 70,
            borderWidth: 1,
          },
          {
            label: "Overdue",
            backgroundColor: "#FF5F1F",
            data: responseOverdue,
            barThickness: 70,
            borderWidth: 1,
          },
        ],
      },
      options: {
        tooltips: {
          displayColors: true,
          callbacks: {
            mode: 'x',
          },
        },
        scales: {
          xAxes: {
            stacked: true,
            gridLines: {
              display: false,
            }
          },
          yAxes: {
            stacked: true,
            ticks: {
              beginAtZero: true,
            },
            type: 'linear',
          }
        },
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          datalabels: {
            color: "#000000",
            anchor: "end",
            align: "end",
            offset: -6,
            font: {
              size: "10",
              weight: 'bold'
            }
          },
          legend: {
            display: true,
            position: "bottom",
          },
        },
      },
      plugins: [ChartDataLabels],
    });

    loaderNonTechnicalChecklist.style.display = "none";

    if (resfunNonTechnicalChecklist.response.total == 0) {
      NonTechnicalChecklistNoData.style.display = "block";
      NonTechnicalChecklist.style.display = "none";
    } else {
      NonTechnicalChecklistNoData.style.display = "none";
      NonTechnicalChecklist.style.display = "block";
    }
  }

  // checkDepartmentStats
  if (activeDepartmentStats == 1 && resfunFunctionEmployeeParticiption != null) {

    let DepartmentStatsNoData = document.getElementById(
      "DepartmentStatsNoData"
    );
    let tablebodyFunctionEmployeeParticiption = document.getElementById(
      "tablebodyFunctionEmployeeParticiption"
    );
    let tblFunctionEmployeeParticiptioninfo = document.getElementById(
      "tblFunctionEmployeeParticiptioninfo"
    );
    let loaderDepartmentStats = document.getElementById(
      "loaderDepartmentStats"
    );

    tblFunctionEmployeeParticiptioninfo.style.display = "none";
    loaderDepartmentStats.style.display = "block";
    DepartmentStatsNoData.style.display = "none";

    let resfunFunctionEmployeeParticiptionArray = resfunFunctionEmployeeParticiption.response1;
    allDetails = ``;
    var index = 0;

    for (let x in resfunFunctionEmployeeParticiptionArray) {
      index += 1;
      allDetails +=
        `<tr>` +
        `<td>` +
        index +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][0] +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][1] +
        `</td>` +
        `<td>` +
        resfunFunctionEmployeeParticiptionArray[x][2] +
        `</td>` +
        `</tr>`;
    }
    tablebodyFunctionEmployeeParticiption.innerHTML = allDetails;

    loaderDepartmentStats.style.display = "none";
    if (resfunFunctionEmployeeParticiptionArray.length == 0) {
      DepartmentStatsNoData.style.display = "block";
      tblFunctionEmployeeParticiptioninfo.style.display = "none";
    } else {
      DepartmentStatsNoData.style.display = "none";
      tblFunctionEmployeeParticiptioninfo.style.display = "inline-table";
    }
  }

}



// -------------------------------------------------------------------------------------------------------------------------------
// Show & Hide Widgets
// -------------------------------------------------------------------------------------------------------------------------------

console.log(activeTotalAssetsAvailable);
// select all changes
// function toggleAllParking() {
//   const checkboxes = document.querySelectorAll('#Parking-nav input[type="checkbox"]');
//   const selectAllCheckbox = document.getElementById('selectAllParking');
//   checkboxes.forEach(checkbox => {
//     checkbox.checked = selectAllCheckbox.checked;
//   });
// }


// // changes
// function toggleAllAssets() {
//   var checkboxes = document.querySelectorAll('#Assets-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllAssets');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// // changes
// function toggleAllPermit() {
//   var checkboxes = document.querySelectorAll('#Permit-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllPermit');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllAmount() {
//   var checkboxes = document.querySelectorAll('#Amount-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllAmount');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllUtilityConsumption() {
//   var checkboxes = document.querySelectorAll('#UtilityConsumption-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllUtilityConsumption');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllQUICKGATE() {
//   var checkboxes = document.querySelectorAll('#QUICKGATE-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllQUICKGATE');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllEscalation() {
//   var checkboxes = document.querySelectorAll('#Escalation-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllEscalation');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllStepathon() {
//   var checkboxes = document.querySelectorAll('#Stepathon-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllStepathon');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllIncidents() {
//   var checkboxes = document.querySelectorAll('#Incidents-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllIncidents');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// // function toggleAllChecklist() {
// //   var checkboxes = document.querySelectorAll('#Checklist-nav input[type="checkbox"]');
// //   var selectAllCheckbox = document.getElementById('selectAllChecklist');
// //   checkboxes.forEach(function(checkbox) {  
// //       checkbox.checked = selectAllCheckbox.checked;
// //   });
// // }

// function toggleAllChecklist() {
//   var checkboxes = document.querySelectorAll('#Checklist-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllChecklist');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllOccupancySummary() {
//   var checkboxes = document.querySelectorAll('#OccupancySummary-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllOccupancySummary');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

// function toggleAllTickets() {
//   var checkboxes = document.querySelectorAll('#Tickets-nav input[type="checkbox"]');
//   var selectAllCheckbox = document.getElementById('selectAllTickets');
//   checkboxes.forEach(function(checkbox) {
//       checkbox.checked = selectAllCheckbox.checked;
//   });
// }

function showTotalAssetsAvailable() {
  if (checkTotalAssetsAvailable.checked) {
    activeTotalAssetsAvailable = 1;

    // checkTotalAssetsAvailable.style.color = "blue";

    items.push(a11);
    showRefreshWidgets();
  } else {
    activeTotalAssetsAvailable = 0;

    // checkTotalAssetsAvailable.style.color = "black";

    const index = items.indexOf(a11);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }

}

function showAssetsInUse() {
  if (checkAssetsInUse.checked) {
    activeAssetsInUse = 1;
    // checkAssetsInUse.style.color = "blue";

    items.push(a12);
    showRefreshWidgets();
  } else {
    activeAssetsInUse = 0;
    // checkAssetsInUse.style.color = "black";

    const index = items.indexOf(a12);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showAssetInBreakdown() {
  if (checkAssetInBreakdown.checked) {
    activeAssetInBreakdown = 1;
    // checkAssetInBreakdown.style.color = "blue";

    items.push(a13);
    showRefreshWidgets();
  } else {
    activeAssetInBreakdown = 0;
    // checkAssetInBreakdown.style.color = "black";

    const index = items.indexOf(a13);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showLTIR() {

  if (checkLTIR.checked) {
    activeLTIR = 1;
    // checkLTIR.style.color = "blue";

    items.push(a34);
    showRefreshWidgets();
  } else {
    activeLTIR = 0;
    // checkLTIR.style.color = "black";

    const index = items.indexOf(a34);
    if (index > -1) {
      items.splice(index, 1);
    }
    console.log(index);
    showRefreshWidgets();
  }
}

function showZeroIncidentDays() {
  if (checkZeroIncidentDays.checked) {
    activeZeroIncidentDays = 1;
    // checkZeroIncidentDays.style.color = "blue";

    items.push(a35);
    showRefreshWidgets();
  } else {
    activeZeroIncidentDays = 0;
    // checkZeroIncidentDays.style.color = "black";

    const index = items.indexOf(a35);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showZeroIncidentDaysTop() {
  if (checkZeroIncidentDaysTop.checked) {
    activeZeroIncidentDaysTop = 1;
    // checkZeroIncidentDaysTop.style.color = "blue";

    items.push(a122);
    showRefreshWidgets();
  } else {
    activeZeroIncidentDaysTop = 0;
    // checkZeroIncidentDaysTop.style.color = "black";

    const index = items.indexOf(a122);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showFitout() {
  if (checkFitout.checked) {
    activeFitout = 1;
    // checkFitout.style.color = "blue";

    items.push(a61);
    showRefreshWidgets();
  } else {
    activeFitout = 0;
    // checkFitout.style.color = "black";

    const index = items.indexOf(a61);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showIncidentPerSqFt() {
  if (checkIncidentPerSqFt.checked) {
    activeIncidentPerSqFt = 1;
    // checkIncidentPerSqFt.style.color = "blue";

    items.push(a36);
    showRefreshWidgets();
  } else {
    activeIncidentPerSqFt = 0;
    // checkIncidentPerSqFt.style.color = "black";

    const index = items.indexOf(a36);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showIncidentPerSqFtTop() {
  if (checkIncidentPerSqFtTop.checked) {
    activeIncidentPerSqFtTop = 1;
    // checkIncidentPerSqFtTop.style.color = "blue";

    items.push(a123);
    showRefreshWidgets();
  } else {
    activeIncidentPerSqFtTop = 0;
    // checkIncidentPerSqFtTop.style.color = "black";

    const index = items.indexOf(a123);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showIncidentNearMissGoodCatch() {
  if (checkIncidentNearMissGoodCatch.checked) {
    activeIncidentNearMissGoodCatch = 1;
    // checkIncidentNearMissGoodCatch.style.color = "blue";

    items.push(a37);
    showRefreshWidgets();
  } else {
    activeIncidentNearMissGoodCatch = 0;
    // checkIncidentNearMissGoodCatch.style.color = "black";

    const index = items.indexOf(a37);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showIncidentNearMissGoodCatchTop() {
  if (checkIncidentNearMissGoodCatchTop.checked) {
    activeIncidentNearMissGoodCatchTop = 1;
    // checkIncidentNearMissGoodCatchTop.style.color = "blue";

    items.push(a124);
    showRefreshWidgets();
  } else {
    activeIncidentNearMissGoodCatchTop = 0;
    // checkIncidentNearMissGoodCatchTop.style.color = "black";

    const index = items.indexOf(a124);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCriticalAssetsInBreakdown() {
  if (checkCriticalAssetsInBreakdown.checked) {
    activeCriticalAssetsInBreakdown = 1;
    // checkCriticalAssetsInBreakdown.style.color = "blue";

    items.push(a14);
    showRefreshWidgets();
  } else {
    activeCriticalAssetsInBreakdown = 0;
    // checkCriticalAssetsInBreakdown.style.color = "black";

    const index = items.indexOf(a14);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showPPMConductedAssets() {
  if (checkPPMConductedAssets.checked) {
    activePPMConductedAssets = 1;
    // checkPPMConductedAssets.style.color = "blue";

    items.push(a15);
    showRefreshWidgets();
  } else {
    activePPMConductedAssets = 0;
    // checkPPMConductedAssets.style.color = "black";

    const index = items.indexOf(a15);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showExecutiveEscalation() {
  if (checkExecutiveEscalation.checked) {
    activeExecutiveEscalation = 1;
    // checkExecutiveEscalation.style.color = "blue";

    items.push(a68);
    showRefreshWidgets();
  } else {
    activeExecutiveEscalation = 0;
    // checkExecutiveEscalation.style.color = "black";

    const index = items.indexOf(a68);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showTickets() {
  if (checkTickets.checked) {
    activeTickets = 1;
    // checkTickets.style.color = "blue";

    items.push(a16);
    showRefreshWidgets();
  } else {
    activeTickets = 0;
    // checkTickets.style.color = "black";

    const index = items.indexOf(a16);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showActivityFeed() {
  if (activeActivityFeed == 0) {
    activeActivityFeed = 1;
    checkActivityFeed.style.color = "blue";

    items.push(a17);
    showRefreshWidgets();
  } else {
    activeActivityFeed = 0;
    checkActivityFeed.style.color = "black";

    const index = items.indexOf(a17);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCategoryWiseTickets() {
  if (checkCategoryWiseTickets.checked) {
    activeCategoryWiseTickets = 1;
    // checkCategoryWiseTickets.style.color = "blue";

    items.push(a18);
    showRefreshWidgets();
  } else {
    activeCategoryWiseTickets = 0;
    // checkCategoryWiseTickets.style.color = "black";

    const index = items.indexOf(a18);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCategoryWiseProactiveTickets() {
  if (checkCategoryWiseProactiveTickets.checked) {
    activeCategoryWiseProactiveTickets = 1;
    // checkCategoryWiseProactiveTickets.style.color = "blue";

    items.push(a19);
    showRefreshWidgets();
  } else {
    activeCategoryWiseProactiveTickets = 0;
    // checkCategoryWiseProactiveTickets.style.color = "black";

    const index = items.indexOf(a19);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showCustomerSentiments() {
  if (checkCustomerSentiments.checked) {
    activeCustomerSentiments = 1;
    // checkCustomerSentiments.style.color = "blue";

    items.push(a69);
    showRefreshWidgets();
  } else {
    activeCustomerSentiments = 0;
    // checkCustomerSentiments.style.color = "black";

    const index = items.indexOf(a69);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCACategoryWiseTickets() {
  if (checkCACategoryWiseTickets.checked) {
    activeCACategoryWiseTickets = 1;
    // checkCACategoryWiseTickets.style.color = "blue";

    items.push(a39);
    showRefreshWidgets();
  } else {
    activeCACategoryWiseTickets = 0;
    // checkCACategoryWiseTickets.style.color = "black";

    const index = items.indexOf(a39);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCACategoryWiseProactiveTickets() {
  if (checkCACategoryWiseProactiveTickets.checked) {
    activeCACategoryWiseProactiveTickets = 1;
    // checkCACategoryWiseProactiveTickets.style.color = "blue";

    items.push(a40);
    showRefreshWidgets();
  } else {
    activeCACategoryWiseProactiveTickets = 0;
    // checkCACategoryWiseProactiveTickets.style.color = "black";

    const index = items.indexOf(a40);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTicketsAgeingMatrix() {
  if (checkTicketsAgeingMatrix.checked) {
    activeTicketsAgeingMatrix = 1;
    // checkTicketsAgeingMatrix.style.color = "blue";

    items.push(a20);
    showRefreshWidgets();
  } else {
    activeTicketsAgeingMatrix = 0;
    // checkTicketsAgeingMatrix.style.color = "black";

    const index = items.indexOf(a20);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showResolutionTAT() {
  if (checkResolutionTAT.checked) {
    activeResolutionTAT = 1;
    // checkResolutionTAT.style.color = "blue";

    items.push(a21);
    showRefreshWidgets();
  } else {
    activeResolutionTAT = 0;
    // checkResolutionTAT.style.color = "black";

    const index = items.indexOf(a21);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showResponseTAT() {
  if (checkResponseTAT.checked) {
    activeResponseTAT = 1;
    // checkResponseTAT.style.color = "blue";

    items.push(a22);
    console.log("Added");
    showRefreshWidgets();
  } else {
    activeResponseTAT = 0;
    // checkResponseTAT.style.color = "black";

    const index = items.indexOf(a22);
    if (index > -1) {
      items.splice(index, 1);
    }
    console.log("Removed");
    showRefreshWidgets();
  }
}

function showVisitors() {
  if (checkVisitors.checked) {
    activeVisitors = 1;
    // checkVisitors.style.color = "blue";

    items.push(a23);
    showRefreshWidgets();
  } else {
    activeVisitors = 0;
    // checkVisitors.style.color = "black";

    const index = items.indexOf(a23);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showPermits() {
  if (checkPermits.checked) {
    activePermits = 1;
    // checkPermits.style.color = "blue";

    items.push(b77);
    showRefreshWidgets();
  } else {
    activePermits = 0;
    // checkPermits.style.color = "black";

    const index = items.indexOf(b77);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showPermitSite() {
  if (checkPermitSite.checked) {
    activePermitSite = 1;
    // checkPermitSite.style.color = "blue";

    items.push(b76);
    showRefreshWidgets();
  } else {
    activePermitSite = 0;
    // checkPermitSite.style.color = "black";

    const index = items.indexOf(b76);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showPowerConsumption() {
  if (checkPowerConsumption.checked) {
    activePowerConsumption = 1;
    // checkPowerConsumption.style.color = "blue";

    items.push(a25);
    showRefreshWidgets();
  } else {
    activePowerConsumption = 0;
    // checkPowerConsumption.style.color = "black";

    const index = items.indexOf(a25);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showPowerConsumptionTop() {
  if (checkPowerConsumptionTop.checked) {
    activePowerConsumptionTop = 1;
    // checkPowerConsumptionTop.style.color = "blue";

    items.push(a118);
    showRefreshWidgets();
  } else {
    activePowerConsumptionTop = 0;
    // checkPowerConsumptionTop.style.color = "black";

    const index = items.indexOf(a118);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showWaterConsumption() {
  if (checkWaterConsumption.checked) {
    activeWaterConsumption = 1;
    // checkWaterConsumption.style.color = "blue";

    items.push(a26);
    showRefreshWidgets();
  } else {
    activeWaterConsumption = 0;
    // checkWaterConsumption.style.color = "black";

    const index = items.indexOf(a26);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showWaterConsumptionTop() {
  if (checkWaterConsumptionTop.checked) {
    activeWaterConsumptionTop = 1;
    // checkWaterConsumptionTop.style.color = "blue";

    items.push(a119);
    showRefreshWidgets();
  } else {
    activeWaterConsumptionTop = 0;
    // checkWaterConsumptionTop.style.color = "black";

    const index = items.indexOf(a119);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTopChecklist() {
  if (checkTopChecklist.checked) {
    activeTopChecklist = 1;
    // checkTopChecklist.style.color = "blue";

    items.push(a120);
    showRefreshWidgets();
  } else {
    activeTopChecklist = 0;
    // checkTopChecklist.style.color = "black";

    const index = items.indexOf(a120);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showLTIRTop() {

  if (activeLTIRTop == 0) {
    activeLTIRTop = 1;
    checkLTIRTop.style.color = "blue";

    items.push(a121);
    showRefreshWidgets();
  } else {
    activeLTIRTop = 0;
    checkLTIRTop.style.color = "black";

    const index = items.indexOf(a121);
    if (index > -1) {
      items.splice(index, 1);
    }
    console.log(index);
    showRefreshWidgets();
  }
}
function showInventoryConsumption() {
  if (checkInventoryConsumption.checked) {
    activeInventoryConsumption = 1;
    // checkInventoryConsumption.style.color = "blue";

    items.push(d11);
    showRefreshWidgets();
  } else {
    activeInventoryConsumption = 0;
    // checkInventoryConsumption.style.color = "black";

    const index = items.indexOf(d11);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showInventoryConsumptionReport() {
  if (checkInventoryReport.checked) {
    activeInventoryReport = 1;
    // checkInventoryReport.style.color = "blue";

    items.push(d12);
    showRefreshWidgets();
  } else {
    activeInventoryReport = 0;
    // checkInventoryReport.style.color = "black";

    const index = items.indexOf(d12);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCurrentStock() {
  if (checkCurrentStock.checked) {
    activeCurrentStock = 1;
    // checkCurrentStock.style.color = "blue";

    items.push(d13);
    showRefreshWidgets();
  } else {
    activeCurrentStock = 0;
    // checkCurrentStock.style.color = "black";

    const index = items.indexOf(d13);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showInventoryConsumptionGreen() {
  if (checkInventoryConsumptionGreen.checked) {
    activeInventoryConsumptionGreen = 1;
    // checkInventoryConsumptionGreen.style.color = "blue";

    items.push(d14);
    showRefreshWidgets();
  } else {
    activeInventoryConsumptionGreen = 0;
    // checkInventoryConsumptionGreen.style.color = "black";

    const index = items.indexOf(d14);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showInventoryConsumptionReportGreen() {
  if (checkInventoryConsumptionReportGreen.checked) {
    activeInventoryConsumptionReportGreen = 1;
    // checkInventoryConsumptionReportGreen.style.color = "blue";

    items.push(d15);
    showRefreshWidgets();
  } else {
    activeInventoryConsumptionReportGreen = 0;
    // checkInventoryConsumptionReportGreen.style.color = "black";

    const index = items.indexOf(d15);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCurrentStockGreen() {
  if (checkCurrentStockGreen.checked) {
    activeCurrentStockGreen = 1;
    // checkCurrentStockGreen.style.color = "blue";

    items.push(d16);
    showRefreshWidgets();
  } else {
    activeCurrentStockGreen = 0;
    // checkCurrentStockGreen.style.color = "black";

    const index = items.indexOf(d16);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCarbonEmission() {
  if (checkCarbonEmission.checked) {
    activeCarbonEmission = 1;
    // checkCarbonEmission.style.color = "blue";

    items.push(a27);
    showRefreshWidgets();
  } else {
    activeCarbonEmission = 0;
    // checkCarbonEmission.style.color = "black";

    const index = items.indexOf(a27);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showEnergyIntensity() {
  if (checkEnergyIntensity.checked) {
    activeEnergyIntensity = 1;
    // checkEnergyIntensity.style.color = "blue";

    items.push(a63);
    showRefreshWidgets();
  } else {
    activeEnergyIntensity = 0;
    // checkEnergyIntensity.style.color = "black";

    const index = items.indexOf(a63);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showFuelConsumption() {
  if (checkFuelConsumption.checked) {
    activeFuelConsumption = 1;
    // checkFuelConsumption.style.color = "blue";

    items.push(a28);
    showRefreshWidgets();
  } else {
    activeFuelConsumption = 0;
    // checkFuelConsumption.style.color = "black";

    const index = items.indexOf(a28);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showFitoutRequest() {
  if (checkFitoutRequest.checked) {
    activeFitoutRequest = 1;
    // checkFitoutRequest.style.color = "blue";

    items.push(a29);
    showRefreshWidgets();
  } else {
    activeFitoutRequest = 0;
    // checkFitoutRequest.style.color = "black";

    const index = items.indexOf(a29);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showFitout() {
  if (checkFitout.checked) {
    activeFitout = 1;
    // checkFitout.style.color = "blue";

    items.push(a61);
    showRefreshWidgets();
  } else {
    activeFitout = 0;
    // checkFitout.style.color = "black";

    const index = items.indexOf(a61);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showIncidents() {
  if (checkIncidents.checked) {
    activeIncidents = 1;
    // checkIncidents.style.color = "blue";

    items.push(a30);
    showRefreshWidgets();
  } else {
    activeIncidents = 0;
    // checkIncidents.style.color = "black";

    const index = items.indexOf(a30);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showIncidentsTop() {
  if (checkIncidentsTop.checked) {
    activeIncidentsTop = 1;
    // checkIncidentsTop.style.color = "blue";

    items.push(a125);
    showRefreshWidgets();
  } else {
    activeIncidentsTop = 0;
    // checkIncidentsTop.style.color = "black";

    const index = items.indexOf(a125);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showOpenEscalation() {
  if (checkOpenEscalation.checked) {
    activeOpenEscalation = 1;
    // checkOpenEscalation.style.color = "blue";

    items.push(a71);
    showRefreshWidgets();
  } else {
    activeOpenEscalation = 0;
    // checkOpenEscalation.style.color = "black";

    const index = items.indexOf(a71);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showCloseEscalation() {
  if (checkCloseEscalation.checked) {
    activeCloseEscalation = 1;
    // checkCloseEscalation.style.color = "blue";

    items.push(a72);
    showRefreshWidgets();
  } else {
    activeCloseEscalation = 0;
    // checkCloseEscalation.style.color = "black";

    const index = items.indexOf(a72);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showAvgEscalation() {
  if (checkAvgEscalation.checked) {
    activeAvgEscalation = 1;
    // checkAvgEscalation.style.color = "blue";

    items.push(a73);
    showRefreshWidgets();
  } else {
    activeAvgEscalation = 0;
    // checkAvgEscalation.style.color = "black";

    const index = items.indexOf(a73);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCategoryWiseIncidents() {
  if (checkCategoryWiseIncidents.checked) {
    activeCategoryWiseIncidents = 1;
    // checkCategoryWiseIncidents.style.color = "blue";

    items.push(a31);
    showRefreshWidgets();
  } else {
    activeCategoryWiseIncidents = 0;
    // checkCategoryWiseIncidents.style.color = "black";

    const index = items.indexOf(a31);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCategoryWiseIncidentsTop() {
  if (checkCategoryWiseIncidentsTop.checked) {
    activeCategoryWiseIncidentsTop = 1;
    // checkCategoryWiseIncidentsTop.style.color = "blue";

    items.push(a128);
    showRefreshWidgets();
  } else {
    activeCategoryWiseIncidentsTop = 0;
    // checkCategoryWiseIncidentsTop.style.color = "black";

    const index = items.indexOf(a128);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showEVConsumption() {
  if (checkEVConsumption.checked) {
    activeEVConsumption = 1;
    // checkPowerConsumption.style.color = "blue";

    items.push(a129);
    showRefreshWidgets();
  } else {
    activeEVConsumption = 0;
    // checkPowerConsumption.style.color = "black";

    const index = items.indexOf(a129);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showManPowerAttendance() {
  if (checkManPowerAttendance.checked) {
    activeManPowerAttendance = 1;
    // checkManPowerAttendance.style.color = "blue";

    items.push(a32);
    showRefreshWidgets();
  } else {
    activeManPowerAttendance = 0;
    // checkManPowerAttendance.style.color = "black";

    const index = items.indexOf(a32);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showEventsFootfallAnalysis() {
  if (checkEventsFootfallAnalysis.checked) {
    activeEventsFootfallAnalysis = 1;
    // checkEventsFootfallAnalysis.style.color = "blue";

    items.push(a33);
    showRefreshWidgets();
  } else {
    activeEventsFootfallAnalysis = 0;
    // checkEventsFootfallAnalysis.style.color = "black";

    const index = items.indexOf(a33);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showRAC() {
  if (activeRAC == 0) {
    activeRAC = 1;
    checkRAC.style.color = "blue";

    items.push(a38);
    showRefreshWidgets();
  } else {
    activeRAC = 0;
    checkRAC.style.color = "black";

    const index = items.indexOf(a38);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showRACTop() {
  if (checkRACTop.checked) {
    activeRACTop = 1;
    // checkRACTop.style.color = "blue";

    items.push(a127);
    showRefreshWidgets();
  } else {
    activeRACTop = 0;
    // checkRACTop.style.color = "black";

    const index = items.indexOf(a127);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showSafeManHours() {
  if (checkSafeManHours.checked) {
    activeSafeManHours = 1;
    // checkSafeManHours.style.color = "blue";

    items.push(a41);
    showRefreshWidgets();
  } else {
    activeSafeManHours = 0;
    // checkSafeManHours.style.color = "black";

    const index = items.indexOf(a41);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showAssetsBreakdown() {
  if (checkAssetsBreakdown.checked) {
    activeAssetsBreakdown = 1;
    // checkAssetsBreakdown.style.color = "blue";

    items.push(a42);
    showRefreshWidgets();
  } else {
    activeAssetsBreakdown = 0;
    // checkAssetsBreakdown.style.color = "black";

    const index = items.indexOf(a42);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showAssetsBreakdownGraph() {
  if (activeAssetsBreakdownGraph == 0) {
    activeAssetsBreakdownGraph = 1;
    checkAssetsBreakdownGraph.style.color = "blue";

    items.push(a116);
    showRefreshWidgets();
  } else {
    activeAssetsBreakdownGraph = 0;
    checkAssetsBreakdownGraph.style.color = "black";

    const index = items.indexOf(a116);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showWaste() {
  if (checkWaste.checked) {
    activeWaste = 1;
    // checkWaste.style.color = "blue";

    items.push(a117);
    showRefreshWidgets();
  } else {
    activeWaste = 0;
    // checkWaste.style.color = "black";

    const index = items.indexOf(a117);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showPyramid() {
  if (checkPyramid.checked) {
    activePyramid = 1;
    // checkPyramid.style.color = "blue";

    items.push(a44);
    showRefreshWidgets();
  } else {
    activePyramid = 0;
    // checkPyramid.style.color = "black";

    const index = items.indexOf(a44);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showPyramidTop() {
  if (checkPyramidTop.checked) {
    activePyramidTop = 1;
    // checkPyramidTop.style.color = "blue";

    items.push(a126);
    showRefreshWidgets();
  } else {
    activePyramidTop = 0;
    // checkPyramidTop.style.color = "black";

    const index = items.indexOf(a126);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showRootCause() {
  if (checkRootCause.checked) {
    activeRootCause = 1;
    // checkRootCause.style.color = "blue";

    items.push(a46);
    showRefreshWidgets();
  } else {
    activeRootCause = 0;
    // checkRootCause.style.color = "black";

    const index = items.indexOf(a46);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showReactiveProactiveTickets() {
  if (checkReactiveProactiveTickets.checked) {
    activeReactiveProactiveTickets = 1;
    // checkReactiveProactiveTickets.style.color = "blue";

    items.push(a79);
    showRefreshWidgets();
  } else {
    activeReactiveProactiveTickets = 0;
    // checkReactiveProactiveTickets.style.color = "black";

    const index = items.indexOf(a79);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showBodyInjuryChart() {
  if (checkBodyInjuryChart.checked) {
    activeBodyInjuryChart = 1;
    // checkBodyInjuryChart.style.color = "blue";

    items.push(a64);
    showRefreshWidgets();
  } else {
    activeBodyInjuryChart = 0;
    // checkBodyInjuryChart.style.color = "black";

    const index = items.indexOf(a64);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showOccupancy() {
  if (checkOccupancy.checked) {
    activeOccupancy = 1;
    // checkOccupancy.style.color = "blue";

    items.push(a67);
    showRefreshWidgets();
  } else {
    activeOccupancy = 0;
    // checkOccupancy.style.color = "black";

    const index = items.indexOf(a67);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalVisitors() {
  if (checkTotalVisitors.checked) {
    activeTotalVisitors = 1;
    // checkTotalVisitors.style.color = "blue";

    items.push(a105);
    showRefreshWidgets();
  } else {
    activeTotalVisitors = 0;
    // checkTotalVisitors.style.color = "black";

    const index = items.indexOf(a105);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalStaff() {
  if (checkTotalStaff.checked) {
    activeTotalStaff = 1;
    // checkTotalStaff.style.color = "blue";

    items.push(a111);
    showRefreshWidgets();
  } else {
    activeTotalStaff = 0;
    // checkTotalStaff.style.color = "black";

    const index = items.indexOf(a111);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showStaffIn() {
  if (checkStaffIn.checked) {
    activeStaffIn = 1;
    // checkStaffIn.style.color = "blue";

    items.push(a112);
    showRefreshWidgets();
  } else {
    activeStaffIn = 0;
    // checkStaffIn.style.color = "black";

    const index = items.indexOf(a112);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showStaffOut() {
  if (checkStaffOut.checked) {
    activeStaffOut = 1;
    // checkStaffOut.style.color = "blue";

    items.push(a113);
    showRefreshWidgets();
  } else {
    activeStaffOut = 0;
    // checkStaffOut.style.color = "black";

    const index = items.indexOf(a113);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showExpectedVisitors() {
  if (checkExpectedVisitors.checked) {
    activeExpectedVisitors = 1;
    // checkExpectedVisitors.style.color = "blue";

    items.push(a106);
    showRefreshWidgets();
  } else {
    activeExpectedVisitors = 0;
    // checkExpectedVisitors.style.color = "black";

    const index = items.indexOf(a106);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showUnExpectedVisitors() {
  if (checkUnExpectedVisitors.checked) {
    activeUnExpectedVisitors = 1;
    // checkUnExpectedVisitors.style.color = "blue";

    items.push(a107);
    showRefreshWidgets();
  } else {
    activeUnExpectedVisitors = 0;
    // checkUnExpectedVisitors.style.color = "black";

    const index = items.indexOf(a107);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showGoodsIn() {
  if (checkGoodsIn.checked) {
    activeGoodsIn = 1;
    // checkGoodsIn.style.color = "blue";

    items.push(a48);
    showRefreshWidgets();
  } else {
    activeGoodsIn = 0;
    // checkGoodsIn.style.color = "black";

    const index = items.indexOf(a48);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showGoodsOut() {
  if (checkGoodsOut.checked) {
    activeGoodsOut = 1;
    // checkGoodsOut.style.color = "blue";

    items.push(a49);
    showRefreshWidgets();
  } else {
    activeGoodsOut = 0;
    // checkGoodsOut.style.color = "black";

    const index = items.indexOf(a49);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showGoodsInwards() {
  if (checkGoodsInwards.checked) {
    activeGoodsInwards = 1;
    // checkGoodsInwards.style.color = "blue";

    items.push(a59);
    showRefreshWidgets();
  } else {
    activeGoodsInwards = 0;
    // checkGoodsInwards.style.color = "black";

    const index = items.indexOf(a59);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showGoodsOutwards() {
  if (checkGoodsOutwards.checked) {
    activeGoodsOutwards = 1;
    // checkGoodsOutwards.style.color = "blue";

    items.push(a60);
    showRefreshWidgets();
  } else {
    activeGoodsOutwards = 0;
    // checkGoodsOutwards.style.color = "black";

    const index = items.indexOf(a60);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCustomAvg() {
  if (checkCustomAvg.checked) {
    activeCustomAvg = 1;
    // checkCustomAvg.style.color = "blue";

    items.push(a70);
    showRefreshWidgets();
  } else {
    activeCustomAvg = 0;
    // checkCustomAvg.style.color = "black";

    const index = items.indexOf(a70);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showRegisterdUser() {
  if (checkRegisterdUser.checked) {
    activeRegisterdUser = 1;
    // checkRegisterdUser.style.color = "blue";

    items.push(a80);
    showRefreshWidgets();
  } else {
    activeRegisterdUser = 0;
    // checkRegisterdUser.style.color = "black";

    const index = items.indexOf(a80);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showTotalDownloads() {
  if (checkTotalDownloads.checked) {
    activeTotalDownloads = 1;
    // checkTotalDownloads.style.color = "blue";

    items.push(a81);
    showRefreshWidgets();
  } else {
    activeTotalDownloads = 0;
    // checkTotalDownloads.style.color = "black";

    const index = items.indexOf(a81);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showOpenAndCloseEscalation() {
  if (checkOpenAndCloseEscalation.checked) {
    activeOpenAndCloseEscalation = 1;
    // checkOpenAndCloseEscalation.style.color = "blue";

    items.push(a83);
    showRefreshWidgets();
  } else {
    activeOpenAndCloseEscalation = 0;
    // checkOpenAndCloseEscalation.style.color = "black";

    const index = items.indexOf(a83);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showZoneWiseEscalation() {
  if (checkZoneWiseEscalation.checked) {
    activeZoneWiseEscalation = 1;
    // checkZoneWiseEscalation.style.color = "blue";

    items.push(a82);
    showRefreshWidgets();
  } else {
    activeZoneWiseEscalation = 0;
    // checkZoneWiseEscalation.style.color = "black";

    const index = items.indexOf(a82);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showCategoryWiseEscalation() {
  if (checkCategoryWiseEscalation.checked) {
    activeCategoryWiseEscalation = 1;
    // checkCategoryWiseEscalation.style.color = "blue";

    items.push(a84);
    showRefreshWidgets();
  } else {
    activeCategoryWiseEscalation = 0;
    // checkCategoryWiseEscalation.style.color = "black";

    const index = items.indexOf(a84);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showServicePartnerEvaluation() {
  if (checkServicePartnerEvaluation.checked) {
    activeServicePartnerEvaluation = 1;
    // checkServicePartnerEvaluation.style.color = "blue";

    items.push(a85);
    showRefreshWidgets();
  } else {
    activeServicePartnerEvaluation = 0;
    // checkServicePartnerEvaluation.style.color = "black";

    const index = items.indexOf(a85);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showFunctionWise() {
  if (checkFunctionWise.checked) {
    activeFunctionWise = 1;
    // checkFunctionWise.style.color = "blue";

    items.push(a101);
    showRefreshWidgets();
  } else {
    activeFunctionWise = 0;
    // checkFunctionWise.style.color = "black";

    const index = items.indexOf(a101);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showClusterWise() {
  if (checkClusterStats.checked) {
    activeClusterStats = 1;
    // checkClusterStats.style.color = "blue";

    items.push(a100);
    showRefreshWidgets();
  } else {
    activeClusterStats = 0;
    // checkClusterStats.style.color = "black";

    const index = items.indexOf(a100);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTrendsOverMonthSites() {
  if (checkTrendsOverMonthSites.checked) {
    activeTrendsOverMonthSites = 1;
    // checkTrendsOverMonthSites.style.color = "blue";

    items.push(a103);
    showRefreshWidgets();
  } else {
    activeTrendsOverMonthSites = 0;
    // checkTrendsOverMonthSites.style.color = "black";

    const index = items.indexOf(a103);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showGenderParticipation() {
  if (checkGenderParticipation.checked) {
    activeGenderParticipation = 1;
    // checkGenderParticipation.style.color = "blue";

    items.push(a102);
    showRefreshWidgets();
  } else {
    activeGenderParticipation = 0;
    // checkGenderParticipation.style.color = "black";

    const index = items.indexOf(a102);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalVisitors2() {
  if (checkTotalVisitorsII.checked) {
    activeTotalVisitorsII = 1;
    // checkTotalVisitorsII.style.color = "blue";

    items.push(a104);
    showRefreshWidgets();
  } else {
    activeTotalVisitorsII = 0;
    // checkTotalVisitorsII.style.color = "black";

    const index = items.indexOf(a104);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}



function showGoodsOut() {
  if (activeGoodsOut == 0) {
    activeGoodsOut = 1;
    checkGoodsOut.style.color = "blue";

    items.push(a49);
    showRefreshWidgets();
  } else {
    activeGoodsOut = 0;
    checkGoodsOut.style.color = "black";

    const index = items.indexOf(a49);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalParking() {
  if (checkTotalParking.checked) {
    activeTotalParking = 1;
    // checkTotalParking.style.color = "blue";

    items.push(b70);
    showRefreshWidgets();
  } else {
    activeTotalParking = 0;
    // checkTotalParking.style.color = "black";

    const index = items.indexOf(b70);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showFreeParking() {
  if (checkFreeParking.checked) {
    activeFreeParking = 1;
    // checkFreeParking.style.color = "blue";

    items.push(b71);
    showRefreshWidgets();
  } else {
    activeFreeParking = 0;
    // checkFreeParking.style.color = "black";

    const index = items.indexOf(b71);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showPaidParking() {
  if (checkPaidParking.checked) {
    activePaidParking = 1;
    // checkPaidParking.style.color = "blue";

    items.push(b72);
    showRefreshWidgets();
  } else {
    activePaidParking = 0;
    // checkPaidParking.style.color = "black";

    const index = items.indexOf(b72);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}
function showOccupiedParking() {
  if (activeOccupiedParking.checked) {
    activeOccupiedParking = 1;
    // checkOccupiedParking.style.color = "blue";

    items.push(b73);
    showRefreshWidgets();
  } else {
    activeOccupiedParking = 0;
    // checkOccupiedParking.style.color = "black";

    const index = items.indexOf(b73);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showVacantParking() {
  if (activeVacantParking.checked) {
    activeVacantParking = 1;
    // checkVacantParking.style.color = "blue";

    items.push(b74);
    showRefreshWidgets();
  } else {
    activeVacantParking = 0;
    // checkVacantParking.style.color = "black";

    const index = items.indexOf(b74);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showTotalGatePass() {
  if (checkTotalGatePass.checked) {
    activeTotalGatePass = 1;
    // checkTotalGatePass.style.color = "blue";

    items.push(a108);
    showRefreshWidgets();
  } else {
    activeTotalGatePass = 0;
    // checkTotalGatePass.style.color = "black";

    const index = items.indexOf(a108);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showReturnablePass() {
  if (checkReturnablePass.checked) {
    activeReturnablePass = 1;
    // checkReturnablePass.style.color = "blue";

    items.push(a109);
    showRefreshWidgets();
  } else {
    activeReturnablePass = 0;
    // checkReturnablePass.style.color = "black";

    const index = items.indexOf(a109);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showNonReturnablePass() {
  if (checkNonReturnablePass.checked) {
    activeNonReturnablePass = 1;
    // checkNonReturnablePass.style.color = "blue";

    items.push(a110);
    showRefreshWidgets();
  } else {
    activeNonReturnablePass = 0;
    // checkNonReturnablePass.style.color = "black";

    const index = items.indexOf(a110);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalAmount() {
  if (checkTotalAmount.checked) {
    activeTotalAmount = 1;
    // checkTotalAmount.style.color = "blue";

    items.push(b34);
    showRefreshWidgets();
  } else {
    activeTotalAmount = 0;
    // checkTotalAmount.style.color = "black";

    const index = items.indexOf(b34);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalReceived() {
  if (checkTotalReceived.checked) {
    activeTotalReceived = 1;
    // checkTotalReceived.style.color = "blue";

    items.push(b35);
    showRefreshWidgets();
  } else {
    activeTotalReceived = 0;
    // checkTotalReceived.style.color = "black";

    const index = items.indexOf(b35);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showTotalOutstanding() {
  if (checkTotalOutstanding.checked) {
    activeTotalOutStanding = 1;
    // checkTotalOutstanding.style.color = "blue";

    items.push(b36);
    showRefreshWidgets();
  } else {
    activeTotalOutStanding = 0;
    // checkTotalOutstanding.style.color = "black";

    const index = items.indexOf(b36);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalOutstandingAmount() {
  if (checkTotalOutstandingAmount.checked) {
    activeTotalOutStandingAmount = 1;
    // checkTotalOutstandingAmount.style.color = "blue";

    items.push(b78);
    showRefreshWidgets();
  } else {
    activeTotalOutStandingAmount = 0;
    // checkTotalOutstandingAmount.style.color = "black";

    const index = items.indexOf(b78);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTotalInventory() {
  if (checkInventory.checked) {
    activeInventory = 1;
    // checkInventory.style.color = "blue";

    items.push(b61);
    showRefreshWidgets();
  } else {
    activeInventory = 0;
    // checkInventory.style.color = "black";

    const index = items.indexOf(b61);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showEmpParticipationStats() {
  if (checkEmpParticipationStats.checked) {
    activeEmpParticipationStats = 1;
    // checkEmpParticipationStats.style.color = "blue";

    items.push(c15);
    showRefreshWidgets();
  } else {
    activeEmpParticipationStats = 0;
    // checkEmpParticipationStats.style.color = "black";

    const index = items.indexOf(c15);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showDeliveryVisitors() {
  if (checkDeliveryVisitors.checked) {
    activeDeliveryVisitors = 1;
    // checkDeliveryVisitors.style.color = "blue";

    items.push(a78);
    showRefreshWidgets();
  } else {
    activeDeliveryVisitors = 0;
    // checkDeliveryVisitors.style.color = "black";

    const index = items.indexOf(a78);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showCheckList() {
  if (checkCheckList.checked) {
    activeCheckList = 1;
    // checkCheckList.style.color = "blue";

    items.push(a75);
    showRefreshWidgets();
  } else {
    activeCheckList = 0;
    // checkCheckList.style.color = "black";

    const index = items.indexOf(a75);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}


function showFacilityInfo() {
  if (checkFacilityInfo.checked) {
    activeFacilityInfo = 1;
    // checkFacilityInfo.style.color = "blue";

    items.push(a74);
    showRefreshWidgets();
  } else {
    activeFacilityInfo = 0;
    // checkFacilityInfo.style.color = "black";

    const index = items.indexOf(a74);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCommLeaderboard() {
  if (checkCommLeaderboard.checked) {
    activeCommLeaderboard = 1;
    // checkCommLeaderboard.style.color = "blue";

    items.push(c19);
    showRefreshWidgets();
  } else {
    activeCommLeaderboard = 0;
    // checkCommLeaderboard.style.color = "black";

    const index = items.indexOf(c19);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showDepartmentStats() {
  if (checkDepartmentStats.checked) {
    activeDepartmentStats = 1;
    // checkDepartmentStats.style.color = "blue";

    items.push(c14);
    showRefreshWidgets();
  } else {
    activeDepartmentStats = 0;
    // checkDepartmentStats.style.color = "black";

    const index = items.indexOf(c14);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showDailyStepCount() {
  if (checkDailyStepCount.checked) {
    activeDailyStepCount = 1;
    // checkDailyStepCount.style.color = "blue";

    items.push(c11);
    showRefreshWidgets();
  } else {
    activeDailyStepCount = 0;
    // checkDailyStepCount.style.color = "black";

    const index = items.indexOf(c11);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showCommLeaderboardFemale() {
  if (checkCommLeaderboardFemale.checked) {
    activeCommLeaderboardFemale = 1;
    // checkCommLeaderboardFemale.style.color = "blue";

    items.push(c21);
    showRefreshWidgets();
  } else {
    activeCommLeaderboardFemale = 0;
    // checkCommLeaderboardFemale.style.color = "black";

    const index = items.indexOf(c21);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showTechnicalChecklist() {
  if (checkTechnicalChecklist.checked) {
    activeTechnicalChecklist = 1;
    // checkTechnicalChecklist.style.color = "blue";

    items.push(a114);
    showRefreshWidgets();
  } else {
    activeTechnicalChecklist = 0;
    // checkTechnicalChecklist.style.color = "black";

    const index = items.indexOf(a114);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }
}

function showNonTechnicalChecklist() {
  if (checkNonTechnicalChecklist.checked) {
    activeNonTechnicalChecklist = 1;
    // checkNonTechnicalChecklist.style.color = "blue";

    items.push(a115);
    showRefreshWidgets();
  } else {
    activeNonTechnicalChecklist = 0;
    // checkNonTechnicalChecklist.style.color = "black";

    const index = items.indexOf(a115);
    if (index > -1) {
      items.splice(index, 1);
    }
    showRefreshWidgets();
  }

}






/// Download Reports-------------------------------------------------------------------------------
function downloadVisitors() {
  window.open(
    ip +
    "fm-excel-download/get-visitors-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond +
    "_blank"
  );
}
// }


function downloadGoodsInwards() {

  window.open(downloadGoodInLink
    ,
    "_blank"
  );

}

function downloadOutwards() {

  window.open(downloadGoodOutLink
    ,
    "_blank"
  );

}

function downloadTotalVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "fm-excel-download/get-visitors-excel-data/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "fm-excel-download/get-visitors-excel-data/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}
function downloadExpectedVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-expected-visitors-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-expected-visitors-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadUnExpectedVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-unexpected-visitors-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-unexpected-visitors-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadTotalGatePass() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-total-visitors-gatepass-download/" +
      idLink +
      "&date=" +
      globalDateFirst, "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-total-visitors-gatepass-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadReturnGatePass() {
  window.open(ip + "//" + idLink + "&date=" + globalDateFirst, "_blank");
}

function downloadNonReturnGatePass() {
  window.open(ip + "//" + idLink + "&date=" + globalDateFirst, "_blank");
}

function downloadTotalVehicles() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-visitors-behicle-in-out-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-visitors-behicle-in-out-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadTotalStaff() {
  window.open(ip + "quick-gate-monthly/get-total-staff-download/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond, "_blank");
}

function downloadStaffIn() {
  window.open(ip + "quick-gate-monthly/get-total-staff-in-download/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond, "_blank");
}

function downloadStaffOut() {
  window.open(ip + "quick-gate-monthly/get-total-staff-out-download/" + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond, "_blank");
}

function downloadGoodsInwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-goods-inward-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-goods-inward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadOutwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-goods-outward-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-goods-outward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
function downloadAsset() {
  window.open(
    ip +
    "fm-excel-download/get-total-assets-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"

  );
}
function downloadAssetInUse() {
  window.open(
    ip +
    "fm-excel-download/get-assets-in-use-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadAssetIB() {
  window.open(
    ip +


    "fm-excel-download/get-assets-in-breakdown-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadCAIB() {
  window.open(
    ip +
    "fm-excel-download/get-critical-assets-inbreakdown-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadAssetPPM() {
  window.open(
    ip +
    "fm-excel-download/get-ppm-conducted-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTickets() {
  console.log(downloadTicketsLink);
  window.open(downloadTicketsLink, "_blank");
}

function downloadActivityFeed() {
  window.open(
    ip +
    "" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadCategoryWiseTickets() {
  console.log(downloadCategoryTicketsLink);
  window.open(
    downloadCategoryTicketsLink, "_blank"
  );
}
function downloadCategoryWiseProactiveTickets() {
  window.open(
    downloadCategoryWiseProactiveTicketsLink,
    "_blank"
  );
}
function downloadCACategoryWiseTickets() {
  window.open(downloadCACategoryWiseTicketsLink, "_blank"
  );
}
function downloadCACategoryWiseProactiveTickets() {
  window.open(downloadCACategoryWiseProactiveTicketsLink, "_blank"
  );
}
function downloadTicketsAgeingMatrix() {

  window.open(
    ip +
    "fm-excel-download/get-commonArea-category-wise-proactiveticket-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

/// Download Reports-------------------------------------------------------------------------------
function downloadVisitors() {
  window.open(
    ip +
    "fm-excel-download/get-visitors-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond +
    "_blank"
  );
}
// }

function downloadGoodsInwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-day-wise-goods-inward-download/" +
      idLink +
      "&date=" +
      globalDateFirst +
      "&building_id=" +
      globalGoodsIn,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-day-wise-goods-inward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond +
      "&building_id=" +
      globalVisitorBuildingId,
      "_blank"
    );
  }
}

function downloadOutwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-day-wise-goods-outward-download/" +
      idLink +
      "&date=" +
      globalDateFirst +
      "&building_id=" +
      globalGoodsOut,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-day-wise-goods-outward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond +
      "&building_id=" +
      globalVisitorBuildingId,
      "_blank"
    );
  }
}

function downloadTotalVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "fm-excel-download/get-visitors-excel-data/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "fm-excel-download/get-visitors-excel-data/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}
function downloadExpectedVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-expected-visitors-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-expected-visitors-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadUnExpectedVisitors() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-unexpected-visitors-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-unexpected-visitors-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadTotalGatePass() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-total-visitors-gatepass-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-total-visitors-gatepass-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadReturnGatePass() {
  window.open(ip + "//" + idLink + "&date=" + globalDateFirst, "_blank");
}

function downloadNonReturnGatePass() {
  window.open(ip + "//" + idLink + "&date=" + globalDateFirst, "_blank");
}

function downloadTotalVehicles() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-visitors-behicle-in-out-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-visitors-behicle-in-out-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadGoodsInwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-goods-inward-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-goods-inward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}

function downloadOutwards() {
  if ((globalType = "daily")) {
    window.open(
      ip +
      "charts-daily/get-goods-outward-download/" +
      idLink +
      "&date=" +
      globalDateFirst,
      "_blank"
    );
  } else {
    window.open(
      ip +
      "charts-monthly/get-goods-outward-download/" +
      idLink +
      "&from_date=" +
      globalDateFirst +
      "&to_date=" +
      globalDateSecond,
      "_blank"
    );
  }
}
// ---------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------------------------------------------------------
function downloadAsset() {
  window.open(
    ip +
    "fm-excel-download/get-total-assets-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadAssetInUse() {
  window.open(
    ip +
    "fm-excel-download/get-assets-in-use-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadAssetIB() {
  window.open(
    ip +
    "fm-excel-download/get-assets-in-breakdown-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCAIB() {
  window.open(
    ip +
    "fm-excel-download/get-critical-assets-inbreakdown-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadAssetPPM() {
  window.open(
    ip +
    "fm-excel-download/get-ppm-conducted-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadActivityFeed() {
  window.open(
    ip +
    "" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTicketsAgeingMatrix() {
  window.open(
    ip +
    "fm-excel-download/get-ageing-matrix-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadResolutionTAT() {
  window.open(downloadResolutionTATLink, "_blank"
  );
}

function downloadResponseTAT() {
  window.open(
    downloadResponseTATLink,
    "_blank"
  );
}

function downloadDConsumPie() {
  window.open(
    ip +
    "fm-excel-download/get-cumulitive-power-consumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadWaterConsumption() {
  window.open(
    ip +
    "" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadIncidents() {
  window.open(
    downloadIncidentsLink, "_blank"
  );
}

function downloadCategoryWiseIncidents() {
  window.open(
    downloadCategoryWiseIncidentsLink, "_blank"
  );
}

function downloadManPowerAttendance() {
  window.open(
    downloadEventsFootfallAnalysisLink, "_blank"
  );
}

function downloadEventsFootfallAnalysis() {
  window.open(
    ip +
    "fm-excel-download/get-footfall-analysis-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadLTIR() {
  window.open(
    ip +
    "fm-excel-download/get-incident-LTIR-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadLTIRTop() {
  window.open(
    ip +
    "supervisor-monthly/get-ltir-top-management-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadZeroIncidentDays() {
  window.open(
    ip +
    "fm-excel-download/get-zero-incident-days-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadIncidentPerSqFt() {
  window.open(
    ip +
    "fm-excel-download/get-incident-per-square-feet-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadIncidentNearMissGoodCatch() {
  window.open(
    ip +
    "fm-excel-download/get-incident-near-miss-and-good-catch-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadSafeManHours() {
  window.open(
    ip +
    "fm-excel-download/get-safe-man-hours-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadRAC() {
  window.open(
    ip +
    "fm-excel-download/get-incident-RCA-chart-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadAssetsBreakdown() {
  window.open(
    ip +
    "fm-excel-download/get-asset-break-downs-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadPyramid() {
  window.open(
    downloadPyramidLink, "_blank"
  );
}

function downloadRootCause() {
  window.open(
    ip +
    "fm-excel-download/get-cause-wise-incidents-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadBodyInjuryChart() {
  window.open(
    ip +
    "fm-excel-download/get-incident-body-injury-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadTotalConsumption() {
  window.open(
    ip +
    "fm-excel-download/get-ht-main-meter-total-consumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTransformaerTotal() {
  window.open(
    ip +
    "fm-excel-download/get-transformer-total-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadFitoutTableData() {
  window.open(
    ip +
    "fm-excel-download/get-active-fitout-requests/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadfitoutUnoccupied() {
  window.open(
    ip +
    "fm-excel-download/get-occupancy-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadftFitoutFlats() {
  window.open(
    ip +
    "fm-excel-download/get-fitout-flat/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadDgtotal() {
  window.open(
    ip +
    "fm-excel-download/get-dg-total-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTotalDieselConsumed() {
  window.open(
    ip +
    "fm-excel-download/get-total-diesel-consumed-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadPowerConsum() {
  window.open(
    downloadPowerConsumLink, "_blank"
  );
}

function downloadPowerConsumMonth() {
  window.open(
    downloadPowerConsumMonthLink, "_blank"
  );
}

function downloadCarbonEmissionScope1() {
  window.open(
    ip +
    "fm-excel-download/get-carbon-emission-scope1-excel-data/"
    + idLink + "&from_date=" + globalDateFirst + "&to_date=" + globalDateSecond, "_blank"
  );
}

function downloadCarbonEmissionScope2() {
  window.open(
    ip +
    "fm-excel-download/get-carbon-emission-scope2-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadEnergyIntensity() {
  window.open(
    ip +
    "fm-excel-download/get-energy-intensity-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadwcTotalConsumption() {
  window.open(
    ip +
    "fm-excel-download/get-totalWaterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadwcTotalSTP() {
  window.open(
    ip +
    "fm-excel-download/get-total-stp-WaterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadDomesticTotal() {
  window.open(
    ip +
    "fm-excel-download/get-card-domestic-waterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadFlushingTotal() {
  window.open(
    ip +
    "fm-excel-download/get-card-flushing-waterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadIrrigation() {
  window.open(
    ip +
    "fm-excel-download/get-card-irrigation-waterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );

}

function downloadWaterConsumLPCD() {
  window.open(
    ip +
    "fm-excel-download/get-card-lpcd-waterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadWaterConsumPie() {
  window.open(
    ip +
    "fm-excel-download/get-water-sourcePieChart-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadWaterConsumBar() {
  window.open(
    downloadWaterConsumBarLink, "_blank"
  );
}
function downloadFuelConsumption() {
  window.open(
    ip +
    "fm-excel-download/get-total-fuel-consumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadFitout() {
  window.open(
    ip +
    "fm-excel-download/get-fitout-chart-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
function downloadOccupancy() {
  window.open(
    downloadOccupancyLink, "_blank"
  );
}


function downloadExecutiveEscalation() {
  window.open(
    ip +
    "fm-excel-download/get-executive-escalation-table-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadcustomerSentiment() {
  window.open(
    ip +
    "fm-excel-download/get-sentiments-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadcardCustomerAvg() {
  window.open(
    ip +
    "fm-excel-download/get-sentiments-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadFacilityInfo() {
  window.open(
    ip +
    "fm-excel-download/get-club-facilities-monthly-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadChecklist() {
  window.open(
    ip +
    "fm-excel-download/get-chart-checklist-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadDieselNot() {
  window.open(
    ip +
    "fm-excel-download/get-card-total-diesel-non-consumed-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadWaterNot() {
  window.open(
    ip +
    "fm-excel-download/get-card-total-tanker-non-consumption-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadDeliveryVisitor() {
  window.open(
    downloadDeliveryVisitorLink, "_blank"
  );
}

function downloadRegisteredUsers() {
  window.open(
    ip +
    "fm-excel-download/get-total-users-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadDownloads() {
  window.open(
    ip +
    "fm-excel-download/get-total-downloads-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadCategoryEscalation() {
  window.open(
    ip +
    "fm-excel-download/get-executive-escalation-table-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateFirst,
    "_blank"
  );
}

function downloadGenderParticipation() {
  window.open(
    downloadGenderParticipationLink,
    "_blank"
  );
}

function downloadClusterWiseTotal() {
  window.open(downloadClusterWiseTotalLink,
    "_blank"
  );
}


function downloadFunctionWiseTotal() {
  window.open(
    downloadFunctionWiseTotalLink,
    "_blank"
  );
}



function downloadTrendsMonths() {
  window.open(downloadTrendsMonthsLink,
    "_blank"
  );
}





function downloadTrendsSites() {
  window.open(downloadTrendsSitesLink,
    "_blank"
  );
}



function downloadTotalVisitorsChartII() {

  window.open(
    downloadTotalVisitorIILink,
    "_blank"
  );

}

function downloadPermitSite() {
  window.open(
    ip +
    "supervisor-monthly/get-site-wise-permits-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadPermitStatus() {
  window.open(
    ip +
    "supervisor-monthly/get-permits-status-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadOverStock() {
  window.open(
    ip +
    "supervisor-monthly/get-Over-Stock-Items-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadUnderStock() {
  window.open(
    ip +
    "supervisor-monthly/get-Under-Stock-Items-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadWorkOrder() {
  window.open(
    ip +
    "supervisor-monthly/get-card-work-order-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadPurchaseOrder() {
  window.open(
    ip +
    "supervisor-monthly/get-card-purchase-order-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTotalValue() {
  window.open(
    ip +
    "supervisor-monthly/get-Total-value-of-Inventory-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadInventory() {
  window.open(
    ip +
    "supervisor-monthly/get-card-total-inventory-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTotalConsumables() {
  window.open(
    ip +
    "supervisor-monthly/get-Total-Value-Of-Consumables-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTotalSpares() {
  window.open(
    ip +
    "supervisor-monthly/get-Total-Value-Of-Spares-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}


function downloadIncidentSummary() {
  window.open(
    ip +
    "fm-excel-download/get-incident-RCA-chart-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTotalParking() {
  window.open(
    ip +
    "supervisor-monthly/get-total-parking-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadFreeParking() {
  window.open(
    ip +
    "supervisor-monthly/get-free-parking-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadPaidParking() {
  window.open(
    ip +
    "supervisor-monthly/get-paid-parking-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadOccupiedParking() {
  window.open(
    ip +
    "supervisor-monthly/get-occupied-parking-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadVacantParking() {
  window.open(
    ip +
    "supervisor-monthly/get-vacant-parking-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
// -----------


function downloadClusterEmployeeParticiption() {
  window.open(
    ip +
    "stepathon/get-cluster-employee-participation-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCumulativeLeaderboardFemale() {
  window.open(
    ip +
    "stepathon/get-cumulative-leaderboard-female-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}


function downloadDailyStepCount() {
  window.open(
    ip +
    "stepathon/get-organisation-daily-step-count-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadFunctionEmployee() {
  window.open(
    ip +
    "stepathon/get-function-employee-participation-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCumulativeLeaderboardMale() {
  window.open(
    ip +
    "stepathon/get-cumulative-leaderboard-male-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadTechnicalChecklist() {
  window.open(
    ip +
    "fm-excel-download/get-chart-technical-checklist-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadNonTechnicalChecklist() {
  window.open(
    ip +
    "fm-excel-download/get-chart-non-technical-checklist-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadOpenEscalation() {

  window.open(
    ip +
    "fm-excel-download/get-open-escalation-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadCloseEscalation() {

  window.open(
    ip +
    "fm-excel-download/get-closed-escalation-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}




function downloadAvgEscalation() {

  window.open(
    ip +
    "fm-excel-download/get-average-escalation-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadSiteWise() {
  window.open(
    ip +
    "supervisor-monthly/get-site-wise-power-consumption-excel-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadAssetBreakdown() {
  window.open(
    ip +
    "supervisor-monthly/get-assets-breakdown-excel-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadChecklistTop() {
  window.open(
    ip +
    "fm-excel-download/get-top-ten-checklist-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadAuditScore() {
  window.open(
    ip +
    "fm-excel-download/get-auditscore-table-excel-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadInventoryConsumption() {
  window.open(
    ip +
    "inventory/get-inventory-consumption-non-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadInventoryConsumptionReport() {
  window.open(
    ip +
    "inventory/get-inventory-consumption-report-non-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCurrentStock() {
  window.open(
    ip +
    "inventory/get-inventory-current-stock-non-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadInventoryConsumptionGreen() {
  window.open(
    ip +
    "inventory/get-inventory-consumption-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadInventoryConsumptionReportGreen() {
  window.open(
    ip +
    "inventory/get-inventory-consumption-report-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCurrentStockGreen() {
  window.open(
    ip +
    "inventory/get-inventory-current-and-minimum-stock-green-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}


function downloadZeroIncidentDaysTop() {
  window.open(
    ip +
    "supervisor-monthly/get-zero-incident-days-top-management-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadIncidentPerSqFtTop() {
  window.open(
    ip +
    "supervisor-monthly/get-incident-per-sq-ft-per-annum-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}


function downloadIncidentNearMissGoodCatchTop() {
  window.open(
    ip +
    "supervisor-monthly/get-incident-near-miss-and-good-catch-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}


function downloadIncidentTop() {

  window.open(
    ip +
    "supervisor-monthly/get-open-closed-incident-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );

}

function downloadPyramidTop() {
  window.open(
    ip +
    "supervisor-monthly/get-level-wise-incident-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadIncidentSummaryTop() {
  window.open(
    ip +
    "supervisor-monthly/get-incident-summary-top-management-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}

function downloadCategoryWiseIncidentsTop() {
  window.open(
    ip +
    "supervisor-monthly/get-top-five-category-wise-incident-download/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}




function downloadWaterDomesticMonth() {
  window.open(
    ip +
    "fm-excel-download/get-card-domestic-waterConsumption-excel-data/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}



function downloadWaterConsumBarSector() {
  window.open(
    ip +
    "charts-monthly/get-chart-sector-wise-domestic-waterConsumption-excel/" +
    idLink +
    "&from_date=" +
    globalDateFirst +
    "&to_date=" +
    globalDateSecond,
    "_blank"
  );
}
